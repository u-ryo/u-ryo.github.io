<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-11-29T14:32:01+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[CheckBox on ListView]]></title><link href="http://u-ryo.github.io//blog/2017/11/24/checkbox-on-listview/"/><updated>2017-11-24T18:33:21+09:00</updated><id>/blog/2017/11/24/checkbox-on-listview/</id><content type="html"><![CDATA[<p>Androidでのお話です。
<code>ListView</code>のそれぞれに<code>CheckBox</code>をつけたら、
checkboxはcheck出来るものの、項目選択が出来なくなりました。
どうやら<code>onItemClick</code>が呼ばれてない様子。
調べてみると、<code>CheckBox</code>がfocusを奪ってしまっているそうでした。
(<a href="http://inujirushi123.blog.fc2.com/blog-entry-53.html">カスタマイズしたListViewに設定したCheckBoxのon/offを行全体で行う</a>)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>android:clickable=&quot;false&quot;
</span><span class='line'>android:focusable=&quot;false&quot;
</span></code></pre></td></tr></table></div></figure>
<p>が必要とのこと。</p>
<p>また、
background処理後、<code>Adapter</code>の値を変えただけでは<code>CheckBox</code>の見た目に変化はないんですね。
explicitに<code>setChecked(false)</code>して回らないとなりません。
その際、<code>listView.getChildCount()</code>で取れるcountは、<code>ListView</code>の全てではなく、見える範囲のListのobjectなんですね! 確かにscrollすればredrawかかってadapterの値が反映されるからいいんですけど、何かしない限りredrawされないから自分で描画しないとならないんですねー。</p>
]]></content></entry><entry><title type="html"><![CDATA[OnClickListener with ProgressDialog by RxAndroid]]></title><link href="http://u-ryo.github.io//blog/2017/11/24/onclicklistener-with-progressdialog-by-rxandroid/"/><updated>2017-11-24T18:25:09+09:00</updated><id>/blog/2017/11/24/onclicklistener-with-progressdialog-by-rxandroid/</id><content type="html"><![CDATA[<p>「clickしたらbackgroundで処理して
その間ProgressDialog出して
終わったらProgressDialog消して
終了/失敗dialogを表示する」のを
RxAndroid(AxJava)でやる、
というのは、
<code>using()</code>を使うといいらしいです。
cf. <a href="https://qiita.com/boohbah/items/e8010730725c54f85a3a">RxJavaを使った通信中にProgressダイアログを出す</a></p>
<p>元々がretrofit2を使ってないので、
retrofit2を使うともうちょっと違うかも。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Override
</span><span class='line'>public void onClick(View v) {
</span><span class='line'>    LogUtil.d(&quot;è¨ºæ­åå¾çµæãuploadãã button&quot;);
</span><span class='line'>    uploadButtonEnable(false);
</span><span class='line'>    if (!activity.networkCheck()) {
</span><span class='line'>        activity.genAlertDialog(activity.getString(
</span><span class='line'>                R.string.no_network_connectivity_available_message),
</span><span class='line'>                (dialog, which) -&gt; {});
</span><span class='line'>        uploadButtonEnable(true);
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>    Single.using(this::showProgressDialog,
</span><span class='line'>            dialog -&gt; Single.<span class="nt">&lt;Boolean&gt;</span>create(this::setUploadSubscriber)
</span><span class='line'>                    .subscribeOn(Schedulers.newThread())
</span><span class='line'>                    .observeOn(AndroidSchedulers.mainThread()),
</span><span class='line'>            Dialog::dismiss)
</span><span class='line'>            .subscribe(this::controlUploadButtonWithDialog,
</span><span class='line'>                    this::showUploadFailureDialog);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private ProgressDialog showProgressDialog() {
</span><span class='line'>    ProgressDialog dialog = new ProgressDialog(activity);
</span><span class='line'>    dialog.setMessage(activity.getString(R.string.history_uploading));
</span><span class='line'>    dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
</span><span class='line'>    dialog.show();
</span><span class='line'>    LogUtil.d(dialog.toString());
</span><span class='line'>    return dialog;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void setUploadSubscriber(SingleSubscriber<span class="err">&lt;</span>? super Boolean&gt; subscriber) {
</span><span class='line'>    View historyListView = activity.findViewById(R.id.historyListView);
</span><span class='line'>    List<span class="nt">&lt;String&gt;</span> selectedList = new ArrayList<span class="err">&lt;</span>&gt;();
</span><span class='line'>    Adapter adapter = null;
</span><span class='line'>    if (historyListView != null) {
</span><span class='line'>        adapter = ((ListView) historyListView).getAdapter();
</span><span class='line'>        for (int i = 0; i <span class="nt">&lt; adapter</span><span class="err">.</span><span class="na">getCount</span><span class="err">();</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
</span><span class='line'>            <span class="na">Map</span><span class="err">&lt;</span><span class="na">String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span> historyItems = (Map<span class="nt">&lt;String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span>) adapter.getItem(i);
</span><span class='line'>            if (&quot;true&quot;.equals(historyItems.get(&quot;historySelected&quot;))) {
</span><span class='line'>                selectedList.add(historyItems.get(&quot;historyCatalogID&quot;));
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if (selectedList.isEmpty()) {
</span><span class='line'>            subscriber.onSuccess(false);
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    try {
</span><span class='line'>        ProcessUtil.callReportDataAll(commonBean.toMapFull(), activity, selectedList);
</span><span class='line'>        if ((!selectedList.isEmpty()
</span><span class='line'>                <span class="err">&amp;&amp;</span> !ProcessUtil.uploadSucceeded(selectedList, activity))
</span><span class='line'>                || (selectedList.isEmpty()
</span><span class='line'>                <span class="err">&amp;&amp;</span> !ProcessUtil.lastUploadSucceeded(activity))) {
</span><span class='line'>            subscriber.onError(new RuntimeException(&quot;&quot;));
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>        ProcessUtil.sendTerminalUsageHistory(commonBean.toMap(), activity);
</span><span class='line'>        subscriber.onSuccess(true);
</span><span class='line'>        LogUtil.d(selectedList.toString());
</span><span class='line'>
</span><span class='line'>        if (adapter != null) {
</span><span class='line'>            for (int i = 0; i <span class="nt">&lt; adapter</span><span class="err">.</span><span class="na">getCount</span><span class="err">();</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
</span><span class='line'>                <span class="na">Map</span><span class="err">&lt;</span><span class="na">String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span> historyItems = (Map<span class="nt">&lt;String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span>) adapter.getItem(i);
</span><span class='line'>                if (&quot;true&quot;.equals(historyItems.get(&quot;historySelected&quot;))) {
</span><span class='line'>                    historyItems.put(&quot;historySelected&quot;, &quot;false&quot;);
</span><span class='line'>                    historyItems.put(&quot;historySaved&quot;,
</span><span class='line'>                            activity.getString(R.string.history_list_already_saved));
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    } catch (Exception e) {
</span><span class='line'>        LogUtil.e(e);
</span><span class='line'>        subscriber.onError(e);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void controlUploadButtonWithDialog(boolean hasItemSelected) {
</span><span class='line'>    ListView listView = (ListView) activity.findViewById(R.id.historyListView);
</span><span class='line'>    if (hasItemSelected) {
</span><span class='line'>        activity.genAlertDialog(activity.getString(
</span><span class='line'>                R.string.diagnosis_result_upload_success_message),
</span><span class='line'>                (dialog, which) -&gt; {});
</span><span class='line'>        if (listView != null) {
</span><span class='line'>            for (int i = 0; i <span class="nt">&lt; listView</span><span class="err">.</span><span class="na">getChildCount</span><span class="err">();</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
</span><span class='line'>                <span class="na">CheckBox</span> <span class="na">checkBox =</span><span class="err"> </span><span class="s">(CheckBox)</span> <span class="na">listView</span><span class="err">.</span><span class="na">getChildAt</span><span class="err">(</span><span class="na">i</span><span class="err">)</span>
</span><span class='line'>                        <span class="err">.</span><span class="na">findViewById</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">id</span><span class="err">.</span><span class="na">historySelected</span><span class="err">);</span>
</span><span class='line'>                <span class="na">if</span> <span class="err">(</span><span class="na">checkBox</span><span class="err">.</span><span class="na">isChecked</span><span class="err">())</span> <span class="err">{</span>
</span><span class='line'>                    <span class="na">checkBox</span><span class="err">.</span><span class="na">setChecked</span><span class="err">(</span><span class="na">false</span><span class="err">);</span>
</span><span class='line'>                    <span class="na">checkBox</span><span class="err">.</span><span class="na">setEnabled</span><span class="err">(</span><span class="na">false</span><span class="err">);</span>
</span><span class='line'>                    <span class="na">TextView</span> <span class="na">saved =</span><span class="err"> </span><span class="s">(TextView)</span> <span class="na">listView</span><span class="err">.</span><span class="na">getChildAt</span><span class="err">(</span><span class="na">i</span><span class="err">)</span>
</span><span class='line'>                            <span class="err">.</span><span class="na">findViewById</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">id</span><span class="err">.</span><span class="na">historySaved</span><span class="err">);</span>
</span><span class='line'>                    <span class="na">saved</span><span class="err">.</span><span class="na">setText</span><span class="err">(</span><span class="na">activity</span><span class="err">.</span><span class="na">getString</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">string</span><span class="err">.</span><span class="na">history_list_already_saved</span><span class="err">));</span>
</span><span class='line'>                    <span class="na">saved</span><span class="err">.</span><span class="na">setTextColor</span><span class="err">(</span><span class="na">Color</span><span class="err">.</span><span class="na">GRAY</span><span class="err">);</span>
</span><span class='line'>                <span class="err">}</span>
</span><span class='line'>            <span class="err">}</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>    <span class="err">}</span> <span class="na">else</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">activity</span><span class="err">.</span><span class="na">genAlertDialog</span><span class="err">(</span><span class="na">activity</span><span class="err">.</span><span class="na">getString</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">string</span><span class="err">.</span><span class="na">history_nothing_checked</span><span class="err">),</span>
</span><span class='line'>                <span class="err">(</span><span class="na">dialog</span><span class="err">,</span> <span class="na">which</span><span class="err">)</span> <span class="na">-</span><span class="nt">&gt;</span> {});
</span><span class='line'>    }
</span><span class='line'>    uploadButtonEnable(false);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void showUploadFailureDialog(Throwable e) {
</span><span class='line'>    uploadButtonEnable(true);
</span><span class='line'>    LogUtil.e(checkStr(e.getMessage()), e);
</span><span class='line'>    activity.genAlertDialog(activity.getString(
</span><span class='line'>            R.string.diagnosis_result_upload_failure_message)
</span><span class='line'>                    + &quot;\n&quot; + e.getMessage(),
</span><span class='line'>            (dialog, which) -&gt; {});
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public void uploadButtonEnable(boolean enable) {
</span><span class='line'>    uploadButton.setEnabled(enable);
</span><span class='line'>    if (enable) {
</span><span class='line'>        uploadButton.getBackground().setColorFilter(null);
</span><span class='line'>    } else {
</span><span class='line'>        uploadButton.getBackground()
</span><span class='line'>                .setColorFilter(Color.GRAY, PorterDuff.Mode.MULTIPLY);
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Knapsack Problem]]></title><link href="http://u-ryo.github.io//blog/2017/10/20/knapsack-problem/"/><updated>2017-10-25T15:25:09+09:00</updated><id>/blog/2017/10/20/knapsack-problem/</id><content type="html"><![CDATA[<p>ここ最近、Knapsack Problemが流行っている感じがしています。</p>
<p><a href="http://www.ap-siken.com/kakomon/29_haru/pm03.html">応用情報技術者過去問題 平成29年春期 午後問3</a>では基本「全探索」、改善提案が「枝刈り」でしたが、それでは全然不十分です。この問題は要するにKnapsack Problemのちょっとした変形で、code量もさしたることなく書けますし、折角FEではなくAPなのだし、日本の若者のためにも、Knapsackで書くよう誘導すべきだったのでは、と「禿げしく」思ったものでした。</p>
<p>すると、今度は<a href="http://www.ap-siken.com/kakomon/29_aki/pm03.html">応用情報技術者過去問題 平成29年秋期 午後問3</a>でKnapsack Problemを正面から出してきましたね。0-1ではなく普通の。ぼくは前回のrevengeではないかと思ってみています。
問題自体は、あまりにも普通のKnapsack Problemなので、ツッコミようがなくてつまんなかったデス。</p>
<p>この他にアジアでも。そっちは0-1でした。</p>
<h3>References</h3>
<ul>
<li>Wikipedia<a href="https://en.wikipedia.org/wiki/Knapsack_problem">En</a>, <a href="https://ja.wikipedia.org/wiki/%E3%83%8A%E3%83%83%E3%83%97%E3%82%B5%E3%83%83%E3%82%AF%E5%95%8F%E9%A1%8C">Ja</a></li>
<li><a href="http://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=DPL_1_B">Aizu Online Judge</a></li>
<li><a href="http://www.itmedia.co.jp/keywords/algorithmer.html">「最強最速アルゴリズマー養成講座」最新記事一覧</a>, <a href="http://www.itmedia.co.jp/enterprise/articles/1005/15/news002.html">病みつきになる「動的計画法」、その深淵に迫る</a>, <a href="http://www.itmedia.co.jp/enterprise/articles/1003/06/news002.html">アルゴリズマーの登竜門、「動的計画法・メモ化再帰」はこんなに簡単だった</a></li>
<li><a href="http://pieceofnostalgy.blogspot.jp/2013/12/01.html">片鱗懐古のブログ 01ナップサック問題を動的計画法で解く場合の考え方</a></li>
<li><a href="http://fantom1x.blog130.fc2.com/blog-entry-174.html">【Java】ナップサック問題(knapsack)[動的計画法]  </a></li>
</ul>
<p>ちなみに日本語では「ナップザック」、登山用語はドイツから入ってきたから、です。</p>
]]></content></entry><entry><title type="html"><![CDATA[Robolectric + PowerMock]]></title><link href="http://u-ryo.github.io//blog/2017/10/17/robolectric-powermock/"/><updated>2017-11-29T14:32:01+09:00</updated><id>/blog/2017/10/17/robolectric-powermock/</id><content type="html"><![CDATA[<p><a href="https://robolectric.org">Robolectric</a>のquick startは、<a href="http://robolectric.org/writing-a-test/">本家</a>が詳しい。</p>
<ul>
<li><code>build.gradle</code>に、以下が必要(Android Studio 2系の場合)。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>testCompile &#39;org.robolectric:robolectric:3.4.2&#39;
</span><span class='line'>testCompile &#39;org.robolectric:shadows-multidex:3.3.2&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-module-junit4:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-module-junit4-rule:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-api-mockito2:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-reflect:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-classloading-xstream:1.7.3&#39;
</span></code></pre></td></tr></table></div></figure></li>
<li>Test Classは、Android Studioで開いた実class java fileの<code>public class CLASS名</code>のところで黄色いヒントをclickして<code>Create Test class</code>を選択、<code>JUnit4</code>で作成</li>
<li>既存test classの<code>Whitebox</code>は<code>org.powermock.reflect.Whitebox</code>で置き換え</li>
<li>既存test classの<code>@RunWith</code>の<code>MockitoJUnitRunner</code>は<code>org.mockito.junit.MockitoJUnitRunner</code>で置き換え</li>
<li><code>org.mockito.exceptions.misusing.UnnecessaryStubbingException:</code>というwarningが出るようになったので<code>@RunWith(MockitoJUnitRunner.Silent.class)</code>にすると解消<br  />
cf. <a href="https://stackoverflow.com/questions/42947613/how-to-resolve-unneccessary-stubbing-exception">How to resolve Unneccessary Stubbing exception</a></li>
<li><code>Robolectric</code>なTestは、1.<code>@RunWith(RobolectricTestRunner.class)</code> 2.<code>activity = Robolectric.setupActivity(SomeActivity.class);</code>で<code>Activity</code>を起動</li>
<li><code>RuntimeException: Multi dex installation failed</code>と言われるので<code>shadows-multidex</code>が必要<br  />
cf. <a href="https://qiita.com/kuwapp/items/942f0e44adbd45adff10">Robolectric と Multidex でテストが落ちる問題の対応</a></li>
<li>static methodのmockは<a href="https://github.com/powermock/powermock">PowerMock</a>と。<code>@RunWith</code>がかぶっちゃうよ、どうしよう! → <a href="https://github.com/robolectric/robolectric/wiki/Using-PowerMock">本家に解説</a>あり。要は、<code>@PowerMockIgnore</code>でmockito、robolectric、android標準classesを除外、<code>@PrepareForTest</code>でstatic methodを持つclassを指定し、<code>@Rule</code>を入れ(使わないのによくわからないが必要)、<code>PowerMockito.mockStatic(...)</code>で当該classを指定</li>
<li><code>NoClassDefFoundError: org/powermock/classloading/ClassloaderExecutor</code>と言われるので、<code>powermock-classloading-xstream</code>が必要<br  />
cf. <a href="https://github.com/powermock/powermock/issues/597">version 1.5.5 java.lang.ClassNotFoundException: org.powermock.classloading.DeepCloner #597</a></li>
<li><code>NoClassDefFoundError: org/mockito/cglib/proxy/MethodInterceptor</code>と言われるので、<code>powermock-api-mockito2</code>と<code>2</code>でないとならない<br  />
cf. <a href="https://github.com/powermock/powermock/issues/819">Problem with org.mockito.plugins.MockMaker and loading MethodInterceptor #819</a></li>
<li><code>javax.xml.parsers.FactoryConfigurationError: Provider ...DocumentBuilderFactoryImpl cannot be cast to javax.xml.parsers.DocumentBuilderFactory</code>と言われるので<code>@PowerMockIgnore</code>に<code>"javax.xml.*", "org.xml.sax.*", "org.w3c.dom.*", "org.apache.log4j.*"</code>が必要<br  />
cf. <a href="https://groups.google.com/forum/#!topic/powermock/YJYPgBLpkqk">Powermock + Mockito + Spring = DocumentBuilderFactoryImpl</a></li>
<li><code>org/powermock/default.properties is found in 2 places</code>と言われてerrorにはならないけどwarningが出るので、<code>@PowerMockIgnore</code>に<code>"org.powermock.*"</code>も入れておく(試行錯誤の末なので参照なし)</li>
<li><code>AsyncTask</code>があっても、特段その終了を待たずにtestが終了してしまう。<code>Robolectric.getBackgroundThreadScheduler().pause();</code>で<code>AsyncTask#doInBackground()</code>を止める必要がある(<code>AsyncTask#onPreExecute()</code>は実行される)。</li>
<li><a href="https://github.com/robolectric/robolectric/blob/master/robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java"><code>ShadowAsyncTaskTest.java</code></a>を見ると、<code>setUp()</code>で<code>Robolectric.getBackgroundThreadScheduler().pause();</code>(と<code>Robolectric.getForegroundThreadScheduler().pause();</code>?)でthread止めて、<code>asyncTask.execute()</code>すると<code>onPreExecute()</code>が動き、次に<code>ShadowApplication.runBackgroundTasks();</code>すると<code>doInBackground()</code>、<code>ShadowLooper.runUiThreadTasks();</code>すると<code>onPostExecute()</code>が動く(ようだが、試してみると<code>ShadowApplication.runBackgroundTasks()</code>で返ってこなくなった。何故?!←これは単に<code>AsyncTask</code>中でdialog出して止まっていたため)</li>
<li>target class内でnewしているもののmockは、
<code>PowerMockito.whennew(XXX.class).thenReturn(mock);</code>
だと、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>org.mockito.exceptions.base.MockitoException: 
</span><span class='line'>ClassCastException occurred while creating the mockito mock :
</span><span class='line'>...
</span><span class='line'>You might experience classloading issues, please ask the mockito mailing-list.
</span></code></pre></td></tr></table></div></figure>
と言われて失敗する。</li>
<li>shadow classでもstatic methodのmockが出来る。PowerMock使わずとも良い様子。いちいちShadow class作って各method毎に<code>@Implements</code>書くのは面倒ではあるが、PowerMockを<code>@Rule</code>して並存させると上述のようにclass loaderがどうのと言われて失敗したので、Robolectric一本で頑張った方がよさ気。PowerMock使わないなら<code>testCompile</code>も<code>robolectric</code>と<code>shadows-multidex</code>の2つで済むし、PowerMock導入に伴って変更したMockito部分も変更不要になる。</li>
<li>Custom Shadow classesの追加でcustom TestRunnerは作成不要、単に<code>@Config</code>に<code>shadows={ShadowXXX.class}</code>と追記していけば良い。</li>
<li>Shadowについて。Android APIのclassesについては、全て<code>ShadowXXX</code>というclassが揃っている(e.g. <code>ShadowActivity</code>)。まるっとmockしたものを返したい場合には、custom shadow methodで<code>return Shadow.newInstanceOf(ShadowBluetoothDevice.class);</code>で良い。</li>
<li><a href="http://robolectric.org/extending/#shadowing-constructors">constructorもshadow出来る</a>。constructorの場合には単に<code>public void __constructor__(...){...}</code>でよく、<code>@Implementation</code> annotationは不要(あっても害はない)。</li>
<li><code>extends</code>してるclassのconstructorの場合には、super classのconstructorのshadowingも必要。さもなくばsuper classの当該constructorが実行されてしまう。また、super classのconstructorもshadowingする場合、当該Shadow classの方も<code>extends</code>しないと<code>ClassCastException</code>に見舞われる。<code>A extends B</code>で<code>A</code>のconstructorをshadowingしたら<code>B</code>のconstructorもshadowingし、<code>ShadowA extends ShadowB</code>にする必要がある。</li>
<li><code>Shadows.shadowOf(myDialog).hasBeenDissmissed()</code>といったようにUIの状態を取得できる。</li>
<li><code>context.getPackageManager().getLaunchIntentForPackage("package name")</code>がRobolectricsでやると<code>null</code>を返しやがるのでヌルポで失敗しくさる。多くの人が困っている模様。cf. <a href="https://github.com/robolectric/robolectric/issues/747">PackageManager#getLaunchIntentForPackage() returns null #747</a> ←これによると2.2の頃から。3.4から<code>PackageManager</code>周りは<code>RobolectricPackageManager</code>がdeprecatedになって他と同じように<code>ShadowPackageManager</code>を使えと<a href="http://robolectric.org/migrating/#migrating-from-33-to-34">Migrating from 3.3 to 3.4</a>にはあるが、<code>shadowOf(RuntimeEnvironment.application.getPackageManager()).shadowOf(RuntimeEnvironment.application.getPackageManager());</code>としても、versionを3.3に落として<code>RuntimeEnvironment.setRobolectricPackageManager(packageManager);</code>としても、testにおける<code>ApplicationPackageManager#getLaunchIntentForPackage</code>は<code>null</code>を返す。仕方なく、<code>ShadowApplicationPackageManager</code>をextendsしてcustom PackageManagerを作ってみても、何を<code>@implements</code>したらいいのか。<code>PackageManager.class</code>では効かないし(抽象クラス?なのでそれは仕方ないのだろう)、<code>android.app.ApplicationPackageManager.class</code>では何故か名前解決に失敗してcompile出来ない。<a href="https://github.com/robolectric/robolectric/commit/5e082743821857f057ab45945e838d5ef6b69e37">RobolectricPackageManagerTest.java</a>を見ると、<code>notNullValue()</code>でassert出来そうなのだが、うまく行かなかった(Step Overしてやってみても、そもそも<code>ShadowApplicationPackageManager</code>ではなく<code>android.app.ApplicationPackageManager#getLaunchIntentForPackage</code>が何かにmethod callを取られて空で返している感じ)。色々探して結局諦めた。ホントは、↓というようにやりたかったのだが。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();
</span><span class='line'>assertThat(shadowOf(activity).getNextStartedActivity().getAction(),
</span><span class='line'>               is(&quot;jp.ideacross.allcardia.main.SplashActivity&quot;));
</span></code></pre></td></tr></table></div></figure></li>
</ul>
<h2>Robospock -> ElectricSpock or Spock for Android</h2>
<p>せめてresourceの場所なりと。</p>
<ul>
<li><a href="http://robospock.github.io/RoboSpock/">RoboSpock</a>ですがちょっと更新が鈍いということで<a href="https://github.com/hkhc/electricspock">ElectricSpock</a>。但し新しい分情報少なし</li>
<li><a href="https://github.com/AndrewReitz/android-spock">Spock for Android</a>もあり</li>
<li>どちらも、directory structureがstandardでないとならない様子(要するに<code>app/src/main/java/...</code>にsourceがあり<code>app/src/test/groovy/...</code>にSpock Testcodeがある)。<code>build.gradle</code>での<code>android.sourceSets.test.setRoot(...)</code>は効かないようだった</li>
<li>要は、<code>buildscript.dependencies</code>で<code>classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:1.2.0'</code>を指定、<code>apply plugin: 'com.android.application'</code>と<code>apply plugin: 'groovyx.android'</code>を指定、<code>dependencies</code>に<code>testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'</code>を指定すれば素のSpock、<code>testCompile 'com.github.hkhc:electricspock:0.6'</code>ならElectricSpock、<code>androidTestCompile 'com.andrewreitz:spock-android:2.0'</code>ならSpock for Android(←これだけ<code>androidTestCompile</code>なのに注意)</li>
</ul>
<p>という感じでしょうか。</p>
<h2>Robolectric3 + RxJava(RxAndroid)1 + Retrofit2</h2>
<p>RxJava + Retrofitなんて鉄板だからRobolectricによるtestなんてすぐ見つかると思ってたんですが、意外に手こずりました。要は、</p>
<ul>
<li>Retrofit2に対しては<a href="https://github.com/square/okhttp/tree/master/mockwebserver">MockWebServer</a>(<a href="https://qiita.com/toastkidjp/items/4986caee5d776a4c9e6c">OkHttp3 の MockWebServer を使う</a>)</li>
<li>RxJavaに対しては<code>RxJavaHooks</code>(<a href="http://hydrakecat.hatenablog.jp/entry/2016/12/14/RxJava_のテスト(2)%3A_RxJavaHooks%2C_RxAndroidPlugins">RxJava のテスト(2): RxJavaHooks, RxAndroidPlugins</a>)</li>
<li><code>MockWebServer</code>は、例にあるように基本<code>new</code>して<code>MockResponse</code>を<code>enqueue</code>して<code>url(...)</code>すればstartしてreturn valueにURL(<code>http://localhost:XXXXX/</code>←random port number)が入っているのでそれをRetrofitに食わせればいいのだけれども、URLをsetする部分はShadowの中なので、test classから直接食わせられず。なので固定port番号を使いたく、その場合は<code>server.start(portNumber);</code>でおk(<code>server.url("/...");</code>は不要)</li>
<li>↑<code>http</code>になると<code>isCleartextTrafficPermitted()</code>まわりで失敗するようになった。これは、<a href="https://github.com/square/okhttp/issues/2533#issuecomment-223093100"><code>isCleartextTrafficPermitted()</code> fails on OpenJDK 8 + Robolectric #2533</a>にあるように、<code>NetworkSecurityPolicy</code>をShadowしてやればよい。</li>
<li>RxJavaの<code>onNext</code>や<code>onCompleted</code>が実行されない問題は、<code>Robolectric.flushBackgroundThreadScheduler();</code>ではなく、<code>RxJavaHooks.setOnNewThreadScheduler(s -&gt; Schedulers.immediate());</code>によって別threadじゃなくmain threadで実行するようにすればおk</li>
<li>上記の話は、<code>Retrofit2</code>のService interfaceで<code>Observable&lt;...&gt;</code>を返す場合のもの。<code>Call&lt;...&gt;</code>を返す形にして<code>enqueue()</code>して<code>Callback&lt;...&gt;</code>で<code>onResponse()</code>、<code>onFailure()</code>でhandleする場合には、こうは行かなかった(<code>onResponse()</code>も<code>onFailure()</code>も実行されない)。<code>ShadowLooper.runUiThreadTasks()</code>でうまく行くようなことを書いてある情報(<a href="https://stackoverflow.com/questions/37909276/testing-retrofit-2-with-robolectric-callbacks-not-being-called">Testing retrofit 2 with robolectric, callbacks not being called</a>)もあったが、症状変わらず。<a href="https://qiita.com/noboru_i/items/5eeb8b8d5684622aee95">OkHttpのMockWebServerとRobolectricでFragmentの動作をテストする</a>にRetrofit2内で使っている<code>OkHttpClient.Builder#newBuilder</code>をshadowしてうまく行く話があったので、試すと確かに<code>onResponse()</code>が呼ばれた! ただ、今回ぼくは実classの方で<code>new Retrofit().newBuilder().client(new OkHttpClient().newBuilder().build())</code>とかって<code>client</code>methodを使っておらずdefaultで裏でimplicitlyに生成される<code>OkHttpClient</code>そのまま使っており、それだと<code>newBuilder()</code>呼ばれないので、色々辿ってった挙句、<code>okhttp3.Dispatcher#executorService</code>をshadowして、前述のpageにあったようにすぐ<code>command.run()</code>する<code>execute</code>methodを持つ<code>AbstractExecutorService</code>classを返してやると、うまく行った。<code>Dispatcher#executorService</code>って<code>java.util.concurrent.ThreadPoolExecutor</code>をdefaultでは使っており、Androidのthreadとは違うから、uncontrollableだったんですね。考えてみるに、RxAndroidと違いRetrofitはAndroid専用ではないので、<code>java.util.concurrent</code>の<code>Executor</code>使ってるのも当然ですか。</li>
</ul>
<h2>AccountManager with Robolectric(というかMockito)</h2>
<ul>
<li><p>基本的には、<code>AccountManager.get(Context)</code>はJUnit Test内でもtarget class内でも同じobjectを返すので、そのままassertion可能</p>
</li>
<li><p>ただ、例えば<code>manager.blockingGetAuthToken(...)</code>でExceptionを起こさせたい時は、<code>AccountManager manager = spy(AccountManager.get(application));</code>した<code>manager</code>を<code>getSystemService(Context.ACCOUNT_SERVICE)</code>で<code>doReturn</code>するようにした<code>Application</code>を<code>spy</code>して、その<code>application</code>を<code>RuntimeEnvironment.application</code>の代わりにねじ込む必要がある(<a href="https://stackoverflow.com/questions/26937001/using-mockito-to-mock-accountmanager">Using mockito to mock AccountManager</a>)。具体的には、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Rule
</span><span class='line'>public ExpectedException thrown = ExpectedException.none();
</span><span class='line'>  :
</span><span class='line'>Account account = new Account(&quot;any name&quot;, CarCloudAuthUtil.ACCOUNT_TYPE);
</span><span class='line'>Application application = spy(RuntimeEnvironment.application);
</span><span class='line'>util = new CarCloudAuthUtil(application);
</span><span class='line'>AccountManager manager = spy(AccountManager.get(application));
</span><span class='line'>doReturn(manager)
</span><span class='line'>        .when(application)
</span><span class='line'>        .getSystemService(Context.ACCOUNT_SERVICE);
</span><span class='line'>manager.addAccountExplicitly(account, &quot;any key&quot;, new Bundle());
</span><span class='line'>manager.setAuthToken(account, CarCloudAuthUtil.AUTH_TOKEN_TYPE, &quot;any string&quot;);
</span><span class='line'>doThrow(AuthenticationException.class)
</span><span class='line'>        .when(manager)
</span><span class='line'>        .blockingGetAuthToken(eq(account), eq(CarCloudAuthUtil.AUTH_TOKEN_TYPE), eq(true));
</span><span class='line'>thrown.expect(AuthenticationException.class);
</span><span class='line'>thrown.expectMessage(new IsNull());
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p><code>Exception</code>のassertionは、<code>@Test(expected=...)</code>でも良いが、<code>@Rule</code>でも書ける(<a href="https://qiita.com/su-kun1899/items/5c9f0294a7de1986e542#ruleを使った書き方">JUnitでの例外テストの書き方</a>)。その場合、<code>Exception#message</code>が<code>null</code>の場合のassertionは<code>org.hamcrest.core.IsNull</code>を用いて<code>thrown.expectMessage(new IsNull());</code>とする(<a href="https://stackoverflow.com/questions/35199026/expectedexception-expectmessagestring-null-is-not-working">ExpectedException.expectMessage((String) null) is not working</a>)。</p>
</li>
<li><p>mocking method実行時に他のことをしたい時には、<code>when(mock.methodCall()).thenAnswer(m -&gt; {...});</code>とlambdaで書ける(<a href="https://qiita.com/kazurof/items/1171c7e038050453c6c9#mockitoでのサンプル">mockitoとJMockitについてのメモ</a>)。</p>
</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Tomcat vulnerability CVE-2017-12617]]></title><link href="http://u-ryo.github.io//blog/2017/10/13/tomcat-vulnerability-cve-2017-12617/"/><updated>2017-10-13T12:13:30+09:00</updated><id>/blog/2017/10/13/tomcat-vulnerability-cve-2017-12617/</id><content type="html"><![CDATA[<p><a href="https://oss.sios.com/security/tomcat-security-vulnerabiltiy-20170920">Tomcatの複数の脆弱性(CVE-2017-12617, CVE-2017-12615 , CVE-2017-12616)</a>が、範囲が広がって出てました。
<code>readonly initialization parameter</code>を<code>false</code>にして<code>PUT</code>を有効化している時にaffectする(任意のjsp fileを不正に<code>PUT</code>してから好き放題する)、とのことなので、きょうびはRESTで<code>PUT</code>多用するから影響範囲広いんでしょうか? 否、「default servletのinitialization parameter(具体的には<code>web.xml</code>の<code>servlet</code>tagの<code>init-param</code>)で<code>false</code>を明示した時(defaultは<code>true</code>)なので、殆どのところはそんなことしてないから大丈夫なんじゃないでしょうか。
実際、<a href="https://github.com/cyberheartmi9/CVE-2017-12617">POC</a>で試してみたところ、うちのsiteは(version的には範囲内ですが)<code>Not Vulnerable to CVE-2017-12617</code>と出ました。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ python tomcat-cve-2017-12617.py -u http://localhost:8080
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   _______      ________    ___   ___  __ ______     __ ___   __ __ ______ 
</span><span class='line'>  / ____\ \    / /  ____|  |__ \ / _ \/_ |____  |   /_ |__ \ / //_ |____  |
</span><span class='line'> | |     \ \  / /| |__ ______ ) | | | || |   / /_____| |  ) / /_ | |   / /
</span><span class='line'> | |      \ \/ / |  __|______/ /| | | || |  / /______| | / / &#39;_ \| |  / /
</span><span class='line'> | |____   \  /  | |____    / /_| |_| || | / /       | |/ /| (_) | | / /
</span><span class='line'>  \_____|   \/   |______|  |____|\___/ |_|/_/        |_|____\___/|_|/_/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[@intx0x80]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Poc Filename  Poc.jsp
</span><span class='line'>Not Vulnerable to CVE-2017-12617
</span></code></pre></td></tr></table></div></figure></p>
]]></content></entry><entry><title type="html"><![CDATA[Alpaca Algo]]></title><link href="http://u-ryo.github.io//blog/2017/10/08/alpaca-algo/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/08/alpaca-algo/</id><content type="html"><![CDATA[<p>こういうの、あったんですねー。すごいすごい。
<a href="https://algo.alpaca.ai">Alpaca Algo</a>、かつてのCapitalicoだそうですが、
自分でindicatorを指定して、勝ちpattern(負例も!)を指定して、
そうすると裏で超高速に事例を学習し、
back testまで速攻でやってくれるとは!
幾つか試してみましたけど、テキトーにやっても、
back testでプラスになったりするので、おぉー!
と思ってはみたものの。
back testの期間をdefaultの3ヶ月ではなく、
1年とか、特に2016年を入れると、
途端に物凄い成績悪くなります。
なんでー!? 2016年って何か違ったんでしょうか。
っていうか、2017年の方がおかしい?
とにかく、何か違うようです。</p>
<p>patternに当てはまったら通知もしてくれるというので、
試してみます。
まだ本番への適用は怖い感じですが。</p>
<p>9日朝、2回通知来ましたけど、以降はさっぱり当たりませんでした。
デモ取引では、10:05にentryして15:48現在まだ売買成立してません。
ドル円上下15pipsなので、day tradeにはちょっと大きめの幅なんでしょう。</p>
<p>色々試してみると、</p>
<ul>
<li>10〜20はpattern入れて、って書いてありますが、あんまり入れると取引回数少なくなる?</li>
<li>負例も入りますが、負例はいくら入れても学習対象としてcountされません。入れた方がいいのかどうなのか、よくわかりません。</li>
<li>back testでは、どのくらいの精度で当てはめてentryして、どのようにexitするかで当然成績は大きく変わってきますが、「全部お任せ!」にしておいた方が一番成績いいみたい、です。「最適な○○を最適化」とかって具体的には何やってんのかさっぱりですけど、グラフではなく数値で見ると、利食い損切りpipsがわかるので何となく。</li>
<li>売り・買い両方揃えないとダメかしらん。</li>
<li>範囲はどこまで指定したらいいのか、よくわからないですが、何となく学習してるのはindicatorがどうのというより値動き(ローソク足)だけっぽい? いやでも確かにindicatorの種類だけ変えると結果変わるのでindicatorも見てるんでしょうけど...</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[EmbodyMe]]></title><link href="http://u-ryo.github.io//blog/2017/10/08/embodyme/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/08/embodyme/</id><content type="html"><![CDATA[<p>Paizaのcasual面接ということで、<a href="https://www.facebook.com/issaymk2">吉田一星さん</a>とお会いしました。流石はYahooのsuper engineerだっただけはあり、凄かったです。麻布出身なんだー。頭いいわけですね。<a href="https://embodyme.com/">EmbodyMe</a>、早速体験させてもらえました。こんなのぼくには作れません。ぼくが本格的なVR初めてだった、というのもあるかもしれませんが、それを差っ引いても凄い、これだけでも十分面白いと思います。1000万くらい投資しようか、真剣に悩んでます。過去の<a href="http://www.appbank.net/2013/02/13/iphone-application/546662.php">怪人百面相</a>や<a href="http://nlab.itmedia.co.jp/nl/articles/1504/08/news077.html">なりきりろいど</a>は、競合が出ているしYahooのなので今はやめてしまっているそう。勿体無いです。っていうか、こういうのや吉田さんをちゃんと育てられなかったYahoo Japan、かなり幻滅しています。
VRとかVisual系には疎い経歴なのに、なんでPaizaで声掛けてきたのかな、というのが最大の疑問でした。聞いてみますと、求人者側からは「研究開発」とかしか見えず、何をしていたのかはよくわからないinterfaceのようでした。要するにPaizaのUIがしょぼくてmismatchを誘発していたんですね。
中国とかの方がVR、もっと溶け込んでいるらしいです。街のSC(Shopping Center)とかにVRがあったりとか。へー。日本って遅れてるんですね。日本ではsmart glassesが流行らないっていうのも、その辺にあるんですかね。
日本の半導体工場で、closed intranetじゃないと云々、とか言ってる時点で日本捨てたら? というのは、なるほどそうですね。そもそも日本の半導体なんて、もうピーク終わってますもんねぇ。
吉田さんに比べれば、ぼくの経歴やら技術力なんてつまんないもんです。
Hadoopもやってたというので、GridとかMPIとかcloud前のこと聞かれました。</p>
]]></content></entry><entry><title type="html"><![CDATA[CEATEC 2017]]></title><link href="http://u-ryo.github.io//blog/2017/10/08/ceatec-2017/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/08/ceatec-2017/</id><content type="html"><![CDATA[<p>過日、<a href="http://www.ceatec.com/ja/">CEATEC Japan 2017</a>に行って来ました。
見所は色々<a href="http://www.watch.impress.co.jp/headline/extra/2017/ceatec/">報じられている通り</a>ですが、お前はどうだったの? という観点で勝手な印象を。</p>
<ul>
<li><a href="http://kaden.watch.impress.co.jp/docs/news/1084050.html">卓球ロボット(フォルフェウス)</a>はニュースでも取り上げられてましたね。OMRONなんですねこれ。なんでOMRONこんなことやってるんでしょう。smashは無理なんじゃね? と思ってたら、今回から対応したとのこと。最初にuser登録して、そのuserがsmashしそうになったらそれを検知して対応するんだとか。それは凄いですね。でも、打ち返すのがやっとのようでした。</li>
<li><a href="http://www.originwireless.net/125071254012512.html">OW(Origin Wireless)</a>は人が凄かったです。そりゃそうでしょう。コミュニティ・イノベーション部門でGrand-Prix取ってましたし。でも見せ方うまくないなーと。早くmonetizeすればいいのに。変なとこと組んでるから、イケないんじゃないでしょうか。</li>
<li>豆蔵ブースは、<a href="https://nekomoni.com/">ねこもに</a>はまだ許せます、<a href="https://linkdrive.jp/">LINkDrive</a>は百歩譲るとしても、LINkPitはダメでしょうこんなの売っちゃ。あーぁ。でも何か、GMOとオプストになってますね。SenseThingsJapanなんて出て来てません。LINKDriveだとて、こんなの<a href="https://play.google.com/store/apps/details?id=org.prowl.torque">Torque</a>や<a href="https://play.google.com/store/apps/details?id=org.prowl.torquefree&amp;rdid=org.prowl.torquefree">Torque Lite</a>、<a href="http://www.geocities.jp/ganchi_jp/AppObdInfoSan/">OBD Info-san!</a>がありますし、connectorもあんまり安いの買うと危なそうですが<a href="https://www.amazon.co.jp/gp/search?keywords=iOBD2&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;tag=lady-navi.seesaa.net-22">2000円くらいで売ってます</a>よね。それを6000円で売ろうっていうんですから大したもんです。</li>
<li>リニアモーターの実演をしてました。コイルを液体窒素で冷却すると、浮上して走り回ってました。<a href="http://www.fujikura.co.jp/rd/odyssey/vol_05/05.html">Fujikura</a>って、中央リニアにも参加してる超電導ケーブルの会社なんですね。って藤倉電線ですよね。</li>
<li><a href="http://hlds.co.jp/product/">3D LiDAR</a>、ぼくが見たのは「手の位置探知(棚)」ということで、コンビニの棚なんかを監視して、買った商品はPOSでわかるけど手に取っただけの商品もこれでわかります、というconceptでした。説明員の人に聞いてみますと、まだ実例はないそうですが、工場で手の動きを監視して作業漏れを云々というのも話としてはあるそう。実際、手の骨格検出画像も<a href="http://hlds.co.jp/download/Document/HLDS_TOF_Leaflet_JP.pdf">パンフ</a>に載ってました。けど後でよく見るとこれ、手じゃなくて腕ですね。</li>
<li>あと<a href="http://www.forum8.co.jp/">Forum8</a>の<a href="http://sharefl.jp/projects/airshodou/">エア書道</a>、エアドライブ、そしてトレインシュミレータまで! 誰もいなかったのでやってみましたが、やっぱり止まるの難しいですね。エア書道は、腰より前に腕を持って行って、とか慣れるのが難しいです。Kinect使ってるんだって。へー。<a href="https://www.facebook.com/forum8JP/">Forum8</a>って何かVR凄いんですけど、土木のシミュレータから発展したみたいですね。</li>
<li>低照度でも発電する太陽電池と蓄電モジュールがありました。IoTに良さそうです。が、製品化はされてないそう。出してるのどこだったっけ。材料の方で見た大手だったと思うんですけど。</li>
<li>材料の方で、<a href="http://soran.cc.okayama-u.ac.jp/view?l=ja&amp;u=d2433282ec3fd8d074506e4da22f6611">岡山大学五百旗頭健吾助教</a>の講演で暗号化deviceから漏れる電波を計測してdecode出来る可能性について(=<a href="http://www.soumu.go.jp/main_content/000323204.pdf">暗号機器のサイドチャネル攻撃</a>)のお話は衝撃的でした。そっか、ちゃんと考えないとchipから漏れるんですね。Arduinoでは漏れそう、Rasberry Pieでは(基板上色んな雑音があるので)拾えなかった、と言ってました。</li>
<li>SHARPの8K、よ〜く見ると細かいところが滲んでたのは、多分撮影側が追いついてないせいでしょう。それより応用事例として心臓外科手術の映像流してましたがそちらの方が面白かったです。</li>
<li><a href="http://internet.watch.impress.co.jp/docs/event/1084817.html">NTTのVRバッティングマシーン</a>は並ぶのでパス、<a href="http://k-tai.watch.impress.co.jp/docs/event/ceatec2017/1083982.html">KDDIの5G</a>は、遠隔の人の動きと同じ動きをロボットがするというものですけど、動いていなかったし慶応が同じことやってました。<a href="http://av.watch.impress.co.jp/docs/news/1084017.html">VR不動産案内</a>はあんまり魅力を感じず。富士通では量子コンピュータの話はあんまり見ず、コーヒーとクッキーだけ御馳走になりました。</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Pro-do by Ukkyo-san]]></title><link href="http://u-ryo.github.io//blog/2017/10/06/pro-do-by-ukkyo-san/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/06/pro-do-by-ukkyo-san/</id><content type="html"><![CDATA[<p>もう閉鎖されるというのに何を今更ですが、
ひょんなことから<a href="http://ukkyo.sakura.ne.jp/">未経験２７歳プログラマーへの道（イバラ）</a>を見付けて、一気に読んでしまいました。
最初の企業の話は、まさに今のぼくのと符合するところが多く。
でもこの人、人類みな京大なんですね頭いいんだ... というより、数学的で要領がいいんですね(ってご自分でも書いてますね)。
ぼくも社長メール、しようかなぁ。オーナー社長じゃないから、効き目は無さそうなんですが。
よく読むと、「君は来月以降は５５万／月の金額で契約延長になりました」で「ようやく年収２４０万円」なので、ピンはね率64%だからぼくと同じくらいですね。</p>
<h3>なるほど</h3>
<ul>
<li>とくに流行らない店によく見られる特徴として「特定の客（常連など）に過剰なサービスを提供する」これをしているところが非常に多い。...流行っている店はこれをほとんどしない。逆に新規客（初めて来た客）ほど大切にしろと教育するところもある。基本的に全てのお客様にできないサービスはどのお客様にもしない。</li>
<li>だから他人とコミュニケーションを取るときには気をつけなければいけない。
相手の気持ちを汲んで些細なことでも一言謝ってから話を続けたほうが円滑に進むことが多いのだ。</li>
<li>そういうプログラムを深く追求してこなかったSEの大多数は口を揃えてこう言う。<br  />
「大事なのは技術力じゃない。」<br  />
そういう方々にオレは問いたい。<br  />
「あなた達が売ってるのは何なのですか？」</li>
<li>さて、このような環境でプログラマとして仕事をしていると<br  />
学ぶべき人がいない<br  />
のだ。</li>
<li>お客様としゃべって仕事をもらって、それをこちらに放り投げる。
きっちりと仕様も確定していないからこちらは四苦八苦しながら作っている。
するとそこに時々やってきてはできたか、できたかと聞いてくる。
少し偏見が入っているかもしれないが実際こんなSEが多いみたいだ。
要するに作る、という部分にまるで踏み込まない。</li>
<li>オレはトラックで運送業のバイトをしていた知り合いがいた。
そいつから聞いた話だが車が接触事故にあったときなどの対処法がマニュアルとしてあったらしい。
その接触の状況がどのような、たとえ完全に自分が悪いのだとしても<br  />
まず切れろ<br  />
というものらしい。</li>
<li>どこかで聞いた話であるが９０歳代の人たちにアンケートをとった。
人生で一番後悔している事はなんですか、と。
圧倒的に多かったのが<br  />
「失敗を恐れて何もしなかったこと」<br  />
という答えらしい。</li>
<li>伸びていく人というのはこれからあげる３つの力において合計得点が高い人ではないか、と。
勝手に選ばせてもらったその力というのは<br  /></li>
<li>能力（先天的な能力＋努力）<br  /></li>
<li>発明力（物事に対する好奇心＋気付く力）<br  /></li>
<li>人間力（人の心の機微がわかる＋性格）</li>
<li>では森君はどうかというと彼ははここがすばらしい。
心の機微に気付くというだけではない。
今だに(ママ)過去のバイト先の上司との付き合いがあったりするらしい。
その人にお世話になったという気持ちを失わず接し続けているからだろう。
人とのつながりを非常に大切にし、常に回りに気を配る。
それに加えて彼の努力家な一面がいい具合にマッチしている。
何人かの森君に対する評価を聞いたが口を揃えたように、彼は教えてあげたくなる人、と言う。</li>
</ul>
<p>あぁ、ぼく性格悪いなぁ、と反省しきりです。
腰低い方がいいんですよ。わかってますよ。営業のTさんとかマネジャーのIさんとか見てるとそう思いますよ、それだけで生きていけるって。
でも、どうしても何か...
これをpride、下らないprideって言うんですかねぇ。
「アルジャーノン」、粗筋しか知りませんが、
やっぱりバカな方がみんなから愛されて幸せなんじゃないかと。
なのになぜ人は頭いい方を目指すんでしょうか。</p>
<ul>
<li>もう一度徹底的に自覚しなくてはならないこと、それは<br  />
人生は有限である。</li>
<li>「現在所持している石炭を使用し、石油を一番効率よく得られる方法を書け。」<br  />
「石炭を売って石油を買う」</li>
<li>よく情報関連のコラムなどを読むと「技術者は技術だけでは生き残れない」という記事を見る。
これはまさしく事実だと思う。
しかしこれらの記事を逆手にとった怠け者が多数存在する。
自分が勉強するのに疲れたもんだから「オレは技術に走らない。」などと言い訳に使うのだ。</li>
<li>ここまで話し合いをしてきて、オレはとうとう本音を。
今まで恐らく誰にも言わなかった（酔ってしゃべったかもしれないが）事を言った。<br  />
オレはあの社長を喜ばせたくないのだ<br  />
どうしてもそんな気になれない。
...
どうもこの辺のやり方が好きではないのだ。
オレが会社に貢献することで結果としてあの社長が喜ぶだろう。<br  />
だからオレは貢献したくないのだ<br  />
自分の会社やその社長を悪く言うのは自分を悪く言うのと同じだ、と教えられてきた。
...
そこで働いている自分の価値をも低くする行為だ、ということだ。
そして自分は裏表のある人間だということを宣伝しているようなものだと。
だから誰にも言わなかった。
しかし心の中にずっと引っかかっていて、もう我慢できずに漏れ出してしまったのだ。</li>
</ul>
<p>ぼくだけじゃなかったんだ! と思った瞬間です。
「社長」じゃなくて「(出向先の)部長」とか「(今いる)会社」とかですけどぼくの場合。</p>
<p>会社の不満だと、最近あったのは、
10月も人売り契約が続くという連絡が9月中に無かったこと。
なので、売られた先に「お世話になりました」メールを敢えて出してやりました。
まー、CTCクビになった時も連絡無かった(偶然他から連絡があって2営業日後に知った)くらいですから。
働いてるのはこっちだっちゅーのに、人売り営業のこっちへの扱いなんてこんなもんです。</p>
<p>あと、自分で環境をcloud上のserverに移した、前のと同じだ、というのに、
動かない、直してくれ、と。
自分でやったのに、ケツをこっちに持ってくるんかい。
環境のcopyも満足に出来ないのに、運用するっていうんかい。
こういうアホな人達の下で働きたくないんですよ。
...あぁ、キリがなくなってきそう。</p>
<p>「プロ道」(プロどう)って言うんですね。
逆境の大阪編の方が面白かったです。
っていうか、大きな外資系入れて凄いなぁ。
人の縁をあんまり大事にして来なかった報いですかねぼくは。
自業自得ですそういう意味では。
徒手空拳で転職するのは難しいですぼくには。</p>
<ul>
<li>かなり難度の高い仕事Ａがある。
ある程度簡単な仕事Ｂがある。
誰でもできるような仕事Ｃもある。
...一般的に言われるいいリーダーはＣを自分で担当する。
そしてＡやＢの仕事は部下に割り振るのだ。</li>
<li>それはプレーステーションを生み出した久夛良木（クタラギ）氏のことだ。
...前社長いわく<br  />
「彼は自分でやってしまうから。」</li>
<li>人は誉めて動かせ<br  />
...まず、長所を誉める。
...誉めるときは本人のいない場所で誉める。
...例えばどうしてもウマが合わない人と上手に付き合う方法。
これはよく言われることだがまず相手を好きになること。</li>
<li>今日の一言<br  />
でも自分でやりたいのが技術者・・・</li>
</ul>
<p>やっぱりそうですよねー。</p>
<ul>
<li>結婚したらいつ家に友人を呼んでも嫁がもてなしてくれる。
そのような幻想を抱いていたとすれば今すぐ生ゴミに出そう。
女性には巣を守るという本能でもあるのだろうか。
家というのは多くの場合、彼女たちにとっての聖域なのである。
決して気配りを怠ってはいけない場所なのである。
間違えても騒ぎすぎてはいけない。
汚してはいけない。
これらをきっちりと肝に命じて(ママ)おくこと。
我々は客人でもあり、侵略者でもあるのだ。。
...具体的に何をすればいいのか？
...答えは至ってシンプル。<br  />
「甘いもの」だ。</li>
<li>金を残す者は三流<br  />
仕事を残す者は二流<br  />
人を残す者は一流</li>
<li>だから時間でなく仕組みを売らなければならないのだ。
仕組みを売ってその金で時間を買う。
そうやってできた時間で新たな仕組みを作る。
うまくこの循環に入ることができればいいのだが・・・・。
これもまた言うは易しというもの。
できるなら誰もがやってる。</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Vulnerability POC site]]></title><link href="http://u-ryo.github.io//blog/2017/10/05/vulnerability-poc-site/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/05/vulnerability-poc-site/</id><content type="html"><![CDATA[<p>各種POCがありました。</p>
<ul>
<li><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">各漏洞poc、Exp的收集或写</a></li>
</ul>
<p>特にStruts2については、↓にあります。</p>
<ul>
<li><p>https://github.com/coffeehb/Some-PoC-oR-ExP/tree/master/Struts2</p>
</li>
<li><p><a href="https://www.mbsd.jp/blog/20170904.html">Apache HTTP Serverのバージョンを当てる方法</a>
bannerは信じちゃダメですよね。ぼくも対策を求められて面倒くさかったのでbinaryを偽装した覚えがあります。</p>
</li>
<li><p><a href="https://www.lac.co.jp/lacwatch/alert/20170906_001382.html">Apache Struts 2における脆弱性 (S2-052、CVE-2017-9805)は悪用可能と確認</a> に、「既に攻撃コードが公開されており、中国のWebサイトでは URL を入力するだけで脆弱性の有無をチェックするサイトも登場しています」とあるのですが当該サイトの画像だけでlinkが無かったので、探してもらいました。↓</p>
</li>
<li><p><a href="https://www.seebug.org/monster/">Seebug Vulnerability Scan Online Tomcat代码执行漏洞(CVE-2017-12615)</a><br  />
ただ、↑を試したところ、loginしてないと試せなくて、sign upするには電話番号とSNS codeまで必要なので、諦めました。</p>
</li>
<li><p><a href="http://mkt-eva.hateblo.jp/entry/2017/09/11/020530">Apache Struts 2の脆弱性(S2-052)や(S2-053)についてのまとめてみた。</a> POCへのlinkがありました。</p>
</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Enforce FullGC to JavaVM]]></title><link href="http://u-ryo.github.io//blog/2017/10/05/enforce-fullgc-to-javavm/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/05/enforce-fullgc-to-javavm/</id><content type="html"><![CDATA[<p>あ、FullGCって強制的にかけられるんですね。</p>
<p><a href="http://cco.hatenablog.jp/entry/2013/05/20/223212">JavaでFull GCを実行する方法</a></p>
<p>要するに、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>jmap -histo:live <span class="nt">&lt;pid&gt;</span>
</span><span class='line'>or
</span><span class='line'>jcmd <span class="nt">&lt;pid&gt;</span> GC.heap_dump <span class="nt">&lt;output</span><span class="na">_filename</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>「生存中のオブジェクトのみ抽出したメモリーマップを作成するために、直前にFull GCを実行するのでこれを利用する」のだそう。「対象のJavaプロセスを実行しているユーザで実行する必要があるので注意」ご尤も。</p>
]]></content></entry><entry><title type="html"><![CDATA[Digest Authentication and File Realm on Glassfish]]></title><link href="http://u-ryo.github.io//blog/2017/10/04/digest-authentication-and-file-realm-on-glassfish/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/04/digest-authentication-and-file-realm-on-glassfish/</id><content type="html"><![CDATA[<p>客先から「192.168.1.134にdiget認証のrelmsを作成してください」と
相変わらずわけわかんない指令を受けたので、
「何かに使う『digest』認証を任意の『Realm』で設定」
と解釈して取り組みました。
一番簡単な<code>FileRealm</code>でいいっしょ、
これは4848のGUIからRealms辿って<code>Manage Users</code>ボタンからuser足せばいいし、
Digest Authは<code>&lt;auth-method&gt;DIGEST&lt;/auth-method&gt;</code>で瞬殺、
とか思ってたら、ハマりました。
<code>index.html</code>と<code>web.xml</code>のみの最小構成でproof application作ったのですが、
どうしても認証できないのです。
<code>server.log</code>見ると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>SEC1105: A PasswordCredential was required but not provided.
</span></code></pre></td></tr></table></div></figure>
<p>と言われています。えー!? 何で?
試しにBASIC認証にしてみると、(紆余曲折ありましたが要するに)通ります。
だから、<code>keyfile</code>の書き方が悪いわけでは無いんですね。
勿論色々ググりました。が、なかなか出て来ません類似例。
辛うじて同じような症状があっても、Answerがついてません。
半日悩みました。
GlassfishのRealmって、
JAAS Contextを指定する必要があって、これは<code>.../domains/domain/config/login.conf</code>で規定されているんですね。
これを見ると、
fileについては<code>fileRealm</code>は一つなのに、
jdbcについては<code>jdbcRealm</code>と<code>jdbcDigestRealm</code>ってあるぢゃないですか。
をぉ、と思って、source treeを探してみると、
<code>com.sun.enterprise.security.auth.login.DigestLoginModule</code>
というのもあるんですね。
これどうやって使うんでしょうね。
使い方とかも例も、
JavaDocに書いてないしググっても出て来ませんでした。
試しに<code>digestRealm</code>なんて<code>login.conf</code>に他のを真似して、
上の<code>DigestLoginModule</code>を指定して作って使ってみたのですが、
fileから読み込むようにはなっていないようで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>WEB9102: Web Login Failed: com.sun.enterprise.security.auth.login.common.LoginException: Login failed: unable to instantiate LoginModule: null
</span></code></pre></td></tr></table></div></figure>
<p>と言われて失敗してました。
...って、これ<code>abstract class</code>だから当たり前じゃないですか恥ずかしい。
<code>DigestLoginModule</code>をextendsしてるのは<code>JDBCDigestLoginModule</code>だけだから、
file realmで使うなら<code>JDBCDigestLoginModule</code>みたいなのを自前で作らないとならないんじゃないでしょうかね。
でもそうならどっかにそう書いといてよねー。</p>
<p>結局、大人しく<code>jdbcDigestRealm</code>を使うように変更することで面倒を回避しました。
まぁ、それだけ世にDigest Authenticationのdemandがない、
という証左なのかなと思いました。</p>
<h3>minimum web.xml</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;web</span><span class="na">-app</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee</span>
</span><span class='line'><span class="s">                             http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>
</span><span class='line'>         <span class="na">version=</span><span class="s">&quot;3.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;security</span><span class="na">-constraint</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;web</span><span class="na">-resource-collection</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;web</span><span class="na">-resource-name</span><span class="nt">&gt;</span>Digest Authentication Test<span class="err">&lt;</span>/web-resource-name&gt;
</span><span class='line'>      <span class="nt">&lt;url</span><span class="na">-pattern</span><span class="nt">&gt;</span>/*<span class="err">&lt;</span>/url-pattern&gt;
</span><span class='line'>    <span class="err">&lt;</span>/web-resource-collection&gt;
</span><span class='line'>    <span class="nt">&lt;auth</span><span class="na">-constraint</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;role</span><span class="na">-name</span><span class="nt">&gt;</span>someRole<span class="err">&lt;</span>/role-name&gt;
</span><span class='line'>    <span class="err">&lt;</span>/auth-constraint&gt;
</span><span class='line'>  <span class="err">&lt;</span>/security-constraint&gt;
</span><span class='line'>  <span class="nt">&lt;login</span><span class="na">-config</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;auth</span><span class="na">-method</span><span class="nt">&gt;</span>DIGEST<span class="err">&lt;</span>/auth-method&gt;
</span><span class='line'>    <span class="nt">&lt;realm</span><span class="na">-name</span><span class="nt">&gt;</span>someCreatedRealmUsingjdbcDigestRealmOnJAASContext<span class="err">&lt;</span>/realm-name&gt;
</span><span class='line'>  <span class="err">&lt;</span>/login-config&gt;
</span><span class='line'>  <span class="nt">&lt;security</span><span class="na">-role</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;role</span><span class="na">-name</span><span class="nt">&gt;</span>someRole<span class="err">&lt;</span>/role-name&gt;
</span><span class='line'>  <span class="err">&lt;</span>/security-role&gt;
</span><span class='line'><span class="err">&lt;</span>/web-app&gt;
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Make SqlCipher Faster]]></title><link href="http://u-ryo.github.io//blog/2017/09/28/make-sqlcipher-faster/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/09/28/make-sqlcipher-faster/</id><content type="html"><![CDATA[<p>他に言及しているsourceが全く無かったのでまさかと思っていたのですが、<a href="http://qiita.com/atr-toru/items/d98a434eecf9f58c443d#keyの形式を変えて爆速に">keyの形式を変えて爆速に</a>は本当でした。
試しに、Allcaridaから<code>c.bin</code>だけ持ってきてAndroid sample applicationを作って計測した所、従来のkey(4文字)だと約0.4秒、上記ページ例の64字だと0.02秒と顕著な差がありました。</p>
<p>従いまして、「SqlCipherの<code>key</code>を64文字の16進数にすれば速くなる」が結論です。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>å¾æ¥
</span><span class='line'>09-27 16:25:59.010 30173-30173/sqlcipher.test.jmtech.co.jp.sqlciphertest D/Open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c.bin
</span><span class='line'>09-27 16:25:59.400 30173-30173/sqlcipher.test.jmtech.co.jp.sqlciphertest D/AfterÂ open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c.bin
</span><span class='line'>
</span><span class='line'>64å­key
</span><span class='line'>09-27 16:24:26.060 28517-28517/sqlcipher.test.jmtech.co.jp.sqlciphertest D/Open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c2.bin
</span><span class='line'>09-27 16:24:26.080 28517-28517/sqlcipher.test.jmtech.co.jp.sqlciphertest D/AfterÂ open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c2.bin
</span></code></pre></td></tr></table></div></figure>
<p>そこで、実際にAllcaridaで<code>c.bin</code>,<code>r.bin</code>だけ64字key版を作って「履歴一覧」画面表示を比較してみると、従来約3.5秒のところ約0.2秒で開けることを確認しました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>å¾æ¥ 3.46ç§(ç´0.6ç§Ã5+Î±)
</span><span class='line'>09-27 17:53:03.670 9054-9054/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;HistoryMainActivity</span><span class="err">#</span><span class="na">activityStart:49</span><span class="nt">&gt;</span>&gt; å±¥æ­´ä¸è¦§
</span><span class='line'>09-27 17:53:03.680 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c.bin Open
</span><span class='line'>09-27 17:53:04.360 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:04.380 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r.bin Open
</span><span class='line'>09-27 17:53:05.010 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:05.050 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c.bin Open
</span><span class='line'>09-27 17:53:05.710 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:05.720 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r.bin Open
</span><span class='line'>09-27 17:53:06.370 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:06.390 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r.bin Open
</span><span class='line'>09-27 17:53:07.030 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>
</span><span class='line'>64å­key 0.21ç§(0.0+0.01+0.01+0.02+0.03+Î±)
</span><span class='line'>09-27 17:50:57.350 4493-4493/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;HistoryMainActivity</span><span class="err">#</span><span class="na">activityStart:49</span><span class="nt">&gt;</span>&gt; å±¥æ­´ä¸è¦§
</span><span class='line'>09-27 17:50:57.360 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c2.bin Open
</span><span class='line'>09-27 17:50:57.360 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.400 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r2.bin Open
</span><span class='line'>09-27 17:50:57.410 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.460 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c2.bin Open
</span><span class='line'>09-27 17:50:57.470 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.480 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r2.bin Open
</span><span class='line'>09-27 17:50:57.500 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.530 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r2.bin Open
</span><span class='line'>09-27 17:50:57.560 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span></code></pre></td></tr></table></div></figure>
<p>More concretely,</p>
<p><code>SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(databaseFile, "x\'2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99\'", null);</code></p>
<p>in Java.</p>
<p>To get a rekeyed file,</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo apt install sqlcipher
</span><span class='line'>$ sqlcipher /tmp/c.bin
</span><span class='line'>SQLCipher version 3.15.2 2016-11-28 19:13:37
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt; PRAGMA key = &#39;7824&#39;;
</span><span class='line'>sqlite&gt; ATTACH DATABASE &#39;c2.bin&#39; AS c KEY &quot;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&quot;;
</span><span class='line'>sqlite&gt; SELECT sqlcipher_export(&#39;c&#39;);
</span><span class='line'>
</span><span class='line'>sqlite&gt; DETACH DATABASE c;
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>
<p>You'll get <code>c2.bin</code> with the new 64bit key.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sqlcipher r.bin
</span><span class='line'>SQLCipher version 3.8.6 2014-08-15 11:46:33
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt; PRAGMA key = &quot;7824&quot;;
</span><span class='line'>sqlite&gt; ATTACH DATABASE &#39;r2.bin&#39; AS r KEY &quot;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&quot;;
</span><span class='line'>sqlite&gt; SELECT sqlcipher_export(&#39;r&#39;);
</span><span class='line'>
</span><span class='line'>sqlite&gt; DETACH DATABASE r;sqlite&gt; PRAGMA user_version;
</span><span class='line'>0
</span><span class='line'>sqlite&gt; PRAGMA user_version = 6;
</span><span class='line'>sqlite&gt; PRAGMA user_version;
</span><span class='line'>6
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>
<p>You'll get <code>r2.bin</code> with the new 64bit key and version 6.</p>
<p><code>PRAGMA user_version</code> is needed because in SQLiteOpenHelper class judges whether it calls <code>onCreate</code>(table creation) by <code>db.getVersion()</code>.
<a href="http://d.hatena.ne.jp/isher/20091108/1257684508">[Android]データベースをアップグレードする時</a></p>
<p>そもそも画面遷移に4秒も掛かるようなAndroidアプリをリリースするなんていうのもunbelievableですが、そういう人達なので...</p>
<p>まぁ、暗号化するにせよ自分なら<a href="https://realm.io/">Realm</a>使うので、こんな知識不要ですけど、SqlCipher使うなら最初から64字16進code使うべきなんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Test Failed on AndroidStudio]]></title><link href="http://u-ryo.github.io//blog/2017/09/28/test-failed-on-androidstudio/"/><updated>2017-11-15T17:09:06+09:00</updated><id>/blog/2017/09/28/test-failed-on-androidstudio/</id><content type="html"><![CDATA[<p>Android Studio(2.3.1)で久し振りにtestを動かしてみると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Caused by: java.lang.ClassNotFoundException: android.view.View$OnClickListener
</span></code></pre></td></tr></table></div></figure>
<p>と言われて動かなくなりました。
instrumentation testではなくフツーのtestですjunit4とmockitoの。
<a href="https://stackoverflow.com/questions/14213219/java-lang-noclassdeffounderrorandroid-and-junit-test">java.lang.NoClassDefFoundError:android and junit test</a>を見付けて、えーとか思いつつもやってみたら、確かに直りました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ rm -rf .gradle
</span></code></pre></td></tr></table></div></figure>
<h3>追記</h3>
<p>projectを<code>clean</code>した後、いくらbuildしても「<code>databinding</code> classが見つからない」と言われて困った時にも効きました。</p>
]]></content></entry><entry><title type="html"><![CDATA[BotUI - ChatBot only by JavaScript]]></title><link href="http://u-ryo.github.io//blog/2017/09/26/botui-chatbot-only-by-javascript/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/26/botui-chatbot-only-by-javascript/</id><content type="html"><![CDATA[<p><a href="http://paiza.hatenablog.com/entry/2017/09/21/﻿JavaScriptだけで本格的なチャットボットを開発できる">paiza開発日誌</a>で紹介されていた<a href="https://github.com/botui/botui">BotUI</a>、なるほど予め型にはまった会話ならこれだけでお手軽にJavaScriptだけで(<code>.then(function(){...})</code>で繋ぐだけで)出来ちゃうんですね。注文を取るとか、特定のAPI叩く(Wizardを会話でやる)とか、サポートセンターで特定の電話番号につなぐとか。AIは使ってないので、user側の曖昧な自然言語を受け取って処理する、というものではないですけど、そういうのに繋げればいい? いや、IBMのWatsonとかみると、そういう会話のplatformも含めて提供しているので、そうなるとBotUIの出番は無い筈。
<a href="https://webhacck.github.io/botui-sample/">Git Repositoriesの総数を答えるsample</a>は、<a href="https://examples.botui.org">公式のsamples</a>より面白かった(興味深かった)です。</p>
]]></content></entry><entry><title type="html"><![CDATA[S Rank of CodeIQ]]></title><link href="http://u-ryo.github.io//blog/2017/09/25/s-rank-of-codeiq/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/25/s-rank-of-codeiq/</id><content type="html"><![CDATA[<p>もう昨日のことですが、<a href="https://paiza.jp/challenges/share/Ku6dnsSr8gw5zINY0ItXIQ1UXOOdmh6Xl_0akPz7zwo">Paiza</a>に続いてようやっと<a href="https://codeiq.jp">CodeIQ</a>でも<a href="https://codeiq.jp/badge/3116">Sランク取りました</a>。</p>
<p>まぁ、u-ryoさんなら当然だよね、とか言われておしまいでしょうけど。</p>
<p><a href="https://paiza.jp/challenges/share/UwlvLJ8wbTeDuWz-kV7g2vpFehW0vZE-wI-qg56WM98">Paizaにあった似た問題</a>(←これで見ると失敗もありますが、これは最初に提出したcodeについてで、後でちゃんと全部通るようにしてます)からcode引っ張ってきて、でも勿論そのままでは使えなくて。土曜未明の一晩で終えるつもりが、間にバイトやmachine troubleを挟んで日曜の午後までかかっちゃいました。ふと探してみると、<a href="http://ideone.com/pfoy7z">まんまのcode</a>があるのにはびっくり。流石にそのままっていうのは癪なので、「直前の方向を使う」というideaと検算にだけありがたく使わせてもらいました。
探索順の違いによるエラーをなかなか潰せなくて。そっか全探索なのね、そのためには... BFSではなくDFSか、と辿って、あーそっか、その違いはstackかqueueかだけか、に最後の最後気付いてgoalでした。何か色々忘れてて、こういうのやり続けてないと錆び付いてたなーというのを思い知らされました。この手のalgorithm系は集中してやらないと!</p>
<p>コメント書きすぎでしょうか。でもまんまの置いてあるよりは遥かにマシかと。</p>
]]></content></entry><entry><title type="html"><![CDATA[Images in README.md on Github]]></title><link href="http://u-ryo.github.io//blog/2017/09/20/images-in-readme-md-on-github/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/20/images-in-readme-md-on-github/</id><content type="html"><![CDATA[<p><a href="https://github.com/">Github</a>の<code>README.md</code>にscreen shotとか画像を貼りたかったんですけど、どうしたものなんでしょう。説明用のimagesをsource codeと一緒に置いておくというのも何か野暮なので。幾つかやり方があるようです。</p>
<ol>
<li>image用の別branchを切る(e.g. <a href="https://github.com/cakecatz/garage">https://github.com/cakecatz/garage</a>)</li>
<li>Githubのissueを利用する(<a href="https://www.youtube.com/watch?v=hHbWF1Bvgf4">GitHub Readme Images Tutorial (screenshots in readmes)</a>)</li>
<li>Githubのwikiを利用する(<a href="https://www.pupha.net/archives/1632/">GitHubに画像ファイルを保存してREADME.mdで表示する方法</a>)</li>
</ol>
<p>issueに画像をDrag and Dropすると、https://user-images.githubusercontent.com/... に自動的にuploadしてURLが得られるなんて知りませんでした。でもこれ、いつまで持っててくれるんでしょう、というのと、消したい時に消せるのかな? というのがあって。やっぱり自分でcontrol持っておきたいでしょう。(<a href="https://qiita.com/kotet/items/a2203a400136ba50b41e">GitHubのissueを悪用して画像をホストする</a>)</p>
<p>別branchを切ると、一旦画像以外全部消さないとならなくて、
何となくそれがちょっと嫌だったので、結局wikiを利用しました。
一度何でもいいのでWikiのpageを保存しないとならないみたいです。
一度保存しちゃえば、上記ページに書いてあるように<code>git clone https://github.com/.../XXX.wiki</code>で取ってこられて、images作って置けちゃうんですね。へー。</p>
]]></content></entry><entry><title type="html"><![CDATA[gitignore]]></title><link href="http://u-ryo.github.io//blog/2017/09/20/gitignore/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/20/gitignore/</id><content type="html"><![CDATA[<p>前も書いたような気がしますけど、<code>.gitignore</code>は<a href="https://gitignore.io/">gitignore.io</a>で。ここでgenerateしたものに置き換えてみたんですが、<code>git status</code>はあんまり変わりませんでした。記述量は確かに増えていたので、良くはなっているんでしょう...</p>
<p>AndroidStudio用に引っ張ってきたんですけど、そのままだと<code>.idea/kotlinc.xml</code>が入ってきてしまうようです。<code>kotlinc.xml</code>はversion管理不要ですよね?
逆に、<code>.idea/gradle.xml</code>はversion管理下に、という話が<a href="http://www.torutk.com/projects/swe/wiki/Android_Studioのバージョン管理対象ファイル">Android Studioのバージョン管理対象ファイル</a>、<a href="http://qiita.com/komax/items/d1aaecaec0a22cb5bc4e">Android Studioでバージョン管理下に置かないもの</a>、<a href="http://gihyo.jp/dev/serial/01/android_studio/0035">第35回　バージョン管理 ─プロジェクト管理ファイルについて［後編］</a>と出て来るんですが、<code>gitignore.io</code>のfileではexplicitlyにignore対象なんですよね...</p>
<p>試してみると、特に<code>.idea/</code>が無くてもAndroid Projectとして開けますね。じゃ全部要らないのかな。</p>
]]></content></entry><entry><title type="html"><![CDATA[Personal Information Leak Incident]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/personal-information-leak-incident/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/16/personal-information-leak-incident/</id><content type="html"><![CDATA[<p>先日派遣先で、5万数千件にのぼる個人情報漏洩を見付けてしまいました。</p>
<p>その会社ではチンケなECサイトをやってるんですけど、
といっても再販の再販までされてて何百人にも使われちゃってますが、
中身は2000年代前半〜中盤のcode。未だにJSP(一部Java)。
今やもうJavaEEから外れたっていうのに。
OSやlibrary、middlewareもsupport切れで無いものは無いという。
http/https混在、userのpasswordもDBに平文で保存してるくらい、
設計思想からして古いままのものです。WAFも入ってないといいますし。
早晩、こんなことが起こるだろうと傍で見ていて思っていましたが、
現実になり、しかも発見者がぼくだとは。
ぼく一応これ、部外者なんですけど。
同じように派遣されててそっちも手伝っている同僚から、
こんなaccessが沢山来てるってattack patternを見せられて。
不覚にも最初は一般的な定期巡回sql injectionかと思ってました。
Googleで調べると、<a href="https://serverfault.com/questions/541401/mysql-injection-attacks-random-urls-causing-errors">そういうのが載ってた</a>んです。</p>
<p>(<a href="https://github.com/ron190/jsql-injection">jsql-injection</a>
かとも思ったんですが、試してみるとちょっと違うかも。
Havij ProはWindowsだしちょっと怖いので入れてません)</p>
<p>ともあれ、だから単なる下調べ的なattackかと思ってました当初は。
しかし、</p>
<ol>
<li>IP遮断してもIP変えてやって来るくらいしつこい(IP元はHK,US,JP,CN,UK等々)</li>
<li>しかも同じようだが微妙に違うrequestを大量にする</li>
</ol>
<p>というところからすぐにピンとくるべきでした。
翌週になって、そういえば見せられたqueryに
このサイト固有の名前が入っていたな、
というところから、ちょっと実際に叩いてみたんですね。
そしたら...</p>
<p>あらま。</p>
<p>確かによく見たらqueryの中に「MAIL、PASSWD、TEL」の文字が。
見事に抜かれてました。
各queryの違いは、<code>lImIt</code>の数。
これを変えて、順々に取って行ってたんですね。
後でわかったことですが、固有名が無くても<code>information_schema</code>から
table名1個ずつ抜けるんですね。</p>
<p>attackがあったのが木曜、ぼくが気付いたのが翌週月曜、
log解析依頼されて、調べてみるとMAIL AddressとかPASSWDが5万数千件は
抜かれてました。
その他、抜かれてたのはショップ運営者の方のID、MAIL、PASSWDも。
それは6月19日に起きてました。
今までずっと気付いてなかったという。
再販先と連絡取って、すぐサイト全体落としたんですけど、
全体をこれまでのオンプレミスサーバ群からクラウドに移行したということで、
また再開したそうです(WAFは入れると言ってはいましたが)
(しかも移行したといってもミスがあるらしくすぐにはうまく行っていないとかで、
自分でやっといて直せないなんてアホの極みだと。
その不具合修正をぼくに求めてくるという。
確かにぼくはJava expertなので、
なんで見当違いのところで騒いでるのかくらいの指摘はしてあげましたけど、
自分の尻くらい自分で拭ったらどうですか?と)。</p>
<p>色々信じられません。</p>
<p>元々彼らの思考には付いていけてなくて。
今自分がやらされているprojectの方でも、
serverのlogic追ってったら「これ認証無いですよ」
って言っても改善せずそのまま、
他人の電話番号とか情報を抜けるPOC作って示しても、
「そのPOC書くのにどのくらい時間かけた?」とか聞いてくる始末。
もう匙投げてました。
っていうか、こんな人もいるんだ、と勉強になりました。
更に言えば、日本のsecurity意識って一般的にはこんなもんなんでしょうか。</p>
<p>本当は、この実態を再販先等に告発した方が社会正義のためだと
思うんですけれども、
西宮冷蔵社長の例を鑑みても告発者が報われない社会なのは明らかなので、
黙っているしか無いのかと悲しい思いをしています。</p>
<p>早くこんなとこから抜け出さないと、イケマセン。</p>
]]></content></entry><entry><title type="html"><![CDATA[Getting Prize S Level Programmer at Paiza]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/getting-prize-s-level-programmer-at-paiza/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/16/getting-prize-s-level-programmer-at-paiza/</id><content type="html"><![CDATA[<p>先日、<a href="https://paiza.jp/challenges">Paizaのスキルチェック</a>で
<a href="https://paiza.jp/challenges/share/0njRogbXZnuXG_Dt_noi_u1lW1Bl4R262Je2koUAjNA?source=social">時間切れ0点</a>を取ってしまったので、
癪だからランクS、本気で取りに行きました。
<a href="https://paiza.jp/challenges/share/BpVEE0xUqzek-gFkhWaalVEwoIv7rpTSXnDL6cOC4eo?source=social">ひとりすごろく</a>は第一次制限時間の40分を超えてしまったので、
全ケース通ったんですけど95点でSではなくA判定。
やっぱり時間が大事なんですね。
Javaで「早く」書くのは確かにキツイです。
ので、次は50点の制限時間が2時間の<a href="https://paiza.jp/challenges/share/Ku6dnsSr8gw5zINY0ItXIQ1UXOOdmh6Xl_0akPz7zwo?source=social">ビリヤードの玉突き</a>に挑戦しました。
こちらは、問題中にヒントを書いていてくれていることもあり、
60分で解答を提出、ようやっとSランクをゲットできました。
今までAランクでいっか、とか思ってて、S問題はゆっくりやって、
再チャレンジでcodeをbrush upして100点を取ってたんですけど、
それより時間が大事、なんですかね。
いや、実務では分を争う程、そこまでsevereではないので...
それに、paizaでいくら頑張っても、
小さいとこばっかりであんまり行きたい先が無いので、虚しいんです。</p>
]]></content></entry></feed>