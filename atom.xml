<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2018-07-18T16:54:40+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[How to get the result from DialogFragment]]></title><link href="http://u-ryo.github.io//blog/2018/07/18/how-to-get-the-result-from-dialogfragment/"/><updated>2018-07-18T16:54:40+09:00</updated><id>/blog/2018/07/18/how-to-get-the-result-from-dialogfragment/</id><content type="html"><![CDATA[<p><code>DialogFragment</code>をnewしてdialogを表示させ、
そこでのbutton tapによって、元のActivity上で処理をさせたい時、
どうやってfeedbackしたら良いのかなと。
呼び出し元は<code>Fragment</code>ではなく<code>Activity</code>なので、
<a href="https://tech.mokelab.com/android/Fragment/result.html">Fragmentで呼び出し元に結果を伝える</a><a href="https://stackoverflow.com/questions/10905312/receive-result-from-dialogfragment">Receive result from DialogFragment</a>等にあるように<code>setTargetFragment()</code>を使えないんですよね。</p>
<p>結局、<code>DialogFragment</code>側に<code>setCallback(Callback callback)</code>と
Functional Interfaceとして<code>Callback</code>を定義して、
button押したら<code>callback.call();</code>とし、
呼び出し元の<code>Activity</code>側で<code>new SomeDialogFragment().setCallback(() -&gt; someMethod())</code>としてやりたいことを<code>someMethod()</code>に込めました。
ちょっと面倒ですけどこのようにcallback駆使するしか無いのかなぁと。
<code>onActivityResult()</code>は<code>getTargetFragment()</code>が使えないのと
処理を<code>Activity</code>側に書きたいというのがあったので。
いや、<code>onActivityResult()</code>の中身は<code>Activity</code>側ですか。
<code>setTargetFragment()</code>の代わりに何か<code>Activity</code>のreferenceを
<code>DialogFragment</code>側に持たせればよかった?のかな?
いやいや、そもそも<code>Fragment</code>から<code>getActivity()</code>で取得できる?
からこんなことしなくてよかった?
あれ??
いやーでも<code>DialogFragment</code>側は引数の情報を持っておらず、
<code>Activity</code>側しか引数持ってないんですよね。
今回のぼくの場合では、
引数を引き回すか、再度SQLで取得するかして<code>onActivityResult()</code>でkickするか、
callbackを作るか、ということだったでしょうか。</p>
]]></content></entry><entry><title type="html"><![CDATA[Caution on ListView]]></title><link href="http://u-ryo.github.io//blog/2018/07/18/caution-on-listview/"/><updated>2018-07-18T16:19:39+09:00</updated><id>/blog/2018/07/18/caution-on-listview/</id><content type="html"><![CDATA[<p>今時<code>ListView</code>なんてあんまり使わないと思いますが、
<code>ListView</code>のviewの使い回しでbugがあったのでメモです。
ぼくがやったんじゃないです。</p>
<p><code>public View getView(int position, View convertView, ViewGroup parent)</code>
の<code>convertView</code>を使い回すわけですが、
<code>null</code>の時と<code>not null</code>の時の扱いが微妙に違うんですね。
具体的には、
<code>null</code>の時だけ<code>setOnItemSelectedListener</code>を設定して、
その<code>OnItemSelectedListener</code>が表示される初回だけ
<code>onItemSelected</code>が発動することを利用してobjectの
設定の一部をしているから、
<code>not null</code>の時にはその経路を通らず、
objectの一部が<code>null</code>のままで次に進むと<code>NullPointerException</code>に
なるという。
だからこのbugの発現条件は、
「初回表示時のリストの数が画面を2つ以上超える」時、
というわかりにくい、後からでは見つけにくいものになっています。
<code>OnItemSelectedListener</code>で設定しているのも悪いし、
<code>convertView</code>が<code>null</code>の時と<code>null</code>でない時の処理に
きちんと心を砕かなかったから、
こういうことになるんですね。</p>
<p>まーでもこんなlevelのbugはまだいぃ方ですけどねー
このsoftwareについては。
色々アホなのはホントやる気無くします。</p>
<p>参考: <a href="https://dev.classmethod.jp/smartphone/gridview-performanceup-1/">Android GridViewのパフォーマンスを上げよう(1/2)</a>←そうですよね普通気を付けますよね、<a href="https://kokufu.blogspot.com/2012/03/listview-graphical-layout.html">ListView は Graphical Layout で作ったまま使ってはいけない</a>←そうなんですよ最初、頭の1つだけ<code>null</code>で呼ばれた後画面に見える分だけ<code>not null</code>で呼ばれ、その後改めて<code>null</code>で呼ばれるので、何でかなーと思ったものです。ただもぅ今は<code>RecyclerView</code>だからこんなtipsはもう不要かなーと。</p>
]]></content></entry><entry><title type="html"><![CDATA[NullPointerException on Retrofit2 with Robolectric]]></title><link href="http://u-ryo.github.io//blog/2018/07/18/nullpointerexception-on-retrofit2-with-robolectric/"/><updated>2018-07-18T14:37:35+09:00</updated><id>/blog/2018/07/18/nullpointerexception-on-retrofit2-with-robolectric/</id><content type="html"><![CDATA[<p>Android ApplicationをRobolectricでtestしていて、
どうにも困ったのでメモです。</p>
<p>状況は、Android Applicationで、
Robolectricを使っていて、
Retrofit2で<code>POST</code>しにいく部分(受け手はMockWebServer)のunit testで、
突然<code>NullPointerException</code>になって<code>subscribe</code>の<code>error</code>に入ってしまう、というもの。
breakpointで追っていっても<code>call()</code>で突如NPEに入ってしまって、
具体的にどこでNPEに陥っているのかよく分かりませんでした。
Googleで探してみると、
<a href="https://stackoverflow.com/questions/39827081/unit-testing-android-application-with-retrofit-and-rxjava">Stack Overflow</a>にそれらしき投稿があり、
<code>.observeOn(AndroidSchedulers.mainThread())</code>は
<code>LooperScheduler</code>なのでここでNPEになる、
だから<code>RxAndroidPlugins</code>の<code>registerSchedulersHook()</code>で
<code>Schedulers.immediate()</code>してやると良い、
と書いてあって、やったー!
と思ったものの、効果なく。</p>
<p>結局そうではなくて、
MockWebServer使っているから<code>http://localhost:NNNN/...</code>に
requestを改装しているせいなんですけど、
SecurityPolicy絡みのExceptionが裏で出ているようで、
以下のようなShadowを用意して<code>@Config({shadows=...})</code>に
書いてやればそのままですんなり行きました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import android.security.NetworkSecurityPolicy;
</span><span class='line'>
</span><span class='line'>import org.robolectric.annotation.Implementation;
</span><span class='line'>import org.robolectric.annotation.Implements;
</span><span class='line'>
</span><span class='line'>@Implements(NetworkSecurityPolicy.class)
</span><span class='line'>public class ShadowNetworkSecurityPolicy {
</span><span class='line'>    @Implementation
</span><span class='line'>    public static NetworkSecurityPolicy getInstance() {
</span><span class='line'>        try {
</span><span class='line'>            Class<span class="err">&lt;</span>?&gt; shadow = ShadowNetworkSecurityPolicy.class.forName(&quot;android.security.NetworkSecurityPolicy&quot;);
</span><span class='line'>            return (NetworkSecurityPolicy) shadow.newInstance();
</span><span class='line'>        } catch (Exception e) {
</span><span class='line'>            throw new AssertionError();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Implementation
</span><span class='line'>    public boolean isCleartextTrafficPermitted(String hostname) {
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>勿論、<code>.subscribeOn(Schedulers.io())</code>に対しては
<code>RxJavaHooks.setOnIOScheduler(s -&gt; Schedulers.immediate());</code>
した上で、です。</p>
]]></content></entry><entry><title type="html"><![CDATA[groovy on Java9+]]></title><link href="http://u-ryo.github.io//blog/2018/07/18/groovy-on-java9/"/><updated>2018-07-18T10:05:54+09:00</updated><id>/blog/2018/07/18/groovy-on-java9/</id><content type="html"><![CDATA[<p>いつも忘れちゃうので。
Java9以上のGroovyでmoduleが足りない、
具体的には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Caught: java.lang.NoClassDefFoundError: Unable to load class groovy.xml.jaxb.JaxbGroovyMethods due to missing dependency javax/xml/bind/JAXBContext
</span><span class='line'>java.lang.NoClassDefFoundError: Unable to load class groovy.xml.jaxb.JaxbGroovyMethods due to missing dependency javax/xml/bind/JAXBContext
</span></code></pre></td></tr></table></div></figure>
<p>と言われる時。
groovyではどうやって<code>--add-modules</code>すればいいのかなって。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ JAVA_OPTS=&#39;--add-modules=ALL-SYSTEM&#39; groovy ...
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[RapidMiner]]></title><link href="http://u-ryo.github.io//blog/2018/05/11/rapidminer/"/><updated>2018-05-11T18:01:35+09:00</updated><id>/blog/2018/05/11/rapidminer/</id><content type="html"><![CDATA[<p>今、会社の業務の一部(先月から0.75)でAI、機械学習をやっています。
題材として<a href="http://signate.jp/">Signate</a>の
<a href="https://signate.jp/competitions/1">【練習問題】銀行の顧客ターゲティング</a>
をやっています。
業務時間中に色々試せるのはありがたいです。
PythonやR、kerasや<a href="https://colab.research.google.com/">Google Colaboratory</a>や
Azure上のVM with GPUとか貰って試していたのですが、
結局<a href="http://rapidminer.com/">RapidMiner</a>使ってみました。
<a href="https://www.rapidminer.jp/2016/07/07/【連載】rapidminerで始めるデータ分析～part5：予測モデル/">KSKのtutorial</a>で勉強して、
色々と回せるようになりました。
確かに簡単ですねこれ。
でも、分かって来るとその限界や欠点も見えてきました。
また、課題に対する知見も溜まってきたので、忘れないうちに。</p>
<ul>
<li>基本的な流れは、<code>Read CSV(train.csv)</code>→<code>Cross Validation</code>(<code>Gradient Boosted Trees</code>→<code>Apply Model</code>→<code>Performance(Binominal Classification)</code>)と<code>Read CSV(test.csv)</code>を合わせて→<code>Apply Model</code>→<code>Select Atributes</code>→<code>Write CSV</code><img src="https://raw.githubusercontent.com/wiki/u-ryo/u-ryo.github.io/images/rapidminer1.png" alt="RapidMiner flow" /> <img src="https://raw.githubusercontent.com/wiki/u-ryo/u-ryo.github.io/images/rapidminer2.png" alt="inside cross validation" /></li>
<li>CSVのreadでは、まず最初の列のidを<code>id</code>、最後のyを<code>label</code>に指定、その他のattributesについては、yes/no 2値のものを<code>binominal</code>、dayを<code>integer</code>ではなく<code>polynominal</code>にするのがpointか。</li>
<li>dayとmonthから日付にしては? と思っていたのだが、pdateを見ると同じ月日でも何百日のものもあって複数yearsありそう、且つyearは特定できなさそう(365日毎でもない)</li>
<li>ならいっそday/monthをfeatureから落とすと精度が落ちる</li>
<li>せめてmonthだけでも<code>date</code>として認識できないかと試したがdate format指定を<code>mmm</code>では出来なかった(小文字だから?)</li>
<li>ウリのAutoModelを試したところ、data file指定、fieldsのcorrelationから落とすattributesを指定、複数種類のmodelを実行、その後modelのparameterをいじれてsimulationが出来、modelに対する理解が進むというもの。AutoModelではGBoostよりDeepLearningが僅差で良かったがAUC 0.89程度</li>
<li>自分でcross validationするようにして色々なmodelerを試したところ、Deep Learningも良かったがGradient Boosted TreesがAUC 0.90と最強だった</li>
<li>なのでGBoostでparameter tuningを。number of treesはdefaultの20からぐっと増やした方が。max depthはちょっとでも大きすぎるとダメ。learning rateもちょっとでも増やすと精度は落ちる</li>
<li>あんまり細かくtuningしても、結局randomizeの影響が大きい。小数点以下3桁程度のぶれは出てしまう。即ち、全く同じparametersで試しても結果が違う。reproducibleをcheckしても、cross validationの仕方が違うので、全てのrandom性を注意深く固定しないとならないし、randomのseedを探索する事になってしまうのもアホらしい</li>
<li>仮にmodelingが出来たとして、これをserviceとして抜き出すのは難しそう。RapidMiner Serverを買えということか。そういうところで彼らは商売をしているのだろう。</li>
<li>GPUが無くても速い(30秒程度)のは、MultiThreadを使っているからか。<code>top</code>を見ていると気持ちいいくらいmulti coresを使っている。流石はJavaである。</li>
<li>よく言われる<code>XGBoost</code>というmodelerは無く、<code>Gradient Boosted Trees</code>がそれ相当</li>
<li>one-hot vector化しようと思って<code>Nominal to Numerical</code>を前処理に入れたら精度が落ちた。その出力をよく見たら、これ単に非numericalなattributesを落としてるだけ。何これ。じゃぁっていうんで<code>Nominal to Binomial</code>にしてみても全く同じ。えー、RapidMinerではone-hot vector化、簡単に出来ないの!? 他の言語ではチョー簡単なのに。</li>
<li>RapidMiner、凄く簡単ですけど、これはinput dataがone fileで数万recordsしか無いから、でしょう。これが画像群だったらこうはいかないでしょう。</li>
</ul>
<h3>現時点で最良の結果(5/11/2018現在68位)</h3>
<p>https://signate.jp/competitions/1/leaderboard#scoreboard</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>number of trees: 205
</span><span class='line'>maximal depth: 5
</span><span class='line'>min rows: 10.0
</span><span class='line'>min split improvement: 0.0
</span><span class='line'>number of bins: 20
</span><span class='line'>learning rate: 0.1
</span><span class='line'>sample rate: 0.8
</span><span class='line'>
</span><span class='line'>PerformanceVector:
</span><span class='line'>accuracy: 90.89% +/- 0.42% (mikro: 90.89%)
</span><span class='line'>ConfusionMatrix:
</span><span class='line'>True:	1	0
</span><span class='line'>1:	1638	935
</span><span class='line'>0:	1536	23019
</span><span class='line'>AUC: 0.933 +/- 0.006 (mikro: 0.933) (positive class: 0)
</span></code></pre></td></tr></table></div></figure>
<p>これ以上AUCを上げるには、
RapidMinerじゃない何か、RかPythonを使って、
入力dataもone-hot vector化して、とかしないとならないような気がします。</p>
]]></content></entry><entry><title type="html"><![CDATA[git stash]]></title><link href="http://u-ryo.github.io//blog/2018/04/10/git-stash/"/><updated>2018-04-10T11:51:49+09:00</updated><id>/blog/2018/04/10/git-stash/</id><content type="html"><![CDATA[<p>調べりゃすぐ出て来ますが。</p>
<h3>Situation</h3>
<p>localに取っておきたい一時的な変更があって、
でもそのせいで<code>git pull</code>してupdate出来ない、
<code>git checkout ...</code>してbranchを変えられない時。</p>
<h3>Operation</h3>
<ul>
<li><code>git stash list -p</code>で確認</li>
<li><code>git stash</code>で退避</li>
<li>localの変更が無くなるので、この状態で<code>git checkou ...</code>なり<code>git pull ...</code>なり</li>
<li><code>git stash apply stash@{0}</code>で直前のstashをapply</li>
<li><code>git stash dtrop stash@{0}</code>で直前のstashをdrop←すぐ消さないと、後々残って何の変更なのかわからなくなる</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[mock web server by WireMock on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/26/mock-web-server-by-wiremock-on-jhipster/"/><updated>2018-04-09T15:24:10+09:00</updated><id>/blog/2018/03/26/mock-web-server-by-wiremock-on-jhipster/</id><content type="html"><![CDATA[<p>外部web siteのresponseのtestに<a href="http://wiremock.org/">WireMock</a>を使ったのでメモ。</p>
<p>参考: <a href="https://dev.classmethod.jp/etc/wiremock-practice/">WireMockを使って通信に関するテストをやってみよう</a></p>
<p>使う時は<code>build.gradle</code>で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>testCompile &#39;com.github.tomakehurst:wiremock-standalone:2.15.0&#39;
</span></code></pre></td></tr></table></div></figure>
<p>して(<code>wiremock-standalone</code>でないと、
jetty系のClassNotFoundExceptionに見舞われた)から、
test classの方で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import com.github.tomakehurst.wiremock.junit.WireMockRule;
</span><span class='line'>import static com.github.tomakehurst.wiremock.client.WireMock.*;
</span><span class='line'>    :
</span><span class='line'>    @Rule
</span><span class='line'>    public WireMockRule wireMockRule = new WireMockRule(8089);
</span></code></pre></td></tr></table></div></figure>
<p>とし、各test method内で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>        stubFor(post(urlPathEqualTo(&quot;/any_path&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*arr_stn=%96%BC%8C%C3%89%AE.*&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*dep_stn=%93%8C%8B%9E.*&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*train=1.*&quot;))
</span><span class='line'>                .willReturn(aResponse()
</span><span class='line'>                            .withStatus(200)
</span><span class='line'>                            .withBodyFile(&quot;for_test.html&quot;)));
</span></code></pre></td></tr></table></div></figure>
<p>とstatic importした
<code>com.github.tomakehurst.wiremock.client.WireMock.stubFor</code>を使えば良い。
matching rule詳細は<a href="http://wiremock.org/docs/request-matching/">公式ページ</a>を。
post body requestに対して<code>.withQueryParam("...", matching("..."))</code>は効かなかった。
また、<code>matching</code>なので全体にmatchingさせる必要があることに注意。
<code>find</code>系はなし。</p>
<p>test対象classでのqueryがここでの指定に合わなければ、404がthrowされる。</p>
<p>上記のように、test用に既に用意してあるhtml fileを<code>.withBodyFile("...")</code>で指定でき、
実体は<code>src/test/resources/__files/</code>に置く。
<code>.withBodyFile(...)</code>は公式Docに無く、JavaDoc APIも無いので、
<a href="https://github.com/tomakehurst/wiremock/blob/master/src/main/java/com/github/tomakehurst/wiremock/client/MappingBuilder.java">Github上のsource code</a>を眺めて見つけた。</p>
<p>こうしたmappingを<code>src/test/resources/mappings/</code>以下に<code>anyName.json</code>を置いて、
requestとresponseを指定できるのだが、
それだと「こういうrequest bodyの時はこのようなresponse、
こっちの時はこれこれのresponse」というように、
複数の条件を書くことが出来なかった
(書いてみると、最後のrequest/response条件しか効かず。
ならばと複数fileに分けてみたら、
file名alphabeticalで最後のrequest/responseしか効かず)。
なので、Javaでstub条件書いて各test method内に書くしか無い?</p>
<p>これはSpringの話だが、
testの時だけ<code>localhost:8089</code>を見るようにするには、
<code>〜.config.ApplicationProperties</code> classにfield定義、setter/getterのaccessorを付け、<code>src/main/resources/config/application.yml</code>の<code>application:</code>以下に通常時の値を、<code>src/test/resources/config/application.yml</code>の<code>application:</code>以下にtest時の値(この場合は<code>http://localhost:8089/any_path</code>)を記述。
実際に使うには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    @Autowired
</span><span class='line'>    private ApplicationProperties properties;
</span></code></pre></td></tr></table></div></figure>
<p>とDIさせて、<code>properties.get〜()</code>と普通にgetterでget。</p>
<p>AssertJ、method chainで書けるので、
static importが<code>assertThat</code>だけで済んでいいですね。</p>
<p>これはJHipsterの話?(Springかなぁ?)で、
Test Class内で<code>@Autowired</code>してるservice classのmockが必要になったら、
特に<code>build.grade</code>に記述せずとも<code>import org.mockito.Mock;</code>して
mockitoの<code>@Mock</code>が使えるんですね。
そう言えば、元々<code>import org.mockito.MockitoAnnotations;</code>されてますね。</p>
]]></content></entry><entry><title type="html"><![CDATA[unit test on jhipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/23/unit-test-on-jhipster/"/><updated>2018-04-09T15:24:10+09:00</updated><id>/blog/2018/03/23/unit-test-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでのunit testでいくつかハマったのでメモ。</p>
<ul>
<li><p>unit test実行は<code>gradle test</code></p>
</li>
<li><p>単一test classを指定するには<code>gradle test --tests FQDN.class.name</code></p>
</li>
<li><p>test class内の<code>log.debug(...)</code>を出力するには、<code>build.gradle</code>に<code>test.testLogging.showStandardStreams = true</code>を記述し、また<code>src/test/resources/application.yml</code>に以下を記述(<code>src/main/resources/application-dev.yml</code>には記述あり)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>logging:
</span><span class='line'>    level:
</span><span class='line'>        ROOT: DEBUG
</span><span class='line'>        bz.mydns.walt.canmatch: DEBUG
</span><span class='line'>        io.github.jhipster: DEBUG
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>test classにおいてRESTで認証したuserを表したい時には<code>@WithMockUser</code>(<code>import org.springframework.security.test.context.support.WithMockUser;</code>)</p>
</li>
<li><p>testされる側のREST methodでは、<code>java.security.Principal</code>を勝手に引数に加えることでlogin userを取得出来、それをtestする場合にはtest classの<code>MockMvc</code>で<code>restUserInfoMockMvc.perform(post("/api/user-infos")...)</code>などとする時に<code>org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user</code>を使って<code>.user("foo")</code>とすると、認証された"foo"というuserでのaccessをmock出来るが、<code>org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication()</code>というstatic methodで<code>java.security.Principal</code>が取れ、それに<code>.getName()</code>で名前を取得可能。その方がspringっぽいのかな。test class側では、認証accessが必要なmethodに上記の<code>@WithMockUser</code>をつければ良い。<code>@WithMockUser(username="foo", password="pw", roles={"USER"})</code>などとすれば色々指定可能だが基本的には不要</p>
</li>
</ul>
<h3>参照</h3>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/4.2.5.BUILD-SNAPSHOT/apidocs/org/springframework/security/test/context/support/WithMockUser.html">WithMockUser</a></li>
<li><a href="https://qiita.com/opengl-8080/items/eaa8f4eb9286a3df7986">Spring Security 使い方メモ　テスト</a>(2017-08-02)</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html">11. Testing Method Security</a>(Spring公式doc)</li>
<li><a href="https://ishiis.net/2016/11/12/spring-boot-security-unit-test/">Spring Securityを使っているWebアプリのUnitテスト</a>(2016/11/12)</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[push notification on Angular5]]></title><link href="http://u-ryo.github.io//blog/2018/03/19/push-notification-on-angular5/"/><updated>2018-03-23T10:33:45+09:00</updated><id>/blog/2018/03/19/push-notification-on-angular5/</id><content type="html"><![CDATA[<p>もう先月ですが、Web Push Notificationを勉強して自分で試すことで、
理解を深めました。<a href="https://github.com/u-ryo/my_web_push">作ってもみました</a>。</p>
<p>やりたいアプリは<a href="https://www.jhipster.tech">Jhipster</a>で
<a href="https://angular.io">Angular</a>使ってるんですが、
ではそういえば、AngularではWeb Pushってどうやるんだろう?!
ということからまた勉強が始まりました。
調べてみると、簡単に使えるようになっているんですね(Angular CLI 1.6以降は)。</p>
<ul>
<li><a href="https://qiita.com/studioTeaTwo/items/157e1c380ca63b372dc0">3分クッキング ServiceWorkerで阿部寛さんを超える</a> → いやこれ、単に阿部さんのページはcontents量が少ないから、というだけのjokeですよね</li>
<li><a href="https://medium.com/lacolaco-blog/angular-cli-1-5%E3%81%AB%E3%82%88%E3%82%8Bangular-service-worker%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88-bd90db99fe13">Angular CLI 1.5によるAngular Service Workerクイックスタート</a> → 「angular.jpで公式ドキュメントの翻訳が完了しているので、こちらをご覧ください」確かに公式見た方がいいですか。</li>
<li><a href="https://angular.jp/guide/service-worker-getting-started">(Angular公式) Service Workerを始める</a></li>
<li><a href="https://qiita.com/studioTeaTwo/items/648731b61962b7687f5a">AngularアプリをPWAにする方法</a></li>
<li><a href="https://medium.com/@nsmirnova/creating-pwa-with-angular-5-e36ea2378b5d">Creating PWA with Angular 5. Part 1: Getting started with framework, creating an application, hosting it on github-pages.</a>, <a href="https://medium.com/@nsmirnova/creating-pwa-with-angular-5-part-2-progressifying-the-application-449e3a706129">Creating PWA with Angular 5. Part 2: Progressifying the application</a> → <a href="https://github.com/NastyaSmirnova/PWCat/">PWCat</a>を<a href="https://github.com/u-ryo/PWCat/">写経して比較検討しました</a></li>
<li><a href="https://blog.angular-university.io/angular-service-worker/">Angular Service Worker - Step-By-Step Guide for turning your Application into a PWA</a></li>
</ul>
<p>多くの導きのおかげで、angular5にてどのようにservice workerを導入するか、
はわかってきました。</p>
<p>要するに、アプリをgenerateする時に、Angular CLI(1.6+、現時点では1.7.3)で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ng new application-name --service-worker
</span></code></pre></td></tr></table></div></figure>
<p>とするか、既にgenerateしてしまったアプリに対しては、
<a href="https://angular.jp/guide/service-worker-getting-started">(Angular公式) Service Workerを始める</a>にあるように、</p>
<ol>
<li><code>yarn add @angular/service-worker</code></li>
<li><code>ng set apps.0.serviceWorker=true</code> または <code>.angular-cli.json</code>を編集して<code>apps</code>の下レベルに<code>"serviceWorker": true</code>を挿入</li>
<li><code>src/app/app.module.ts</code>にService Workerを<code>import</code>して登録(但しその際、base hrefを<code>/</code>の他にしたいなら<code>ServiceWorkerModule.register('./ngsw-worker.js', {enabled: environment.production})</code>と<code>./ngsw-worker.js</code>を相対指定しないとダメ)</li>
<li><code>src/ngsw-config.json</code>を作成(雛形をコピペ)</li>
<li><code>ng build --prod</code>としてbuild(<code>ng serve</code>ではダメ)(base hrefを<code>/</code>の他にしたいなら<code>--base-href /another/directory/</code>が必要。←最後が<code>/</code>でないとダメ)</li>
</ol>
<p>PWAとしては、あと<code>manifest.json</code>が必要?(<a href="https://docs.google.com/document/d/1F0e0ROaZUnTFftmC0XovpREHWHjcXa4CggiFlmifjhw/edit#">Progressive Web Apps using the Angular Service Worker</a>, <a href="https://qiita.com/studioTeaTwo/items/648731b61962b7687f5a">AngularアプリをPWAにする方法</a>)</p>
<p>これで、当該projectをweb browserで表示させると、
service workerが読み込まれ、
offline cacheが効くようになる、筈...
なのですが、どう試しても、
offline modeにしてからreloadすると、<code>504 Gateway Timeout (from ServiceWorker)</code>になってしまいます。
<a href="https://nastyasmirnova.github.io/PWCat/">PWCat</a>では上手くcacheされていることから、
多分これは<a href="https://github.com/angular/angular/issues/21636">Angularのbug</a>と思います。</p>
<p>なのでoffline cacheは今は諦めて、push notificationの方策を探りました。
AngularのService Workerの話は、公式も含めて、
cacheやupdateばかりでpush notificationについては触れられてないんですね。
そういう中、<a href="https://medium.com/progressive-web-apps/a-new-angular-service-worker-creating-automatic-progressive-web-apps-part-1-theory-37d7d7647cc7">A new Angular Service Worker — creating automatic progressive web apps. Part 1: theory</a>,
<a href="https://medium.com/google-developer-experts/a-new-angular-service-worker-creating-automatic-progressive-web-apps-part-2-practice-3221471269a1">A new Angular Service Worker — creating automatic progressive web apps. Part 2: practice</a>という記事があり、
<a href="https://github.com/webmaxru/pwatter">PWAtter</a>とその<a href="https://github.com/webmaxru/pwa-workshop-api">server</a>がありましたので、
非常に参考にさせてもらえました。
というかほぼそのままコピペして使わせてもらってます。
PWAtterはtwitterを拾うので物凄い勢いでpush notificationが来て、
明示的に消さないと消えないので、かなりうざいのですが、
これでAngularで<a href="https://github.com/u-ryo/angular-swpush/">Push Notificationが実装できるようになりました</a>。
非Angularで作った時は、notificationの形についてはあまり気にしてなくて、
<code>clickTarget</code>とか<a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification">Notification object spec</a>を無視していましたが、
Angularでは<code>ngsw-worker.js</code>に<code>NOTIFICATION_OPTION_NAMES</code>があって、
そこで有効なproperty namesが規定されており、
<code>NOTIFICATION_OPTION_NAMES.filter(name =&gt; desc.hasOwnProperty(name))</code>として
filterしているので、変なproperty書いても効かないんですね。
ちゃんとNotification object specに則った形のJSONをsendするようにすると、
push notificationが表示されるようになりました。</p>
<p>あとは、Notificationをclickしたら消えたり指定のpageに飛ぶように、
と思ったんですが、どうやったらいいのか。
<code>notification.action</code>とか色々指定してみたものの、一向に何も起きず。
何でかなーって思ったら、どうやらnot yet implementedなんですね。
現に、<code>node_modules/@angular/service-worker/ngsw-worker.js</code>に、
<code>addEventListener('push', (event)...</code>
等はあっても、
<code>addEventListener('notificationclick', (event)...</code>
は無いんですね。(- -;
workaroundとしては、以前の知見を活かして、
似たようなことを書けばそれだけでpush notificationを実現できることを確認しました。
<a href="https://github.com/u-ryo/angular-swpush">push notificationの動作確認済のアプリ</a>を作成しました。</p>
<p>既に公式Angularでもissuesに似たような話はありましたので、
comment付けておきました。</p>
<ul>
<li><code>app.module.ts</code>中の<code>/ngsw-worker.js</code>は相対指定であるべき <a href="https://github.com/angular/angular-cli/issues/8515#issuecomment-374103272">ServiceWorker register generated by cli with base-href don't works #8515</a></li>
<li><code>notificationclick</code> event listenerのworkaroundの紹介 <a href="https://github.com/angular/angular/issues/20956#issuecomment-374133852">Provide means to configure notificationclick in service-worker push #20956</a>, <a href="https://github.com/angular/angular/issues/22311#issuecomment-374143351">How to handle Notification click events (cannot find docs) #22311</a></li>
</ul>
<p>ホントはPull Request作りたかった、です。
上記前者の方は、どこでどうやって書き込んでいるのかわからず、codeに出来ませんでした。
後者は、<code>angular/packages/service-worker/worker/src/driver.ts</code>と<code>angular/packages/service-worker/worker/src/service-worker.d.ts</code>だというのはわかって、
書いてみたんですが、
いや難しいですね。
まず<code>event</code>って<code>notification</code>以下のJSONを含んでいるわけですが、
同時に<code>event.notification.close()</code>っていうmethodもあるわけで、
こういうのを厳密にobjectとして表現しなきゃいけないようになってるんですね。
凄いなぁ。そういうのが曖昧模糊渾然一体としているのがjavascriptなのに。
また、<code>clients.openWindow(...)</code>の<code>clients</code>もいきなり出て来るobjectで、
出自がよくわからないのですけど、そういう曖昧さを許さないように出来ています。
他を見てどうやら<code>this.scope.clients</code>とすればよさそうなのはわかったんですが、
それでも<code>./build.sh</code>をかけると
<code>driver.ts(246,28): error TS2339: Property 'openWindow' does not exist on type 'Clients'.</code>と言われて、お手上げでした。
<code>notification.close()</code>の方も、
<code>error TS2339: Property 'notification' does not exist on type 'Object | Client'</code>と言われて、
どうしていいかわからず。
生成されるべきcodeはわかってるのに、悔しい、です。
折角<a href="https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md">Code of Conduct</a>や<a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a>読んでcoding ruleやcommit message formatを学んだり<a href="http://code.google.com/legal/individual-cla-v1.0.html">CLA(Contributor License Agreement)</a>登録したり<a href="https://github.com/angular/angular/blob/master/docs/DEVELOPER.md">DEVELOPER.md</a>読んでbuildやtestの仕方学んだりしたのにー。
でもまぁ確かに、飛び先のURLはどこに書くべきか、とか、
clickしたら飛ばないでただ閉じるように/閉じないようにしたい、とかするには、
<code>eventListener('notificationclick',(event)=&gt;{...});</code>を
直接いじらないとならないし、
仕様を含めたもっと別の方策が必要だと思います本当は。</p>
<p>favicon等iconを作るのに、<a href="https://realfavicongenerator.net/">Real Favicon Generator</a>、いいですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[GitHub Pages]]></title><link href="http://u-ryo.github.io//blog/2018/03/05/github-pages/"/><updated>2018-03-23T10:33:45+09:00</updated><id>/blog/2018/03/05/github-pages/</id><content type="html"><![CDATA[<p>GitHub Pagesって、各user一つしか持てないのかとずっと思ってて。
それを<a href="https://u-ryo.github.io/">my blog</a>に当ててきたから、
もう持てないのかと。
でも、違うんですね。
各project毎に持てるんですね。
しかも、昔は<code>gh-pages</code>とかっていうbranch切らないとならなかったのが
(今でもこの方法はある)、
その他に<code>master</code> branchそのまま、
もしくは<code>master</code> branchの<code>docs</code> directory以下を
GitHub Pagesとしてhttpsで公開できるんですね。</p>
<p>試しにdocsでやってみました。</p>
<ul>
<li>project page: <a href="https://github.com/u-ryo/PWCat/">https://github.com/u-ryo/PWCat/</a></li>
<li>GitHub Page: <a href="https://u-ryo.github.io/PWCat/">https://u-ryo.github.io/PWCat/</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Web Push Notification for PWA]]></title><link href="http://u-ryo.github.io//blog/2018/02/18/web-push-notification-for-pwa/"/><updated>2018-02-27T10:31:43+09:00</updated><id>/blog/2018/02/18/web-push-notification-for-pwa/</id><content type="html"><![CDATA[<p>PWAの売りとしてWeb Push Notificationが出来るのはつとに聞いていましたが、
具体的にどうやるんだろう? と思ってました。
仕組みから考えて、WebSocketが必須なのかな?
とかって勝手に思ってたんですが、違うんですね!
「やってみた」系の記事見て、Firebaseを使うものばっかりだったので、
えーっ! Firebase hosting必須なの?!
と思いきや、
VAPID(Voluntary Application Server Identification)も
あるということで一安心。
あーでも、別にFCM(Firebase Cloud Messaging)をhostingじゃなく使うことも出来るので、
その方が楽なのかな。
browser毎じゃなくてuser毎に送れるっていうし。
でもvendor lock onも嫌なので、
VAPIDからやってみました。</p>
<p>Web Pushの仕組みは、<a href="https://ajike.github.io/how-pwa-push-works/">PWAのプッシュ通知の仕組み</a>がよくまとまってました。
PWAとWeb Push Notificationは別なんですね。</p>
<p>browser上からは、<a href="https://gauntface.github.io/simple-push-demo/">Push Demo</a>などですぐ試せます。</p>
<p>自分の手に馴染ませないとよくわからないので、<a href="https://github.com/u-ryo/my_web_push">作ってみました</a>。</p>
<ol>
<li>push server側で、VAPIDのkey(public, private)を決めておく。key generationは、<a href="https://github.com/web-push-libs/web-push/">web-push</a>の<code>client.js</code>をcommand lineから使って<code>$ node_modules/web-push/src/cli.js generate-vapid-keys</code>とせよ、とか<a href="https://dzone.com/articles/web-push-notifications-1">書いてあるもの</a>も他に多くありましたが、Googleの<a href="https://developers.google.com/web/fundamentals/codelabs/push-notifications/">Adding Push Notifications to a Web App</a>にあるように<a href="https://web-push-codelab.glitch.me/">Push Companion</a>で簡単に作れますね。試しに作ってみたものではscriptで毎回自動生成してclient(=web browser, html and javascript側)に読ませてみるようにしてみましたが、実運用上はベタに固定値書いておいた方が楽だしわかりやすいし再起動の度に値変わらないからその方がいいのかな。</li>
<li>あとserver側は各clientのnotificationEndPoint、publicKey、authを知ってないといけない。これらはclientが<code>serviceWorkerRegistration.pushManager.subscribe(subscribeParams)</code>した時に得られる。<code>subscribeParameter</code>とは、server側のpublicKeyを<code>urlB64ToUint8Array()</code>したものと<code>userVisibleOnly: true</code>は固定値。そうして得られた3つの値をserver側に引き渡さねばならないのだが、そのまま渡すのではなく、<code>btoa(String.fromCharCode.apply(null, new Uint8Array(key)))</code>などとしてString化する必要がある。</li>
<li>上記でもらう<code>notificationEndPoint</code>って、mozillaなら<code>https://updates.push.services.mozilla.com/wpush/v2/...</code>、chrome(chromium)なら<code>https://fcm.googleapis.com/fcm/...</code>というように、browser毎にmaker別のpush server持ってるんですね。ってことは、browserは裏ではこうしたsiteと常にconnection張ってるということ?</li>
<li>もっと深い原理(具体的にどういうheader/encryptionでpush serviceに送っているか)は<a href="http://adiary.blog.abk.nu/0391">Web Pushの実装まとめ（Chrome/Firefox/Android共通）</a>参照。</li>
<li>client側では、<code>main.js</code>で、まず<code>Notification.requestPermission()</code>で許可を得る。許可を求めるtimingは、page load直後かと思いきや、最初にいきなり許可求めると拒否られることが多いということで、button式に。button押したら許可求める、と。</li>
<li>許可が得られたら<code>navigator.serviceWorker.register('/sw.js')</code>でService Worker scriptを登録。<code>navigator.serviceWorker.ready</code>で利用可能になるのを待つ。これのreturn value(の型)は<code>ServiceWorkerRegistration</code>であり<code>navigator.serviceWorker</code>ではないので注意。これから<code>pushManager</code>を得ることになる。</li>
<li>その後、push serverからserverのpublicKeyをGET。</li>
<li><code>subscribeParams</code>を作って<code>serviceWorkerRegistration.pushManager.getSubscription(subscribeParams)</code>してみる。既に登録があったらunsubscribeしないとならない。上述のように、parameterではserver側のpublicKeyを<code>urlB64ToUint8Array()</code>したものと<code>userVisibleOnly: true</code>は固定値。</li>
<li>それから<code>serviceWorkerRegistration.pushManager.subscribe(subscribeParams)</code>でsubscribeする。</li>
<li>そうすると、endpoint、key、authが得られるので、それらをpush server側に通知。</li>
<li><code>sw.js</code>では、push通知が喜た場合<code>push</code> eventがfireされるので、<code>event.waitUntil(registration.showNotification(...)</code>する。この<code>registration</code>がどこから来るのかよくわからなかったが、ともあれ明示的に<code>waitUntil</code>して<code>showNotification</code>しないと表示されない(pushが来て勝手に表示されるわけではない)。</li>
<li>表示されたNotificationをclickすると<code>notificationClick</code> eventがfireされるので、clickしたらどこかへ遷移したい場合にはこのevent listenerを<code>sw.js</code>に書いておく必要がある。</li>
<li>PWA用に、<code>sw.js</code>の<code>install</code> eventと<code>fetch</code> event listenerでfile chacheの作成とその利用をcodeする(<code>install</code>でcacheに加え、<code>fetch</code>ではcacheにあったらそれを、なければfetchするようにする)。</li>
<li>notificationをpushするには、push server側でまず<code>new PushService(publicKey, privateKey, "http://localhost")</code>してから、clientから貰った情報で<code>push.send(new Notification(...))</code>する。中では色々と暗号化しているが、<a href="https://github.com/web-push-libs/webpush-java">nl.martijndwarsのwebpush-java</a>を使えばVAPIDのkey生成やnotificationのsendもone methodでよろしくやってくれる。他の言語も<a href="https://github.com/web-push-libs">web-push-libs</a>に各種あり。</li>
</ol>
<p>実際に自分で真似して書いてみて、
値やcodeを色々変えて試してみることで、
大分わかってきました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Brain Science]]></title><link href="http://u-ryo.github.io//blog/2018/02/03/brain-science/"/><updated>2018-02-27T10:31:43+09:00</updated><id>/blog/2018/02/03/brain-science/</id><content type="html"><![CDATA[<p>出されている仕事先の事務女性が前社長夫人で、
今頃になってパワハラとか受けて辞めそうだと聞いていて、
そういう今日このごろに刺さった記事がありました。
<a href="http://toyokeizai.net/articles/-/205707">ヒトの脳は｢他人を裁く｣ようにできている ｢暴走する正義漢｣を止める方法はない</a>
そこから、
「シャーデンフロイデ」(≒メシウマ)、
脳科学者中野信子さん、と調べて読んでいきました。</p>
<ul>
<li><a href="http://logmi.jp/234713">ネットで誰かを吊し上げて叩くと快感が得られる–脳科学者・中野信子氏が解説する「シャーデンフロイデ」という感情</a></li>
<li><a href="http://news.livedoor.com/article/detail/9282077/">脳科学者・中野信子「人間は実力のある人よりも、確信のある人のほうにひかれるのです」</a></li>
<li><a href="https://www.cafeglobe.com/2017/11/065561book.html">脳科学者・中野信子さんが教える「大人のいじめ」回避のしかた</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Optical Illusion]]></title><link href="http://u-ryo.github.io//blog/2018/02/03/optical-illusion/"/><updated>2018-02-27T10:31:43+09:00</updated><id>/blog/2018/02/03/optical-illusion/</id><content type="html"><![CDATA[<p>IT mediaの記事(<a href="http://www.itmedia.co.jp/news/articles/1802/02/news010.html">コンピュータで“錯視”の謎に迫る：試してびっくり　点を回転させると円に見える「グラス・パターン」錯視の謎</a>)を見て、<a href="http://araiweb.matrix.jp/Exhibition/illusiongallary4.html">こんな世界</a>があるんだー! って驚きました。錯視を引き起こす成分を分離できるなんて!
ここでも出来るのかな?</p>
<p>夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー<br  />
夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー</p>
<p>ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏<br  />
ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏ーナワ夏</p>
<p>夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー<br  />
夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー</p>
]]></content></entry><entry><title type="html"><![CDATA[JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/01/30/jhipster/"/><updated>2018-01-31T14:42:38+09:00</updated><id>/blog/2018/01/30/jhipster/</id><content type="html"><![CDATA[<p>ここんとこPWA(Progressive Web Application)作ろうとしていて、
ずっとJEEかなぁって思ってたんですけどSpringの勢いが凄くて、
それと今ならSPAでぼくはAngular派なので、
それに今時認証は自分でやりたくないよねとOAuth2で、
連動させるの大変だなぁとかって思ってたら、
そういうの全部ひっくるめた<a href="http://www.jhipster.tech/">JHipster</a>というのがあるんだ!
というのが衝撃でした。
かなり前からあったんですね。</p>
<p>ただこれ難しいですね。
scaffoldingまでは簡単ですけど、
そこからどうしていいのか。
自動生成filesはなるべく弄りたくないですが、
そうもいかないですよねこれ。
samplesも、「そこから先」についてはなかなか。
<a href="https://www.infoq.com/minibooks/jhipster-4-mini-book">JHipster Mini-Book 4.0</a>も見てみましたものの、それをなぞって行けるわけでは無かったので。
scaffoldingと、JDLでentities作って、
<code>jhipster spring-controller Foo</code>や<code>ng g component Bar</code>とかのcommandで取っ掛かりを作って、
そこから作り込んでいく、感じでしょうか。</p>
<p>Angular CLIがうまく動かなかった等あったのでメモ。
jhipsterのversionが変われば、こんな知識も不要になると思われますが。</p>
<ul>
<li>JDLでfield名はsnakeやhyphenationではなくcamelで。
DBだからhyphenかなと思ったんですが、
生成されたclassのfield名がcamelにならなかったので。</li>
<li>JDLでUserは特別なentity。
<a href="http://www.jhipster.tech/managing-relationships/">Manual</a>に書いてありました。
scaffoldingの次は取り敢えず
<a href="https://start.jhipster.tech/jdl-studio/">JDL Studio</a>でentity作成、import、
になるのに、解説すっ飛ばしてJDL見たので、なんだろう?って思うんですよね。</li>
<li>jhipster 4.13.3で入るAngular CLI(<code>./node_modules/@angular/cli/</code>)のversionは
1.6.0(<code>package.json</code>)でbug持ち(<code>@angular-devkit/core</code>が入らない)なので、
<code>ng g ...</code>が失敗します。<code>package.json</code>中の<code>@angular/cli</code>の
version numberを最新のもの(本執筆時点では1.6.6)に書き換え、
<code>yarn install</code>するとうまく行きました
(Angular CLIをglobalでinstallしてもlocalのversionのモノを使うのでダメ、
<code>@angular-devkit/core</code>を個別に<code>npm install ...</code>しても、
次から次へと足りないものが出て来て、
全部入れた挙句の果てに<code>yarn start</code>がコケるようになるのでダメ)。</li>
<li><code>ng g component Foo</code>としてそれを表示させるにはどうしたらいいんだろう? と悩みました。route作ってそこで表示させるべく、他のentityとか見よう見真似で<code>foo.route.ts</code>作ってpath直打ちして試したものの、表示されず。errorも何も出ないので、何が悪いのか分かりません。多分登録が届いてないんだろうとは思ってたんですけど、具体的にどこをどう直せばいいのかわけわかめです。<a href="https://stackoverflow.com/questions/46587247/adding-new-route-to-jhipster-using-angular-4">StackOverflow</a>に回答があったので出来ました。結局、0.<code>ng g component Foo</code>でcomponentを作る 1.<code>foo.route.ts</code>を作る(その際<code>Routes</code>で配列にするのではなく<code>Route</code>で単数に?) 2.<code>index.ts</code>を真似して作る(<code>foo.module</code>のimportは記載不要) 3.<code>foo.module.ts</code>を作る 4.<code>app.module.ts</code>に登録(その際Angular CLIが自動登録したcomponentは削除しないとtop pageが表示されず) →そもそもcomponentではなくmoduleをgenerateするべきだったのでしょうか。よくわかりませんが、scaffoldingの後のことはなかなか書いてないので、「こんなのわかんないよー」という感じです。</li>
</ul>
<p>JHipsterは「Java/Angular版Rails」か! とも思ったんですが、
もう出てだいぶ経つみたいですし、
でもまだそこまで洗練されてはいないのかなと。
Angularの難しさ、面倒臭さ、
とnode modules周りの変化が激しいのもあるためか、
使いこなすのはなかなか大変だと思います。</p>
]]></content></entry><entry><title type="html"><![CDATA[RPA and Sikuli]]></title><link href="http://u-ryo.github.io//blog/2018/01/30/rpa-and-sikuli/"/><updated>2018-01-30T12:00:47+09:00</updated><id>/blog/2018/01/30/rpa-and-sikuli/</id><content type="html"><![CDATA[<p>昨日、社内で「事務部門はRPA(Robotics Process Automation)を導入して業務効率化を図る」という発表があったので、どんな凄いことしてるのかと思ったら、要するに<a href="http://www.sikuli.org">Sikuli</a>のパクリなんですね<a href="https://www.asirrera.com/solution/">これ</a>。年間150万近く払ってこんなの使いたいなんて、よくわかんないですタダで出来るのに。</p>
<p>しかし、Sikuliに「ロボ・オペレータ」とかRobotics Process Automationとかご大層な名前を付けて、ITに疎い事務部門に売り付けるという発想は、凄いと思いました。それは思い付かなかったですねー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Unbelievable Coding]]></title><link href="http://u-ryo.github.io//blog/2018/01/16/unbelievable-coding/"/><updated>2018-01-16T14:42:29+09:00</updated><id>/blog/2018/01/16/unbelievable-coding/</id><content type="html"><![CDATA[<p>Androidのお仕事で、あるclassのcodeを読んでいて。</p>
<ul>
<li>onTouchListenerの上にonClickListenerを上書き<br  />
あるbuttonを<code>setOnTouchListener(this);</code>してて。
buttonを<code>onTouchListener</code>っていうのもなんですが、
<code>onTouch(...)</code>で更に<code>setOnClickListener(...);</code>してるという...</li>
<li>timer止めずに新しいinstanceを上書き<br  />
<code>CountDownTimer</code>をinstance fieldとして持ってて、
途中でnewしてるんですが、それが複数箇所あるんですよね...
直前にcancel処理とか特に無いし。大丈夫なのかこれ。</li>
<li>カタカナや"$","/"にtoLowerCase()/toUpperCase()してindexOf()<br  />
<code>"半角カタカナ".toLowerCase()</code>してから<code>indexOf(...)&gt;-1</code>して、
<code>contains(...)</code>と同じことしてました。<code>indexOf</code>はまだしも、
<code>toLowerCase</code>したからって
全角カタカナが半角カタカナになるわけじゃないのに。
え、まさか、とか思ってしまった自分が情けないです。
同様に、記号に対しても<code>"$".toLowerCase()</code>とか謎すぎます。</li>
<li>他の(inflateもincludeもしてない)View上のR.idをfindViewById()<br  />
当然<code>null</code>です<code>findViewById()</code>しても。実質無害なcodeではありますが。
どうやら他から何も考えずにコピペしたから、らしいです。</li>
<li>listの2度回し<br  />
なるべく一度で済むように書きますよねぇ、フツーは。
ちょっと違う処理をするから、なのか、
同じlistを直後に2度回して、って。
まー他でも同じtableのDB accessを3回してたりしますからねーこのcode。</li>
<li>1830秒?<br  />
随分謎なMagic Numberです。</li>
<li>loop回すのに中で値を上書き(結局見てるのは最後の値だけ)<br  />
<code>for(i in list){v = i}</code>みたいな。<code>v=list[lastIndex]</code>でいいじゃん。
そういうことされると意図が読めないんですよね。困ります。</li>
<li>loopの空回し<br  />
waitしたいみたいなんですが、
<code>while(true){if(!flag)break;}</code>ってこれじゃぁCPU無駄遣いでしょ。
改善したっていって<code>do{i=0;}while(!flag);</code>って、あのねー...</li>
<li><code>synchronized wait()</code>で同期
他Activity(dialog)に遷移させ、
その同期に<code>synchronized(this){wait();}</code>って使ってます。
そういうthread jugglingはやめて欲しい、です。
こういうのってホントはRXですよね。</li>
<li>method/field名が大文字で始まっててclass名と区別がつかない、
なんていうのは可愛い方で、もう気にもならなくなってますそういえば。
methodも長いし条件分岐も複雑で、
state patternとかなんて知らないんだろうなぁと。</li>
<li>というか全てがfat ActionでFragmentもなければApplicationもないという
(基本的には。後から「訳も分からずダーッとコピペした部分」にはありますが)。</li>
</ul>
<p>...というように。
こういうcodeと共に仕事するのは、嫌で嫌で仕方ありません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock and JMockit]]></title><link href="http://u-ryo.github.io//blog/2017/12/19/spock-and-jmockit/"/><updated>2018-01-16T10:02:12+09:00</updated><id>/blog/2017/12/19/spock-and-jmockit/</id><content type="html"><![CDATA[<p>バイトのtestで、Spockでさらっとtest書いて、
いざ全pattern cross check! と思ったら、
無限loopになるpatternが多くて。
<code>@Timeout</code>導入でサクッと、と思ったら、
loop回るのが早くて凄いmemoryと時間を食って、
<code>@Timeout</code>では抑えきれません。
うーむ、それじゃぁGroovyのmetaClassでmethodの振る舞いを変更だ!
と思ったら、どうやっても振る舞いが変わりません。
悩んだ末、GroovyのmetaClassでの再定義は、
外側のJava classには及ばない(Groovyの世界の中だけ)、と結論。
仕方無いじゃぁJMockitだ!
って思ったんですが、今度はSpockとJMockitは相容れないようで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Caused by: java.lang.UnsupportedOperationException: Attempted to redefine class loaded from custom class loader
</span></code></pre></td></tr></table></div></figure>
<p>なので<code>JAVA_OPTS=-javaagent:.../jmockit-1.37.jar</code>をつけて実行すると今度は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mockit.internal.ClassFile$NotFoundException: Unable to find class file for Test2$1
</span></code></pre></td></tr></table></div></figure>
<p>spockは諦めました。</p>
<p>ならばせめてJUnit5だ! と思ったんですが、<code>build.gradle</code>で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>junitAnt &#39;org.apache.ant:ant-junit4:1.10.1&#39;
</span></code></pre></td></tr></table></div></figure>
<p>と指定しているので、敢え無く撃沈。
調べるとどうも、JUnit5とAntを組み合わせる動きはないんですよね。
<a href="https://devlog.arksystems.co.jp/2017/12/12/4436/">それでも Ant を使いたい人のための JUnit 5</a>というのもありましたけど、これは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;java</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span> <span class="na">classname=</span><span class="s">&quot;org.junit.platform.console.ConsoleLauncher&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>で無理矢理実行してるだけですから、ちょっと違います。
こちとら、<code>build.gradle</code>から<code>ant.junitAnt(...)</code>で呼んでいるので、
<code>ConsoleLauncher</code>だと困るんです(→どうやって書いたらいいかよくわからない)。</p>
<p>結局、JUnit4 + JMockit で書きました。
<code>Timeout</code>や<code>ExpectedException</code>は<code>@Rule</code>にしてちょこっと今っぽくしましたけど、
そのくらいが関の山でした。</p>
<p><code>ant.junitAnt(...)</code>で<code>fork:true</code>にして、また更に
<code>junit4.jar</code>より<code>jmockit.jar</code>を先に書いておかないと
<code>IllegalStateException</code>が出る(<a href="http://cadeveloper.hatenablog.com/">gradle + jmockitでjava.lang.IllegalStateExceptionって出たので対応</a>)、
というのでそう書いたし<code>gradle --stacktrace</code>してload順確認したんですけど、
それでもException出たので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>jvmarg(line:&quot;-javaagent:${configurations.jmockit.asPath.split(&#39;:&#39;)[0]}&quot;)
</span></code></pre></td></tr></table></div></figure>
<p>を入れて漸く動きました。</p>
<p>けど、折角JMockit入れたのに、
やっぱり別の時には<code>Timeout</code>も必要で。
JUnit4だと<code>@Rule</code>つけて<code>Timeout.millis(200)</code>でいいんですね今。
そしたら、JMockitで振る舞い変えなくても、
GroovyでなくJavaなら<code>Timeout</code>だけで済むじゃーないですかー!
うぁーん。</p>
<p>あとはParameterized Testにしました。
<a href="https://github.com/Pragmatists/JUnitParams">JUnitParams</a>が簡便そうです。
何がいいって、<a href="https://github.com/junit-team/junit4/wiki/parameterized-tests">JUnit4標準の方法</a>だとinstance fieldがparameterになるので、
全methodについて回っちゃいませんか? というのが不安で。
JUnitParamsなら、明示的に単一methodに対してparameter指定できるので安心です。</p>
<p>...ダメです。JUnitParams使うと、Timeout効かないことがわかりました。
悲しい。</p>
]]></content></entry><entry><title type="html"><![CDATA[Dream of deth]]></title><link href="http://u-ryo.github.io//blog/2017/12/05/dream-of-deth/"/><updated>2018-01-16T10:02:12+09:00</updated><id>/blog/2017/12/05/dream-of-deth/</id><content type="html"><![CDATA[<p>自分でもどういうわけかわかりませんが、
殺される夢を見ました。
realな夢です。
おかげで、2時半過ぎに寝たばかりなのに、5時頃起きてしまいました。
確かに今は締切に追われて、というか過ぎちゃってて憔悴してますが、
だからといって...</p>
<p>夢なので整合性は無いでしょうけど。
場所は中東。
ナントカ師がナントカしちゃって、
その辺りは記憶の欠損がありますが、
何かその宗派がナントカ師を自派で殺すことに決めてしまい、
でもナントカ師は一日差で逃れてて、
ぼくはその玄関前にいて、
何だかよくわかんないけど殺し合いは嫌だから、
逃げ延びてくれるといいなぁ、とか少し思ったりしてたら、
右上のちょっとした階段の上から、
迷彩服を着たヒゲむくの若い男、
真田太平記の樋口角兵衛(榎木孝明)に似た感じで、でも外国人で。
なので言葉が通じなくて。
何かライフルのように長い銃口を向けてきたから、
違う! 違うよ! 殺さないで! 撃たないで!
と思って手を上にあげて、顔を覆ってあーとか思ったら、
後頭部から頭頂部へ2〜3発、
音は聞こえなかったけど頭の後ろ上の方が破裂する感じがして。
えー治るかなこれ、とか思いつつ、
急速に意識が低下して行く...
というところで逆に気が付きました。
死を諦観・受容する暇もなく、
何で?! ぼくこんなことで死んでっちゃうの!?
という感じでしたね振り返ってみると。
殺される理由なんて、殺される方にはわかる筈もなく、
何となく間違って、もしくは念の為殺されただけのような。
でも向こうは「いや、向かってきたから」とか「怪しい素振りがあったから」
とか言えば済む程度で。
死の直前のぼくの態度は、生に執着し、命を乞うようなとても情けない感じで、
こういう時でも毅然としているためには、
普段余程達観してないとならないのだな、
というのがわかりました。</p>
<p>何でこんな夢、見たんだろう?
前世? でも自動小銃で撃たれてるから現代ですよ。
輪廻転生なんて信じられないですし。
どこかで見たような景色でもないし、何で??
普段も夢、見てるんでしょうけど、
ぼくはいつも殆ど覚えてないですし、
しかもこれで目が覚めるなんて。
虫の知らせ??</p>
<h3>後日</h3>
<p>元同僚に話したら、<br  />
「ぼくも体調悪い時には見ます。ビルから突き落とされる夢とか」<br  />
なるほど! 確かに、ぼくも朝その時から悪寒はしてた感じなので、
悪寒の説明をつけるために、脳が勝手な物語を紡いだ、のかな。
だから単に体調が悪いというsignだったんでしょう。</p>
]]></content></entry><entry><title type="html"><![CDATA[Rx as Stream API]]></title><link href="http://u-ryo.github.io//blog/2017/12/01/rx-as-stream-api/"/><updated>2017-12-01T17:41:42+09:00</updated><id>/blog/2017/12/01/rx-as-stream-api/</id><content type="html"><![CDATA[<p>周知のように、Androidではlambdaは書けるようになりましたが
Stream APIのようにCollectionsを扱えません。
折角Java8で覚えたのに。
ですが、RxJavaを使うとほぼStream APIのように書けるんですねーへーーー。
<a href="https://qiita.com/disc99/items/1b2e44a1105008ec3ac9">非同期や並列処理にも役立つRxJavaの使い方</a>
おかげでloopを回さず一文になったので、
ifの条件節に直接書けるようになりました。
<code>Optional</code>も出来るんですね。
書いてありますが、キモは<code>toBlocking().single()</code>でしょうか。</p>
]]></content></entry><entry><title type="html"><![CDATA[CheckBox.checked drawable not shown]]></title><link href="http://u-ryo.github.io//blog/2017/12/01/checkbox-checked-drawable-not-shown/"/><updated>2017-12-01T17:04:47+09:00</updated><id>/blog/2017/12/01/checkbox-checked-drawable-not-shown/</id><content type="html"><![CDATA[<p><code>ListView</code>で、各行にcheckboxを表示させるような話があって。
暗い背景なので、defaultのdesignだと見にくいんですね。
なのでcustomの白っぽいのに差し替えようとしたんですが、
なかなかうまく行かなかったのです。
基本的には、<code>res/drawable/</code>に、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;selector</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_enabled=</span><span class="s">&quot;false&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_disabled&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;true&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_on&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;false&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_off&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;true&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_on_pressed&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;false&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_off_pressed&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/selector&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>と書いて(状態判定は上の行から順番になされる模様)、layoutで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;CheckBox</span>
</span><span class='line'>  <span class="na">android:id=</span><span class="s">&quot;@+id/historySelected&quot;</span>
</span><span class='line'>  <span class="na">style=</span><span class="s">&quot;@style/historyListCheckBox&quot;</span>
</span><span class='line'>  <span class="na">android:button=</span><span class="s">&quot;@drawable/selector_checkbox&quot;</span>
</span><span class='line'><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>というように参照すればいいんです。
が、それだとcheckしても絵が変わらなかったんですね。
別途<code>OnClickListener</code>に、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>checkbox.setButtonDrawable(checkbox.isChecked() ? R.drawable.ic_check_on : R.drawable.ic_check_off);
</span></code></pre></td></tr></table></div></figure>
<p>が必要でした、というのはまだわかるんですが、
これを書いても<code>ic_check_on</code>の絵にならなかったんですね(<code>ic_check_off</code>の絵のまま)。
なんでだろ～、1日程悩みました。</p>
<p>結局、
stackoverflowの<a href="https://stackoverflow.com/questions/34508164/cant-create-custom-arrayadapter-with-appcompat-elements-inside-of-it">Can't create custom arrayadapter with appcompat elements inside of it</a>に書いてあったんですけど、
<code>ListView</code>のAdapterを作る時の<code>Context</code>が、
<code>getApplicationContext()</code>で得られたものであったこと、
が敗因でした。<code>getApplication()</code>でもダメでした。
<code>this</code>でないと、<code>ic_check_on</code>がdrawされませんでした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>adapter = new SimpleAdapter(this, someList, R.layout.some_listview, new String[]{...}, new int[]{R.id.someId,...});
</span></code></pre></td></tr></table></div></figure>
<p><code>this</code>で引き回すと、使ってるfieldとか色々引きずるから
なるべく<code>getApplicationContext()</code>にしましょうね、
というのを聞いたことがあるのですが、
なるほどと思ってそうすると、
結構色んな箇所で出るべきものが出なくなるんですよね。
気を付けないとなりません。</p>
]]></content></entry></feed>