<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2015-11-10T08:05:57+00:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Developing and Building Cordova App]]></title><link href="http://u-ryo.github.io//blog/2015/11/10/developing-and-building-cordova-app/"/><updated>2015-11-10T08:05:57+00:00</updated><id>/blog/2015/11/10/developing-and-building-cordova-app/</id><content type="html"><![CDATA[<p>all cloud環境で、hybrid applicationsを開発する方法がわかりました。</p>
<ol>
<li><a href="http://c9.io">Cloud9</a>で作る</li>
<li><a href="https://github.com">GitHub</a>に置く</li>
<li><a href="https://build.phonegap.com">PhoneGap Builder</a>でbuild</li>
</ol>
<h3>Cloud9</h3>
<p>templateは何を選んでもnode.jsが付いてくるみたいです。
<a href="http://daniel.favand.net/2014/11/21/developing-ionic-cordova-apps-in-the-cloud-with-cloud9/">Developing Ionic (Cordova) apps in the cloud with Cloud9</a>
に従って、以下project nameを「firstproject」とします。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ npm -g install cordova ionic
</span><span class='line'>$ ionic start firstproject
</span><span class='line'>$ cd firstproject
</span></code></pre></td></tr></table></div></figure>
<p>これで準備が出来ます。
<a href="https://docs.c9.io/docs/ionic">official document</a>にもありますが、
<code>$ ionic start firstproject sidemenu</code>とすれば、
tabではなくsidemenu型のprototypeが用意されるようです。</p>
<h3>GitHub</h3>
<p>buildには、上述のように、PhoneGap Builderを使います。
そのためには、一度GitHubにpushせねばなりません。</p>
<p>まずGitHubに行って、repositoryを作ります。
その上で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m &quot;Initial commit&quot;
</span><span class='line'>$ git remote add origin https://github.com/u-ryo/firstproject.git
</span><span class='line'>$ git push -u origin master
</span></code></pre></td></tr></table></div></figure>
<h3>PhoneGap Builder</h3>
<p>そうしておいてから、
<a href="https://build.phonegap.com">PhoneGap Builder</a>(passwordは英小文字大文字8文字以上)に行って、
buildして、端末にはQR codeで読み込ませれば、
install、実行が出来ます。</p>
<p>はぁ〜、イマドキのアプリって、こういう風に作れちゃうんですねー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Controlling Unity on ubuntu through CLI]]></title><link href="http://u-ryo.github.io//blog/2015/11/10/controlling-unity-on-ubuntu-through-cli/"/><updated>2015-11-10T07:55:07+00:00</updated><id>/blog/2015/11/10/controlling-unity-on-ubuntu-through-cli/</id><content type="html"><![CDATA[<h3>Clock on the menu bar</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-date &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-day &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-seconds &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-year &quot;true&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>battery on the menu bar</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/indicator/power/show-time &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/power/show-percentage &quot;true&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>"En" on the menu bar(default language selection)</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/gnome/desktop/input-sources/current &quot;uint32 1&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>Wallpaper</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/gnome/desktop/background/picture-uri &quot;&#39;file:///usr/share/backgrounds/wallpaper_univcoop.jpg&#39;&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>The way to suppress other icons on the launcher</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/unity/launcher/favorites &quot;[&#39;application://firefox.desktop&#39;]&quot;
</span><span class='line'>$ dconf read /com/canonical/unity/launcher/favorites
</span></code></pre></td></tr></table></div></figure>
<h3>forbidden hud</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/compiz/integrated/show-hud &quot;[&#39;disabled&#39;]&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>To suppress remote content search</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/unity/lenses/remote-content-search &quot;&#39;none&#39;&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>Supress auto-mount</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/gnome/desktop/media-handling/automount &quot;&#39;false&#39;&quot;
</span><span class='line'>$ dconf write /org/gnome/desktop/media-handling/automount-open &quot;&#39;false&#39;&quot;
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Freetel Samurai Miyabi and the leather cover for it]]></title><link href="http://u-ryo.github.io//blog/2015/11/09/freetel-samurai-miyabi-and-the-leather-cover-for-it/"/><updated>2015-11-09T05:47:45+00:00</updated><id>/blog/2015/11/09/freetel-samurai-miyabi-and-the-leather-cover-for-it/</id><content type="html"><![CDATA[<p>実は、つい先月初めて自分のスマホを買いました。
<a href="https://www.freetel.jp/lp/samurai/">Freetel Samurai 雅</a>です。
直販ではなく、<a href="http://kakaku.com">kakaku.com</a>から19800円(税込)で買いました。
巷間の話から、モノが来るのは大分先? と覚悟していたんですけど、
割とすぐに来てくれました。
裏蓋が貧相、というレビューもありましたけど、
この値段でこのスペックなら、問題ないです。
かなりいいと思いますこれ。</p>
<p>ただ、裏蓋がツルツルなので、
胸ポケット入れてちょっと屈んだだけですぐ落ちちゃうんですね。
Nexus5と違って。
なので、ケース必須、と思って、注文しました。
出たばっかりの機種なので、
専用ケースは<a href="http://www.amazon.co.jp/freetel-SAMURAI-MIYABI-%E3%83%AC%E3%82%B6%E3%83%BC%E3%82%B1%E3%83%BC%E3%82%B9-%E6%A8%AA%E9%96%8B%E3%81%8D%E6%89%8B%E5%B8%B3%E3%82%BF%E3%82%A4%E3%83%97/dp/B016GHZTXI/ref=pd_sim_23_2?ie=UTF8&amp;dpID=41T8vh5dZKL&amp;dpSrc=sims&amp;preST=_AC_UL160_SR160%2C160_&amp;refRID=1M742B5NZF7BFR3SJAG9">レザーケースカバー 横開き手帳タイプ 2970円</a>
の一択でした。
あ、今では<a href="http://store.shopping.yahoo.co.jp/shizukawill/ft-miyabibl.html?sc_e=slga_pla">Yahoo!ショッピングで1980円</a>であるんですね。
半月前はそれ無かったので、レザーケースカバーを注文したんですけど、
配送は11月下旬頃。
のんびり待ってたら、
「幾つか早く入荷できることになったので、
レビュー書いてくれるのなら、
イヤホンジャック・USBジャック3セット付けて、
先に送りますよ」というので、
Amazonレビュー書くことにしました。
つい昨日猫ポスで届きました。</p>
<p>レザーケースは、胸ポケットに入れるにはちょっと大きいかなぁ、
と危惧していたのですが、意外に大丈夫、です。
一番求めていた、「ちょっ屈んだくらいで胸ポケットから落っこちる」
こともなくなりました。
仮に落ちても、このケースならちょっとやそっとじゃ壊れそうにありません。
専用ケースなので、本体もピッタリ入りますし。
これで格安スマホっぽさもかなり低減されるかと。
1980円のケースでも良さそうですが、
ともあれ何か本体防護はあった方が良いと思います。
そういう意味では、
納得の行く買い物でした。
ケースも本体も。</p>
]]></content></entry><entry><title type="html"><![CDATA[freenom (free DNS Registrar)]]></title><link href="http://u-ryo.github.io//blog/2015/11/06/freenom-free-dns-registrar/"/><updated>2015-11-06T01:08:44+00:00</updated><id>/blog/2015/11/06/freenom-free-dns-registrar/</id><content type="html"><![CDATA[<p>バイト先のProxyで、ある日突然自宅サーバが「ダイナミックDNSですといって蹴られるようになってしまいました。
IP直打ちでも、「数字IP指定です」みたいなことを言われて繋げてくれません。
お名前.COMにでもお金払うしかないのか、
と観念しかけたんですが、
探してみると、フリーであるんですね、無料ドメインも色々と。
突然無くなったりFacebookにリンク張れないものがあったり制限はあるようですが、
気軽に使えるので有難いです。
gmailアカウントだからなのか、何故か登録できませんでしたが、
他のアカウントでサインアップして、
所期の目的を達しました(バイト先Proxyから自宅サーバへアクセス出来ました)。</p>
<p><a href="http://www.freenom.com/ja/index.html">freenom</a>使ったんですが、
APIもあったり、殆どDDNSみたいです。
バイト先Proxyも、dyndns.orgは通すので、MyDNS狙い撃ち?!
ieServerドメインで試してみればよかったかもしれません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Secure Boot 3 (using signed grub in the official package)]]></title><link href="http://u-ryo.github.io//blog/2015/11/05/secure-boot-3-using-signed-grub-in-the-official-package/"/><updated>2015-11-06T00:36:50+00:00</updated><id>/blog/2015/11/05/secure-boot-3-using-signed-grub-in-the-official-package/</id><content type="html"><![CDATA[<h3>ubuntu公式パッケージのsigned grubを使う方法</h3>
<p>USBメモリに直接ubuntuをインストールするために、
8GBのUSBメモリを用意しました。
それさえあれば、至極簡単です。</p>
<ol>
<li>VirtualBox等で、USBメモリにubuntuを入れる(そのままだと2GBスワップになるので、適宜調整。インストール後は4GB程の使用量なので、最初から5GB程でもよいかも。VMをEFIにしておくのを忘れないように。あと先頭にvfat32のEFI用パーティションを)</li>
<li>リブートした後、<code>/etc/efi/ubuntu/</code>を<code>/etc/efi/BOOT</code>にリネーム</li>
<li><code>linux-signed-image-generic</code>も<code>grub2-efi-amd86-signed</code>も入っているので、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo cp -rpi /usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed /etc/efi/BOOT/BOOTx64.EFI
</span></code></pre></td></tr></table></div></figure></li>
<li>これでSecure BootなPCに挿してリブート</li>
</ol>
]]></content></entry><entry><title type="html"><![CDATA[Secure Boot 2 (using self-signed cert)]]></title><link href="http://u-ryo.github.io//blog/2015/11/05/secure-boot-2-using-self-signed-cert/"/><updated>2015-11-05T02:36:08+00:00</updated><id>/blog/2015/11/05/secure-boot-2-using-self-signed-cert/</id><content type="html"><![CDATA[<h3>訂正</h3>
<p>/EFI/ubuntu/... ではブート時に読み込まない、
と前回下記ましたが、efibootmgrで変更出来そうです。
が、今回はUSBメモリからのブートが要件なので、
efibootmgrは使えません。</p>
<h3>手法2</h3>
<p>「loopbackモジュールを含めたgrubを自力で署名する」
手法が漸くわかりました</p>
<ol>
<li><code>efitools</code>をapt-get installしておきます</li>
<li>自己署名証明書(pem形式とder形式)を作成します</li>
<li>必要なモジュールを含めた<code>grub</code>を作ります
(ここまでモジュール入れないとうまく行きませんでした。
<code>iso9660</code>と<code>cpio</code>くらいでいいような気はしますが下限は試してません)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ grub-mkimage -d /usr/lib/grub/x86_64-efi -o BOOTx64.EFI -O x86_64-efi -p &quot;&quot; part_gpt part_msdos ntfs ntfscomp hfsplus fat ext2 normal chain boot configfile linux multiboot efi_gop loopback linuxefi affs afs bfs btrfs cbfs cpio cpio_be exfat hfs iso9660 jf
</span></code></pre></td></tr></table></div></figure></li>
<li>出来たBOOTx64に自己署名証明書で署名します
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sbsign --key /etc/secureboot/key-material/test-key.rsa --cert /etc/secureboot/key-material/test-cert.pem BOOTx64.EFI
</span></code></pre></td></tr></table></div></figure></li>
<li>上記で出来る<code>BOOTx64.EFI.signed</code>を、USBメモリの<code>/EFI/BOOT/BOOTx64.EFI</code>としてコピーします</li>
<li>自己署名証明書(der形式)をUSBメモにコピーします</li>
<li>PCでUSBブートし、BIOSメニューから、自己署名証明書を読み込ませます</li>
</ol>
<p>これでUSBメモリ内のisoファイルから立ち上がるようになりました。</p>
<p>ただ、BIOSメニューに自己署名証明書を読み込ませるUIのない場合、
実機が今はないので試せないこともあり、どうするのかはよくわかりません。</p>
<p>cf.</p>
<ul>
<li><a href="http://qiita.com/kunichiko/items/12cbccaadcbf41c72735">技術者見習いの独り言 SecureBootとLinux</a></li>
<li><a href="https://wiki.ubuntu.com/SecurityTeam/SecureBoot">SecureBoot</a></li>
<li><a href="http://www.rodsbooks.com/refind/secureboot.html">The rEFInd Boot Manager: Managing Secure Boot</a></li>
<li><a href="https://www.suse.com/ja-jp/documentation/sles11/book_sle_admin/data/sec_uefi_secboot.html">SUSE document セキュアブート</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[encryption by GnuPG]]></title><link href="http://u-ryo.github.io//blog/2015/11/04/encryption-by-gnupg/"/><updated>2015-11-04T02:50:44+00:00</updated><id>/blog/2015/11/04/encryption-by-gnupg/</id><content type="html"><![CDATA[<p>GnuPGによる暗号化は、調べりゃいくらでも載ってますので、都度調べた方がいい感じです。</p>
<ol>
<li><code>gpg --gen-key</code>でキーを作成(これが結構面倒・時間かかる)</li>
<li><code>gpg --export mail@address -o outputfile</code> で公開鍵を出力して他人に渡す</li>
<li><code>gpg --import outputfile</code> で他人の公開鍵を入力</li>
<li><code>gpg --list-public-key</code>で受領者IDを確認</li>
<li><code>gpg -e -a -r ID... plain_file</code> で暗号化(-e:encrypt, -a:ascii, -r:receiver)</li>
<li><code>gpg --passphrase ... --batch encrypted_file</code> で復号</li>
</ol>
]]></content></entry><entry><title type="html"><![CDATA[Hybrid MBR/GPT for dual booting MBR/UEFI]]></title><link href="http://u-ryo.github.io//blog/2015/11/04/hybrid-mbr-gpt-for-dual-booting-mbr-uefi/"/><updated>2015-11-04T02:36:17+00:00</updated><id>/blog/2015/11/04/hybrid-mbr-gpt-for-dual-booting-mbr-uefi/</id><content type="html"><![CDATA[<p>BIOSブートとUEFIブートの両対応を求められました。</p>
<p>UEFIブートなので、GPT(GUID Partition Table)は必須です。
が、GPTだと旧来のMBRではないので、BIOSブートがこけます。
そこで、Hybridなるものがありますと。
これは、<code>gdisk</code>でしか作れません。
<code>r</code>で「recovery and transformation options (experts only)」に入って、
<code>h</code>(make hybrid MBR)で作ります。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo gdisk /dev/sdb
</span><span class='line'>
</span><span class='line'>GPT fdisk (gdisk) version 0.8.8
</span><span class='line'>
</span><span class='line'>Partition table scan:
</span><span class='line'>   MBR: protective
</span><span class='line'>   BSD: not present
</span><span class='line'>   APM: not present
</span><span class='line'>   GPT: present
</span><span class='line'>
</span><span class='line'>Found valid GPT with protective MBR; using GPT.
</span><span class='line'>
</span><span class='line'>Command (? for help): p
</span><span class='line'>Disk /dev/sdb: 7831552 sectors, 3.7 GiB
</span><span class='line'>Logical sector size: 512 bytes
</span><span class='line'>Disk identifier (GUID): 3BF2DA63-FB2F-4616-ACE6-694968477678
</span><span class='line'>Partition table holds up to 128 entries
</span><span class='line'>First usable sector is 34, last usable sector is 7831518
</span><span class='line'>Partitions will be aligned on 2048-sector boundaries
</span><span class='line'>Total free space is 4029 sectors (2.0 MiB)
</span><span class='line'>
</span><span class='line'>Number  Start (sector)    End (sector)  Size       Code  Name
</span><span class='line'>    1            2048         5734399   2.7 GiB     0700
</span><span class='line'>    2         5734400         7829503   1023.0 MiB  EF00
</span><span class='line'>
</span><span class='line'>Command (? for help): r
</span><span class='line'>
</span><span class='line'>Recovery/transformation command (? for help): p
</span><span class='line'>Disk /dev/sdb: 7831552 sectors, 3.7 GiB
</span><span class='line'>Logical sector size: 512 bytes
</span><span class='line'>    1            2048         5734399   2.7 GiB     0700
</span><span class='line'>    2         5734400         7829503   1023.0 MiB  EF00
</span><span class='line'>
</span><span class='line'>Recovery/transformation command (? for help): o
</span><span class='line'>
</span><span class='line'>Disk size is 7831552 sectors (3.7 GiB)
</span><span class='line'>MBR disk identifier: 0x00000000
</span><span class='line'>MBR partitions:
</span><span class='line'>
</span><span class='line'>Number  Boot  Start Sector   End Sector   Status      Code
</span><span class='line'>    1                     1      7831551   primary     0xEE
</span><span class='line'>
</span><span class='line'>Recovery/transformation command (? for help): h
</span><span class='line'>
</span><span class='line'>WARNING! Hybrid MBRs are flaky and dangerous! If you decide not to use one,
</span><span class='line'>just hit the Enter key at the below prompt and your MBR partition table will
</span><span class='line'>be untouched.
</span><span class='line'>
</span><span class='line'>Type from one to three GPT partition numbers, separated by spaces, to be
</span><span class='line'>Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N): n
</span><span class='line'>
</span><span class='line'>Creating entry for GPT partition #1 (MBR partition #1)
</span><span class='line'>Enter an MBR hex code (default 07):
</span><span class='line'>Set the bootable flag? (Y/N): n
</span><span class='line'>
</span><span class='line'>Creating entry for GPT partition #2 (MBR partition #2)
</span><span class='line'>Enter an MBR hex code (default EF):
</span><span class='line'>Set the bootable flag? (Y/N): y
</span><span class='line'>
</span><span class='line'>Unused partition space(s) found. Use one to protect more partitions? (Y/N): y
</span><span class='line'>Note: Default is 0xEE, but this may confuse Mac OS X.
</span><span class='line'>Enter an MBR hex code (default EE):
</span><span class='line'>
</span><span class='line'>Recovery/transformation command (? for help): w
</span><span class='line'>
</span><span class='line'>Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
</span><span class='line'>PARTITIONS!!
</span><span class='line'>
</span><span class='line'>Do you want to proceed? (Y/N): y
</span><span class='line'>OK; writing new GUID partition table (GPT) to /dev/sdb.
</span><span class='line'>
</span><span class='line'>Caution: More than one 0xEE MBR partition found. This can cause problems
</span><span class='line'>in some OSes.
</span><span class='line'>The operation has completed successfully.
</span><span class='line'>
</span><span class='line'>$ sudo gdisk /dev/sdb
</span><span class='line'>GPT fdisk (gdisk) version 0.8.8
</span><span class='line'>
</span><span class='line'>Partition table scan:
</span><span class='line'>   MBR: hybrid
</span><span class='line'>   BSD: not present
</span><span class='line'>   APM: not present
</span><span class='line'>   GPT: present
</span><span class='line'>
</span><span class='line'>Found valid GPT with hybrid MBR; using GPT.
</span><span class='line'>
</span><span class='line'>Command (? for help): q
</span></code></pre></td></tr></table></div></figure>
<p>その上で、grub-installします。
MBR用には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo mount /dev/sdb2 /mnt
</span><span class='line'>sudo grub-install --force --no-floppy --boot-directory=/mnt/boot /dev/sdb
</span><span class='line'>sudo vi /mnt/boot/grub/grub.cfg
</span><span class='line'>
</span><span class='line'>set timeout=3
</span><span class='line'>set default=0
</span><span class='line'>
</span><span class='line'>menuentry &quot;Run Ubuntu Live ISO&quot; {
</span><span class='line'>       set gfxpayload=keep
</span><span class='line'>       loopback loop (hd0,gpt2)/airscope2.iso
</span><span class='line'>       linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=/airscope2.iso splash --- debian-installer/language=ja keyboard-configuration/layoutcode?=jp keyboard-configuration/modelcode?=jp109
</span><span class='line'>       initrd (loop)/casper/initrd.lz
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>UEFI用には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo mount /dev/sdb2 /mnt
</span><span class='line'>sudo mkdir -p /mnt/EFI/BOOT/
</span><span class='line'>grub-mkimage -d /usr/lib/grub/x86_64-efi -o /mnt/EFI/BOOT/BOOTx64.EFI -O x86_64-efi -p &quot;&quot; part_gpt part_msdos ntfs ntfscomp hfsplus fat ext2 normal chain boot configfile linux multiboot efi_gop
</span><span class='line'>sudo cp -rp /usr/lib/grub/x86_64-efi /mnt/EFI/BOOT/
</span><span class='line'>sudo vi /mnt/EFI/BOOT/grub.cfg
</span><span class='line'>
</span><span class='line'>configfile (hd0,GPT2)/boot/grub/grub.cfg
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Secure Boot]]></title><link href="http://u-ryo.github.io//blog/2015/11/04/secure-boot/"/><updated>2015-11-05T01:57:06+00:00</updated><id>/blog/2015/11/04/secure-boot/</id><content type="html"><![CDATA[<p>Linux (ubuntu)でSecure Bootを求められました。
ubuntuには、Linux-signed-imageとかgrub-efi-amd64-signedとかっていう
パッケージがあるので、何か出来そうなんですけど、
じゃ具体的にどうやるの?
というのは意外と書いてないので、苦労してます。</p>
<p>取り敢えず、grub-installで「--secure-boot」というオプションがあるので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo grub-install --force --no-floppy --efi-directory=/mnt/ --target=x86_64-efi --uefi-secure-boot /dev/sdb
</span></code></pre></td></tr></table></div></figure>
<p>とすると、USBメモリには、/mnt/EFI/ubuntu/ の下にsignedなgrubx64.efiやshimx64.efiが入るんですが、
/EFI/ubuntu/... ではブート時に読み込まないので、
/EFI/BOOT/ にリネームし、
また、/EFI/BOOT/grubx64.efi(又はshimx64.efi) を/EFI/BOOT/BOOTX64.efi にリネームし、
/boot/grub/grub.cfg を、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>set timeout=3
</span><span class='line'>set default=0
</span><span class='line'>
</span><span class='line'>menuentry &quot;Run Ubuntu Live ISO&quot; {
</span><span class='line'>       set gfxpayload=keep
</span><span class='line'>       loopback loop (hd0,gpt1)/airscope3.iso
</span><span class='line'>       linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=/airscope3.iso splash --- debian-installer/language=ja keyboard-configuration/layoutcode?=jp keyboard-configuration/modelcode?=jp109
</span><span class='line'>       initrd (loop)/casper/initrd.lz
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>とすると、grubまでは立ち上がりました。
更にブートするには、loopbackモジュールが必要になり、
それはunsignedなので、そこで引っ掛かりますが、
仕組み上、signed grubでモジュールは使えない(使えてしまうとillegalなモジュールが入り込めてしまう)ので、</p>
<ol>
<li>loopbackモジュールを使わない</li>
<li>loopbackモジュールを含めたgrubを自力で署名する</li>
</ol>
<p>前者はUSBメモリをHDとして直接インストールすれば良さそうですが、
8GB以上の容量が必要になります。
現状手元にそんな容量のUSBメモリがありません。
後者は、かなり面倒そうです。Micro$osftに署名してもらうにはお金かかりそうですし、
自分で署名してそのキーをMOK?を使って云々という手法は、
まだ読み込んでません...</p>
]]></content></entry><entry><title type="html"><![CDATA[Parameters for FreeRDP]]></title><link href="http://u-ryo.github.io//blog/2015/10/30/parameters-for-freerdp/"/><updated>2015-10-30T05:15:27+00:00</updated><id>/blog/2015/10/30/parameters-for-freerdp/</id><content type="html"><![CDATA[<p>某所にFreeRDPのbootable USBを作って納入したのですが、
「壁紙を変えたい」と言われました。
デフォルト「wallpaperはon」と書いてありますけれども、
明示的に「+wallpaper」としないと、効かないようです。</p>
<p>また、「画面が時々ちらつく」と言われました。
どうやら、頻繁にreconnectが生じているための様子。
パケットキャプチャすると、
2秒おきにTCP Keepaliveを出していて、その後、
クライアント側からTCP RST ACKを出しているようです。
なぜ?
ともあれ、「+heartbeat」を指定すると、
頻繁なreconnectはおさまりました。
「-heartbeat」でも効果あったんですが、なぜ?</p>
]]></content></entry><entry><title type="html"><![CDATA[Too many open files]]></title><link href="http://u-ryo.github.io//blog/2015/10/30/too-many-open-files/"/><updated>2015-10-30T05:15:22+00:00</updated><id>/blog/2015/10/30/too-many-open-files/</id><content type="html"><![CDATA[<p>tomcat7が止まっていて、catalina.outを見ると、
<code>Too many open files</code>と言われていました。</p>
<ul>
<li>現状の確認 <code>$ ulimit -a</code></li>
<li>プロセス毎なので、<code>$ cat /proc/プロセス番号/limits</code></li>
<li>増やすには、/etc/init.d/tomcat7 で<code>ulimit -n 8192</code>等と追記してrestart</li>
<li><code>$ cat /proc/プロセス番号/limits</code>で確認</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Limitation of Koding]]></title><link href="http://u-ryo.github.io//blog/2015/10/30/limitation-of-koding/"/><updated>2015-10-30T05:14:27+00:00</updated><id>/blog/2015/10/30/limitation-of-koding/</id><content type="html"><![CDATA[<p>Kodingにも限界はあるんですね。
無料ではVMが常時起動ではない、
というのはendurableなんですが、
workplaceが一つしか作れないとは。
cordovaでハイブリッドアプリ作ってみたかったんですけど、
続きはCloud9で頑張ってみます。</p>
]]></content></entry><entry><title type="html"><![CDATA[importing CSV to Zaim]]></title><link href="http://u-ryo.github.io//blog/2015/10/28/importing-csv-to-zaim/"/><updated>2015-10-28T01:11:46+00:00</updated><id>/blog/2015/10/28/importing-csv-to-zaim/</id><content type="html"><![CDATA[<p>Zaimですが、よく見ますとCSVインポート機能はとうに付いてるんですね。
ただ、試してみますと、
セゾンのクレジットカード明細CSVって、
お店と品目が一緒くたに書いてあって、
インポートさせる時の欄指定がうまく出来ません。
思い余って、クレジットカードも連携させてみると、
綺麗に情報取れているという...
やはり利便性には敵いません。</p>
]]></content></entry><entry><title type="html"><![CDATA[ssh access to Koding]]></title><link href="http://u-ryo.github.io//blog/2015/10/28/ssh-access-to-koding/"/><updated>2015-10-28T01:20:19+00:00</updated><id>/blog/2015/10/28/ssh-access-to-koding/</id><content type="html"><![CDATA[<p>Kodingなんですが、sshで繋げてログインすることが出来るんですね。
びっくりポンです。</p>
<ol>
<li>~/.ssh/authorized_keys に手元のマシンのpublic keyを記述</li>
<li>Koding上のマシン名を左側のVM Settingsで確認(毎日変わる模様)</li>
<li>手元からssh(公開鍵認証のみ)</li>
</ol>
<p>tmuxも使えるので超便利です。
ただ、デフォルトのコントロールキーがC-bになっているので、
最初は戸惑います。
慣れ親しんだC-aに変えるには、
~/.tmux.conf
に</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>set-option -g prefix C-a
</span></code></pre></td></tr></table></div></figure>
<p>ちゃんと公式ドキュメントに書いてありました。<br  />
<a href="http://learn.koding.com/guides/using-tmux-on-koding/">Using Tmux on Koding</a><br  />
(一旦tmuxを全て終了させないと反映されません)</p>
]]></content></entry><entry><title type="html"><![CDATA[AuthType None]]></title><link href="http://u-ryo.github.io//blog/2015/10/27/authtype-none/"/><updated>2015-10-27T08:26:47+00:00</updated><id>/blog/2015/10/27/authtype-none/</id><content type="html"><![CDATA[<p>さっき同僚に聞かれて調べました。
apacheにおけるBasic認証/Form認証等を
子ディレクトリにおいては無効にしたい場合、
.htaccessに、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">Satisfy</span> <span class="k">Any</span>
</span></code></pre></td></tr></table></div></figure>
<p>と書けば良い、という説が諸所にあったのですが、
ちゃんとキャンセルするには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthType</span> <span class="k">None</span>
</span><span class='line'><span class="nb">Require</span> <span class="k">all</span> granted
</span></code></pre></td></tr></table></div></figure>
<p>とすべき、みたいです。
「AuthType None」だけだと、
「No authentication done but request not allowed
without authentication for /~u-ryo/test/test/.
Authentication not configured?」と言われて500
Internal Server Errorになってしまいます。</p>
<p>親ディレクトリではIP制限とBasic認証を同時にかけて、
子ディレクトリではIP制限だけ、
且つBasic認証のポップアップは出ないように
(IP制限で弾かれれば即403)、
という要件だったので、</p>
<h3>親</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthType</span> Basic
</span><span class='line'><span class="nb">AuthName</span> test
</span><span class='line'><span class="nb">AuthUserFile</span> password.txt
</span><span class='line'><span class="nb">require</span> valid-user
</span><span class='line'><span class="nb">Allow</span> from <span class="m">127.0.0.1</span>
</span><span class='line'><span class="nb">Satisfy</span> <span class="k">Any</span>
</span></code></pre></td></tr></table></div></figure>
<h3>子</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthType</span> <span class="k">None</span>
</span><span class='line'><span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'><span class="nb">Order</span> deny,allow
</span><span class='line'><span class="nb">Allow</span> from <span class="m">127.0.0.1</span>
</span><span class='line'><span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'><span class="nb">Satisfy</span> <span class="k">All</span>
</span></code></pre></td></tr></table></div></figure>
<p>といった感じで解決しました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Koding]]></title><link href="http://u-ryo.github.io//blog/2015/10/27/koding/"/><updated>2015-10-27T09:19:12+00:00</updated><id>/blog/2015/10/27/koding/</id><content type="html"><![CDATA[<p>今はコード書くのもブラウザでやるんですね。
<a href="https://koding.com/">Koding</a>で開発環境が、shellまで含めて、ブラウザで完結するなんて。
<a href="https://c9.io/">Cloud9</a>も試してみましたが、
無料で使える範囲では、Kodingの方が良かったですぼくにとっては。</p>
<ul>
<li>メモリが1GB(Cloud9では512MB)</li>
<li>ディスク容量も若干多い(Cloud9は1GB)</li>
<li>Grainを動かしてみたんですが、どちらでもOutOfMemoryErrorになったものの、Kodingではswapon出来た(Cloud9ではnot permittedと言われる)</li>
</ul>
<p>なるほど、これでChromebookでもバリバリ開発が出来るわけですか。
今や、ブラウザ上で画像編集や動画編集まで出来るとは。
(<a href="http://yukan-news.ameba.jp/20141113-17/">Chromebook購入後に、究極のPCへ変貌させるWebサービスたちが完璧過ぎ！</a>)
かなり置いてけぼりを食らっている感じです。</p>
<p>尚、この投稿は、Koding上で開いたworkspaceにgit cloneして環境を作り、付属のエディタで書いて、
grainwして生成しています。</p>
]]></content></entry><entry><title type="html"><![CDATA[Zaim]]></title><link href="http://u-ryo.github.io//blog/2015/10/27/zaim/"/><updated>2015-10-27T08:26:47+00:00</updated><id>/blog/2015/10/27/zaim/</id><content type="html"><![CDATA[<p>最近、家計簿アプリ「<a href="http://zaim.net/">Zaim</a>」がマイブームです。</p>
<p>銀行口座連携くらいでは驚かなかったんですけど、
OCRによる「レシート読み取り」がここまで出来るとは、
思っていませんでした。
セブンイレブン、ローソン等のコンビニ系レシートなら、
ほぼ一発で完璧に読み取ってくれます。
日付、内訳は勿論、店名も「セブンイレブン○○店」まで。
電話番号を読み取って、
それをインターネットで検索してるんですね。
なるほど。</p>
<p>当初はMoney Forwardを使っていたんですが、
レシートの内訳も管理したくて、
より利用者の多いZaimに乗り換えました。</p>
<p>zaimの銀行連携について、
<a href="http://qiita.com/kyasbal_1994/items/9becc9048a9a37f9be2e">セキュリティの不安を提起する</a>尤もな向きもあるようです。
そうですね、確かに。
Zaim側が生パスワード、保持してないと出来ない仕組ですから、
彼ら、持っちゃってますよね。
でも、便利なのでつい...
本当は、「自分でCSV落として食わせてね」だったと思いますけど、
それじゃぁここまで広がらなかったのでしょう。</p>
<p>それより、OCRがここまで進化していたとは。
おかげで、溜まりに溜まっていたレシートを、
うん百枚単位で片付けられました。
でも、こういうのってスマホを持ってないと気付かないものですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Created my blog by Grain]]></title><link href="http://u-ryo.github.io//blog/2015/10/26/created-my-blog-by-grain/"/><updated>2015-10-27T08:26:47+00:00</updated><id>/blog/2015/10/26/created-my-blog-by-grain/</id><content type="html"><![CDATA[<h2>Blog、はじめました</h2>
<p>非常に遅まきながら、blogを作ってみました。</p>
<p>きしださんの<a href="http://d.hatena.ne.jp/nowokay/20140225">2014-02-25(火) コミュニティに入るか入らないかでエンジニアとしての幸福度がかわる</a>を見まして、
なるほどそうだなぁと思い、
そのためには発信していかなきゃ、
ということで、
始めました。</p>
<p>blog環境は世に数多あれど、
editorで書きたい、
dataを手元に置いておきたい、
ということから、
Qiitaやはてぶ等ではなく、
Github Pagesを用いました。
Github Pagesというのがあってblogに使える、
というのも今回初めて知りました。
この場合の世の趨勢は「Github Pages + Jekyll」、
ただ数が多くなると重くなるということで、
最近は「Github Pages + Hugo」に乗り換える人が多いようですが、
Java屋さんとしては、
Gradleで行けるGrainというのがあるというのを知り、
それを使ってみました。
わかってしまえば、結構簡単に入ります。</p>
<ol>
<li><p>まず、https://github.com で自分のGithub Pages repository(必ず「ユーザーID.github.io」という名前)を作成します。
中身は空で構いません。</p>
</li>
<li><p>それから、GrainのOctopress用テーマを持ってきます。
これがGrainを含んでおり、また現状唯一のblog用のテーマです。
<a href="https://github.com/sysgears/grain-theme-octopress/releases">https://github.com/sysgears/grain-theme-octopress/releases</a>
で適宜最新版を確認してみて下さい。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ wget -O - https://github.com/sysgears/grain-theme-octopress/archive/v0.4.5.tar.gz|tar xvfz -
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>この状態で、プレビュー出来ます。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ cd grain-theme-octopress-0.4.5
</span><span class='line'>$ ./gradlew
</span></code></pre></td></tr></table></div></figure>
とすると、
<a href="http://localhost:4000/">http://localhost:4000/</a>
でプレビューできます。
(本当は「./grainw 」でプレビューなんですがうまく行きませんでした)</p>
</li>
<li><p>新しい記事を作成するには、以下のようにします。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ ./grainw create-post &#39;Any blog post title&#39;
</span></code></pre></td></tr></table></div></figure>
すると、
「./content/blog/yyyy-mm-dd-上で指定したタイトル.markdown」</p>
</li>
</ol>
<p>というfileが出来ます。それを編集します。</p>
<ol>
<li><p>Github Pagesにデプロイするには、
SiteConfig.groovy という設定ファイルの中に、
github のURLを書きます。
私の場合は、↓こうでした。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gh_pages_url</span> <span class="o">=</span> <span class="s1">&#39;git@github.com:u-ryo/u-ryo.github.io.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>
sshでgithubにアップロード出来るように、
<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a>
で手元のマシンのssh public keyを登録しておきます。</p>
</li>
<li><p>そうしておいてから、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span> <span class="o">./</span><span class="n">grainw</span> <span class="n">gendeploy</span>
</span></code></pre></td></tr></table></div></figure>
とすると、私(ユーザーID:u-ryo)の場合は、
<a href="http://u-ryo.github.io/">http://u-ryo.github.io/</a>
でblogが見られる、という塩梅です。</p>
</li>
<li><p>タイトル等このblogの設定は、
SiteConfig.groovy の中身を適宜変更すれば良いです。</p>
</li>
</ol>
<p>...というようなことを、これから少しずつ発信していきたいと思います。</p>
<h3>はまった点</h3>
<ul>
<li>grain-theme-octopress をgit cloneするとうまく行かず(./grainw generateで止まりました)、tar.gzファイルを落として展開するとうまく行った(./grainw generateが通った)</li>
<li>記事ヘッダの「author:」で、文字列はシングルクォートないしダブルクオーテーションで囲む必要がある(groovyで処理するので、「文字列」にしておかないと後でエラーになります)</li>
<li>emacsのバックアップファイル(拡張子の最後に「~」が付くもの)もblogファイルと見做されてしまうため、消す必要がある(また、書いている途中だと「.#〜」というロックファイルが出来るが、これがあるとプレビューが立ち上がらない)</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Post sample with code]]></title><link href="http://u-ryo.github.io//blog/2014/01/10/post-sample-with-code/"/><updated>2015-10-27T08:26:47+00:00</updated><id>/blog/2014/01/10/post-sample-with-code/</id><content type="html"><![CDATA[<!--more-->
<h2>Example with line numbers:</h2>
<h4>Code:</h4>
<p>&#096;&#096;&#096;groovy HelloWorld.groovy<br>
println "Hello, world!"<br>
&#096;&#096;&#096;</p>
<h4>Result:</h4>
<figure class='code'><figcaption><span>HelloWorld.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="s2">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Example without line numbers:</h2>
<h4>Code:</h4>
<p>&#096;&#096;&#096;groovy<strong>:nl</strong> HelloWorld.groovy<br>
println "Hello, world!"<br>
&#096;&#096;&#096;</p>
<h4>Result:</h4>
<figure class='code'><figcaption><span>HelloWorld.groovy</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="s2">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Gist tag]]></title><link href="http://u-ryo.github.io//blog/2014/01/10/gist-tag/"/><updated>2015-10-27T08:26:47+00:00</updated><id>/blog/2014/01/10/gist-tag/</id><content type="html"><![CDATA[<!--more-->
<h4>Code:</h4>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%=</span>
</span><span class='line'>    <span class="n">gist</span> <span class="nl">id:</span> <span class="err">&#39;</span><span class="n">dc3bf4796acd6a1439bc</span><span class="err">&#39;</span>
</span><span class='line'><span class="k">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<h4>Result:</h4>
<p>

<div id="gistdc3bf4796acd6a1439bc">
  <script src="https://gist.github.com/dc3bf4796acd6a1439bc.js"></script>
</div></p>
]]></content></entry></feed>