<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2016-02-19T09:30:28+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[minimal set for sinatra on heroku]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/minimal-set-for-sinatra-on-heroku/"/><updated>2016-02-19T09:30:28+09:00</updated><id>/blog/2016/02/19/minimal-set-for-sinatra-on-heroku/</id><content type="html"><![CDATA[<p>heroku久しぶりだったので、やり方忘れちゃいましたよ。</p>
<p>Cloud9上で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ cat Gemfile
</span><span class='line'>source &#39;https://rubygems.org&#39;
</span><span class='line'>gem &#39;sinatra&#39;
</span><span class='line'>
</span><span class='line'>$ cat Procfile
</span><span class='line'>web: exec ruby app.rb -p $PORT
</span><span class='line'>
</span><span class='line'>$ cat app.rb
</span><span class='line'>require &#39;sinatra&#39;
</span><span class='line'>
</span><span class='line'>get &#39;/&#39; do
</span><span class='line'>  &#39;Hello World!&#39;
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>
<p>最低この3ファイル、なんですが、
gitにcommitしてherokuにdeployするのは
あと自動生成される <code>Gemfile.lock</code> も必要になります。
<code>Gemfile.lock</code> は、一旦rubyを動かさないと出来ないのかな?
<code>ruby app.rb</code> で試せます。</p>
<p>herokuへは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ heroku create my-application
</span><span class='line'>$ git init
</span><span class='line'>$ git add Gemfile Gemfile.lock Procfile app.rb
</span><span class='line'>$ git commit -a
</span><span class='line'>$ git push heroku master
</span></code></pre></td></tr></table></div></figure>
<p>で上手く行く筈、なんですが、
git remoteを設定しないとダメかも。
その辺は適宜。</p>
]]></content></entry><entry><title type="html"><![CDATA[how to build my web application product]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/how-to-build-my-web-application-product/"/><updated>2016-02-19T09:15:26+09:00</updated><id>/blog/2016/02/19/how-to-build-my-web-application-product/</id><content type="html"><![CDATA[<h2>Private memo</h2>
<p>To build hondaPortal,
<code>cd</code> to hondaPortalView,
<code>bower install</code> and <code>npm install</code> first to set up javascript libraries.
And return to the parent directory and try <code>gradlew</code>.
If the build process encounters an error on imagemin in hondaPortalView,
I found a workaround at <a href="https://github.com/gruntjs/grunt-contrib-imagemin/issues/330">Fatal error: Cannot read property 'contents' of undefined #330</a>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>cd node_modules/grunt-contrib-imagemin
</span><span class='line'>npm install imagemin@4.0.0
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Java Decompiler]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/java-decompiler/"/><updated>2016-02-19T09:01:17+09:00</updated><id>/blog/2016/02/19/java-decompiler/</id><content type="html"><![CDATA[<p>Javaのdecompilerといえばjadが昔から有名ですが、jadってとうに開発止まってるんですね。
知りませんでした。1.5くらいから解析不能というのでは、
もうちょっと使えませんか。
今は<a href="http://jd.benow.ca/">JD-GUI</a>が簡便そうですが、
これとてJava8のlambda expressionや、そもそもLocal Method Classes(method内inner class?)に非対応とな。
Java8の昨今ではう～ん、です。
と思ったら、<a href="http://www.benf.org/other/cfr/">CFR</a>というのが使えるそうです。
実際試して、使えました。
<a href="http://www.javadecompilers.com/">online decompiler</a>もあるので、色々気軽に試せます。
良かった、今でもjava decompileは気軽に出来るわけですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[scp on emacs dired]]></title><link href="http://u-ryo.github.io//blog/2016/01/06/scp-on-emacs-dired/"/><updated>2016-01-06T00:26:05+09:00</updated><id>/blog/2016/01/06/scp-on-emacs-dired/</id><content type="html"><![CDATA[<h3>emacs上でのscp with tramp</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/scp:mickey:/mnt/u-ryo/photo/20151227/
</span></code></pre></td></tr></table></div></figure>
<p>というように、<code>scp</code>とした方が良いらしい。</p>
]]></content></entry><entry><title type="html"><![CDATA[rename files]]></title><link href="http://u-ryo.github.io//blog/2016/01/05/rename-files/"/><updated>2016-01-06T00:19:54+09:00</updated><id>/blog/2016/01/05/rename-files/</id><content type="html"><![CDATA[<h3>ファイル名一括置換</h3>
<p>「rename」を使えばよいとのことだったので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ rename &#39;IMG_&#39; &#39;img_0&#39; ~/photo/20151227/*.JPG
</span></code></pre></td></tr></table></div></figure>
<p>しかし、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Bareword &quot;IMG_&quot; not allowed while &quot;strict subs&quot; in use at (eval 1) line 1.
</span></code></pre></td></tr></table></div></figure>
<p>と言われて動かなかったので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>find /home/u-ryo/photo/20151227/ -name &quot;IMG_*.JPG&quot;|sed &#39;p;s|IMG_\([0-9][0-9][0-9][0-9]\).JPG|img_0\1.jpg|g&#39;|xargs -n2 mv
</span></code></pre></td></tr></table></div></figure>
<p>とすれば動いた。</p>
]]></content></entry><entry><title type="html"><![CDATA[ruby on heroku]]></title><link href="http://u-ryo.github.io//blog/2015/12/17/ruby-on-heroku/"/><updated>2015-12-19T23:46:53+09:00</updated><id>/blog/2015/12/17/ruby-on-heroku/</id><content type="html"><![CDATA[<p>11月から駒沢大学のCTCに派遣されて、
某A空輸の次期予約サイトのMonkey Testをやらされているんですが、
screen shotとかuploadするのに、何故か20kbという制限があります。
そんなの、Gimpとかフリーソフト使えば簡単なんですが、
入れさせてくれないんですよね。
なので、screen shotと撮るにはALT + PrintScreen、
編集はMicro$oft謹製のペイント、
pngでsave出来るようになっただけマシではありますが、
64bit colorでしか保存できないので、
sizeが無駄に大きくなっちゃって、
20kbなんてすぐ超えちゃうんですよね。
ImageMagick使えばそんなの、
<code>convert infile.png -colors 256 outfile.png</code>
で済むのに。</p>
<p>仕方無いので、縮小したりしていたんですが、
縮小すると何が書いてあるかわからないし。
そうだ、Web Applicationならinstallしなくてもいい、
と気付いたんですけど、
巷間のserviceに外部秘の画像を上げるのは気が引けたので、
なら自分で作ろうと。</p>
<p>オンプレミスなserverも持ってますが、
イマドキじゃないのと、
よく見たらオンプレミスserverにはImageMagickも入ってないですし。
まぁそれは<code>apt-get install</code>一発で行けるからいいんですけど、
shell scriptでconvertすればいいから、
cgiでちゃちゃっと書いちゃおう、と思ったんですが。
POSTされたfile dataをparseするのが面倒かな、
と思ったのと、あと443が開いてないんですね。
なので、herokuに上げよう、と。
そうなるとrubyかな、と思ったので、調べてやってみました。</p>
<p>herokuの公式ruby用sampleを元に作れそう、だったので、
調べて、sinatra使ってるってわかって、
あとImageMagickはherokuに元々入ってて、
rubyはrmagicを使えるらしいということで、やりました。</p>
<p>cf.</p>
<ol>
<li><a href="https://gist.github.com/konitter/5370904">Heroku導入メモ</a></li>
<li><a href="git://github.com/heroku/ruby-sample.git">ruby sample</a></li>
<li>あと<code>$ build</code>?</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ git commit -a
</span><span class='line'>$ git push heroku master
</span></code></pre></td></tr></table></div></figure>
<p>rmagicを使うには、以下の作業が必要でした。</p>
<ol>
<li>Gemfileに<code>gem 'rmagick', '~&gt;2.15.4', :require =&gt; 'RMagick'</code></li>
<li>c9上で<code>sudo apt-get install imagemagick libmagick++-dev</code></li>
</ol>
<p>POSTされたfile dataの取得は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image_filename = &quot;./#{params[:file][:filename]}&quot;
</span><span class='line'>imagedata = params[:file][:tempfile].read
</span></code></pre></td></tr></table></div></figure>
<p>image dataの取得は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image = Magick::Image.from_blob(imagedata).first
</span></code></pre></td></tr></table></div></figure>
<p>fileとしてのreturnは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>content_type = &#39;image/png&#39;
</span><span class='line'>attachment image_filename
</span></code></pre></td></tr></table></div></figure>
<p>image dataのbinary data取り出しは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image.to_blob
</span></code></pre></td></tr></table></div></figure>
<p>256色への減色は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mage.format = &quot;PNG8&quot;
</span></code></pre></td></tr></table></div></figure>
<p>とするだけで8bit colorで保存されます。</p>
<p>最終的には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>require &#39;sinatra&#39;
</span><span class='line'>require &quot;rmagick&quot;
</span><span class='line'>
</span><span class='line'>get &#39;/&#39; do
</span><span class='line'>  erb :index
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>post &#39;/&#39; do
</span><span class='line'>	if params[:file]
</span><span class='line'>	   image_filename = &quot;./#{params[:file][:filename]}&quot;
</span><span class='line'>	   imagedata = params[:file][:tempfile].read
</span><span class='line'>	   image = Magick::Image.from_blob(imagedata).first
</span><span class='line'>	   image.format = &quot;PNG8&quot;
</span><span class='line'>        content_type = &#39;image/png&#39;
</span><span class='line'>        attachment image_filename
</span><span class='line'>        image.to_blob
</span><span class='line'>	end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>
<p>あぁ、erbってのも初めて使いました。
ここへpostするためのplain htmlが書いてあります。</p>
]]></content></entry><entry><title type="html"><![CDATA[Beethoven Comic]]></title><link href="http://u-ryo.github.io//blog/2015/12/17/beethoven-comic/"/><updated>2015-12-18T00:39:49+09:00</updated><id>/blog/2015/12/17/beethoven-comic/</id><content type="html"><![CDATA[<p>昨日のDoodleがBeethovenのmini gameだったので、
ついそのまま検索していたら、
<a href="http://naxos.jp/special/no_unmei">ベートーヴェン4コマ劇場「運命と呼ばないで」</a>
というのを見付けました。
これ面白い! デス。
部屋汚い、(時々間違える?など)演奏が雑、でも情熱的、
ってのだめじゃーん。
でも天才ってそうなんでしょうね。
オヤジギャグとかいいなー。貧乏は嫌ですが。</p>
]]></content></entry><entry><title type="html"><![CDATA[Deploying to GAE]]></title><link href="http://u-ryo.github.io//blog/2015/11/17/deploying-to-gae/"/><updated>2015-11-17T23:10:47+09:00</updated><id>/blog/2015/11/17/deploying-to-gae/</id><content type="html"><![CDATA[<p>いやぁ、こんなに大変だとは。
web applicationをGAEにdeployするのって。
既に何度も過去にはやっているんですが、
久し振りにやると、なかなか上手く行かないです。</p>
<p>最初、<a href="https://c9.io">Cloud9</a>でやってみたら、
何度やってもresource(memory?)不足でappengine:updateが途中でkillされます。
仕方無いので、GAE連携がウリの<a href="https://codenvy.com">Codenvy</a>でやってみたんですが、
original jarにdependsしているんですけど、
それが上手く行かないんです。
<a href="http://docs.codenvy.com/user/technology-specific-features/#upload-local-libs">official manual</a>
見てrepository追加して、
directoryもgroupId、artifactId、versionと掘って配置して、
buildかけると読んではくれてるんですが、
何故か「jar; error in opening zip file」と言われてこけます。
改めてjar fileをuploadしたんですけど、
何度やってもダメ、同じerrorでした。
何故?</p>
<p>もう仕方無く、localでbuild、updateしようとすると、
今度は「Either the access code is invalid or the OAuth token is revoked.Details: invalid_grant」と言われて。
<a href="https://heroku.com">heroku</a>はCloud9でサクッとdeploy出来るのに。
やっぱりGAEはもう時代遅れでしょうか。
Java8未対応ですし無料分では。</p>
<p>結局、<code>~/.appcfg_oauth2_tokens_java</code>を消したら上手くOAuth再取得してくれました。
やれやれ、です。</p>
]]></content></entry><entry><title type="html"><![CDATA[Angular2 Tutorial]]></title><link href="http://u-ryo.github.io//blog/2015/11/15/angular2-tutorial/"/><updated>2015-11-15T15:58:25+09:00</updated><id>/blog/2015/11/15/angular2-tutorial/</id><content type="html"><![CDATA[<p>Angular2の<a href="https://angular.io/docs/ts/latest/quickstart.html">Tutorial</a>が凄いです。
すぐ使えて面白いです。
英語も平易ですし。
そこから<a href="https://angular.io/docs/ts/latest/guide/">Developer Guides</a>へも、
割と繋がってますし。完全に、ではないのが残念ですけど。
特にroutingの解説は、欲しいところです。
netで探せばAngular2の解説が幾つか日本語でも出て来ますが、
2015年3月4月くらいのものだと、
もうかなり大分違うので(<code>@Teplate</code>とかもうないでしょう?)、
気を付けないとなりません。
でも今からAngularやるなら、
もう来年からAngular2になることが分かっているので、
今更<code>$scope</code>とかやりたくないですよ。
まだまだα版なので、これからも大きく変わりそうですけど...</p>
]]></content></entry><entry><title type="html"><![CDATA[set my postfix able to send over OP25B(Outbound Port 25 Blocking) using Mailgun]]></title><link href="http://u-ryo.github.io//blog/2015/11/15/set-my-postfix-able-to-send-over-op25b-outbound-port-25-blocking-using-mailgun/"/><updated>2015-11-15T15:38:34+09:00</updated><id>/blog/2015/11/15/set-my-postfix-able-to-send-over-op25b-outbound-port-25-blocking-using-mailgun/</id><content type="html"><![CDATA[<p>OP25Bが始まってから、ってもう大分前のことですが、
自前でmailを送るのは諦めて、
GMailを経由して送ってました。
でも、GMailを経由すると、
Fromが強制的に自分のaccountになっちゃうんですよね。
だから、例えば自前serverで定義したMLも、
上手く機能しなくなっちゃいました。
もうそういうのは自前でやる時代じゃないのかな、
と諦観してたんですけど、
<a href="http://mailgun.com">Mailgun</a>を使えばspfとかcleanにして外に出してくれるんですね。
今頃になって知ったので、試してみました。</p>
<h3>cf.</h3>
<ul>
<li><a href="http://mjhd.hatenablog.com/entry/defeat-ob25p-with-mailgun">Mailgunを使ってOB25P対策(postfix)</a></li>
<li><a href="https://community.rackspace.com/products/f/28/t/63">Postfix SMTP relay setup for Sendgrid/Mailgun</a></li>
<li><a href="https://documentation.mailgun.com/quickstart-receiving.html#how-to-start-receiving-inbound-email">How to start receiving inbound email</a></li>
</ul>
<h3>自分でちょっとハマったところ</h3>
<ol>
<li>postfixのmain.cfで、<code>relayhost = [smtp.mailgun.net]:587</code>
と[]で囲う必要があった事(でも囲わなくても行けるみたいですよ
<code>/etc/postfix/password</code>の方でも囲わなければ)</li>
<li>MyDNSにおいて、spfを指定する場合には、Hostに<code>_spf</code>と入れなければならないこと
(MyDNSのlocal ruleでした)</li>
<li>DKIM(domainkey)の指定がなかなか反映されなかったようであること
(その他の項目は全て反映されてたし、
<code>$ host -t txt ...</code>で引くと見えてたので、大丈夫だろうと思ってたんですが、
そうでもなかったようです。
小一時間待ったら、認識されました。
ここが通らないとVerifiedにならず、使えないので、途方に暮れかけました)</li>
<li>受信の設定はroutesなるものを設定しないとならないこと
(MXを直接自前serverに向ければいいんですが、
mailgunで受信するにはどうしたらいいんだろう?
と思っていると、そういうこと[=routesを設定する必要がある]だったんですね)
自分は、GMailにforwardするようにしました。
そうすればGMail見てるだけで済みますので。</li>
</ol>
<p>久し振りに自前serverのmail logを見たら、
中国からのbrute force attackがずっと続いていたことがわかりました。
嫌なので、mail serverは落として、
GMailへのforwardingにすることにしました。</p>
]]></content></entry><entry><title type="html"><![CDATA[more package-list in emacs on ubuntu]]></title><link href="http://u-ryo.github.io//blog/2015/11/12/more-package-list-in-emacs-on-ubuntu/"/><updated>2015-11-12T22:52:50+09:00</updated><id>/blog/2015/11/12/more-package-list-in-emacs-on-ubuntu/</id><content type="html"><![CDATA[<p>emacsでmarkdownを書く時に、
markdown-modeが欲しいと思ったので、
<code>list-package</code>したら、
なかったんですね選択肢に。
調べると、<code>.emacs</code>に、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(require &#39;package)
</span><span class='line'>(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;http://melpa.milkbox.net/packages/&quot;))
</span><span class='line'>(add-to-list &#39;package-archives &#39;(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))
</span><span class='line'>(package-initialize)
</span></code></pre></td></tr></table></div></figure>
<p>が必要でした。</p>
<p>cf.<a href="http://qiita.com/catatsuy/items/5f1cd86e2522fd3384a0">init-loader.el と package.el を導入して快適 Emacs ライフ</a></p>
<h3>Preview</h3>
<p>あと、emacsで書いてpreviewだけ別にしたいな、
と思ったぼくには、
Chromeの<a href="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl">Markdown Preview Plus</a>
extentionが便利でした。
install後、
Manage extentionsで「Allow access to file URLs」にチェックを入れないとならない、
というのがハマりポイントでした。</p>
<h3>PDFへの変換</h3>
<p><a href="https://gist.github.com/bouzuya/5989695">Pandoc で Markdown から PDF へ変換</a>にある通り、
apt-getで入るpandocを使えば楽かなぁと。
header.texが必要というのがtrickyですね。
これもLuaLaTeXで変換出来ました。</p>
<p>header.tex</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>\usepackage{luatexja}
</span><span class='line'>\setmainfont{TakaoPMincho}
</span><span class='line'>\setsansfont{TakaoPGothic}
</span><span class='line'>\setmonofont{TakaoGothic}
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ pandoc --latex-engine=lualatex -o /tmp/test.pdf -H ~/header.tex /tmp/test.md
</span></code></pre></td></tr></table></div></figure>
<h3>Table</h3>
<p><a href="http://www.tablesgenerator.com/markdown_tables">Table Generator</a>というのがあります。
orgtbl-modeは、よくわからないので使ってません。</p>
<h3>online editor</h3>
<p>ってうか、既にbrowser上でedit/preview出来るもの、あるじゃないですか。
もう古い記事ですが、
<a href="http://yoshimov.com/list/markdown-online-editor-list/#wripe">Webブラウザで使えるMarkdownエディタの比較</a>を見ますと、
今はもっとあるんでしょうね...
2015年の記事もありますね。<a href="http://shgam.hatenadiary.jp/entry/2015/01/11/032651">ブラウザ上で使えるMarkdownエディタ</a></p>
<ul>
<li><a href="https://wri.pe/">wri.pe</a></li>
<li><a href="http://dillinger.io/">Online Markdown Editor - Dillinger, the Last Markdown Editor ever.</a></li>
<li><a href="http://www.ctrlshift.net/project/markdowneditor/">Online Markdown Editor</a></li>
</ul>
<p>wri.pe凄いですね。
GitHub accountで入れますし、
スッと使えるinterfaceを感じます。</p>
]]></content></entry><entry><title type="html"><![CDATA[LuaLaTeX]]></title><link href="http://u-ryo.github.io//blog/2015/11/12/lualatex/"/><updated>2015-11-12T21:36:56+09:00</updated><id>/blog/2015/11/12/lualatex/</id><content type="html"><![CDATA[<p>表題の通り、LaTeXをよく使っています。
pLaTeXが長かったので、
LuaLaTeXについてのメモ書きです。
例によって、ちょっと調べればいくらでも出てますけど。</p>
<ol>
<li>preambleは<code>\documentclass{ltjsarticle}</code></li>
<li>usepackageは<code>luatexja</code> (<code>\usepackage{luatexja}</code>)</li>
<li><code>\usepackage[dvipdfmx]{graphics}</code></li>
<li>pngを貼りこむ時には、普通に<code>\includegraphics{XXX.png}</code>で良いが、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ extractbb XXX.png
</span></code></pre></td></tr></table></div></figure></li>
<li><code>zw</code>は<code>\zw</code>に</li>
</ol>
<p>reportもMarkdownで書いてみようかな...</p>
]]></content></entry><entry><title type="html"><![CDATA[Normalizer in Java]]></title><link href="http://u-ryo.github.io//blog/2015/11/12/normalizer-in-java/"/><updated>2015-11-12T12:03:09+09:00</updated><id>/blog/2015/11/12/normalizer-in-java/</id><content type="html"><![CDATA[<p>同僚に、「JavaのNormalizer.NFCとかって何?」と聞かれたので、
調べてみました。
<a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20071130/288467/">ITproの櫻庭さんの解説</a>が
わかりやすいかも、と思ったんですが、</p>
<blockquote><p>互換合成 Normalize Function Compativle Composite (NFKC)</p>
</blockquote>
<p>とかって、スペルミスもあるし、そもそも<a href="http://www.unicode.org/reports/tr15/">原典</a>と違うじゃん、
ということに気付いて。</p>
<ul>
<li>Normalization Form D (NFD)    Canonical Decomposition</li>
<li>Normalization Form C (NFC)    Canonical Decomposition,followed by Canonical Composition</li>
<li>Normalization Form KD (NFKD)  Compatibility Decomposition</li>
<li>Normalization Form KC (NFKC)  Compatibility Decomposition,followed by Canonical Composition</li>
</ul>
<p>Canonical Equivalent(正準等価性)が「か+゛」=「が」
Compatibility Equivalent(互換等価性)が「ｶ」=「カ」
なので、</p>
<ul>
<li>「Canonical Decomposition」(正準分解)を「「が」→「か+゛」にすること」</li>
<li>「Canonical Composition」(正準合成)を「「か+゛」→「が」にすること」</li>
<li>「Compatibility Composition」(互換合成)を「「ｶ」を「カ」とすること」</li>
</ul>
<p>と読めばいいのでは?</p>
<p>だから例えば、「NFKC」は、
「「ｶ」を「カ」としてから「か+゛」→「が」にすること」</p>
<p>気を付けたいのは、「Compatibility Composition」というのはない! ということですね。
だからよく読むと、各所にある日本語の解説は怪しいかも、です。</p>
<p><a href="http://tech.albert2005.co.jp/blog/2014/11/21/mco-normalize/">文字コード地獄秘話 第3話：後戻りの効かないUnicode正規化</a>の解説が良さげです。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">groovy:</span><span class="mi">000</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nn">java.text.*</span>
</span><span class='line'><span class="o">===&gt;</span> <span class="n">java</span><span class="o">.</span><span class="na">text</span><span class="o">.*</span>
</span><span class='line'><span class="nl">groovy:</span><span class="mi">000</span><span class="o">&gt;</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;ç¥ã¨ï¨ãã²Â¼ã&quot;</span>
</span><span class='line'><span class="o">===&gt;</span> <span class="err">ç¥ã¨ï¨ãã²Â¼ã</span>
</span><span class='line'><span class="nl">groovy:</span><span class="mi">000</span><span class="o">&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">Normalizer</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">Normalizer</span><span class="o">.</span><span class="na">Form</span><span class="o">.</span><span class="na">NFD</span><span class="o">))</span>
</span><span class='line'><span class="err">ç¥ã¨ç¥ãã²Â¼ã</span>
</span><span class='line'><span class="o">===&gt;</span> <span class="kc">null</span>
</span><span class='line'><span class="nl">groovy:</span><span class="mi">000</span><span class="o">&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">Normalizer</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">Normalizer</span><span class="o">.</span><span class="na">Form</span><span class="o">.</span><span class="na">NFC</span><span class="o">))</span>
</span><span class='line'><span class="err">ç¥ã¨ç¥ãã²Â¼ã</span>
</span><span class='line'><span class="o">===&gt;</span> <span class="kc">null</span>
</span><span class='line'><span class="nl">groovy:</span><span class="mi">000</span><span class="o">&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">Normalizer</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">Normalizer</span><span class="o">.</span><span class="na">Form</span><span class="o">.</span><span class="na">NFKD</span><span class="o">))</span>
</span><span class='line'><span class="err">ç¥ã¨ç¥ã¢ãã¼ã</span><span class="o">(</span><span class="err">æ</span><span class="o">)</span><span class="mi">1</span><span class="err">â</span><span class="mi">4</span><span class="err">ã</span>
</span><span class='line'><span class="o">===&gt;</span> <span class="kc">null</span>
</span><span class='line'><span class="nl">groovy:</span><span class="mi">000</span><span class="o">&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">Normalizer</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">Normalizer</span><span class="o">.</span><span class="na">Form</span><span class="o">.</span><span class="na">NFKC</span><span class="o">))</span>
</span><span class='line'><span class="err">ç¥ã¨ç¥ã¢ãã¼ã</span><span class="o">(</span><span class="err">æ</span><span class="o">)</span><span class="mi">1</span><span class="err">â</span><span class="mi">4</span><span class="err">ã</span>
</span><span class='line'><span class="o">===&gt;</span> <span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Codenvy for GAE]]></title><link href="http://u-ryo.github.io//blog/2015/11/11/codenvy-for-gae/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/11/codenvy-for-gae/</id><content type="html"><![CDATA[<p><a href="http://codenvy.com">Codenvy</a>はGAEに直接deploy出来るからいい、
って読んだんですけど(<a href="http://libro.tuyano.com/index3?id=912006">もうEclipseはいらない? codenvy IDEによるクラウド開発 (1/6)</a>)、
じゃぁっていうんで使ってみたら、
うーん、command lineが使えないので、
JARなprojectとかうまく動かせない(buildしても成果物をどうやって取り出すのか、
どうやってoptionつけて実行して試せるのか)感じでした。
あと、月20時?しかtest起動、buildが出来ないみたいですね。</p>
<p><a href="http://c9.io">Cloud9</a>ではGAE連携できないのかな、
と調べてみると、GAEってgitでもdeploy出来るって?!
へーと思ってGAEを見てみると、今は出来ないみたいですね...
Google Cloud Consoleからソースの閲覧っていメニュー、
無くなってます。
まぁ、普通にcommand叩けば良いのかな? という感じです。</p>
<p><a href="https://koding.com/">Koding</a>も、
無料だと1プロジェクトしか作れませんが、
どうせGitHubに置いておくので、
とっかえひっかえすればいいのかなぁ。
でも流石に面倒そうですよねぇ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Disqus on this blog]]></title><link href="http://u-ryo.github.io//blog/2015/11/10/disqus-on-this-blog/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/10/disqus-on-this-blog/</id><content type="html"><![CDATA[<p>当初、このblogにはコメント欄がありませんでした。
<a href="http://disqus.com">Disqus</a>を使える、
ということが他の人のblogを見てわかって、
うちでもSiteConfig.groovyをよく見たら、
<code>disqus</code>って項目、
あるんですね。<code>short_name</code>を入れるんですが、
Disqusに登録したのはちょっと前の事だったので、
<code>short_name</code>って何の事なのか最初よくわかりませんでした。
改めてDisqusに入って、Settings見て、漸く思い出しました。
自分で入れたんですね最初に。</p>
<p>しかし、<code>short_name</code>を設定しても、
"We were unable to load Disqus."と言われて出てきませんでした。
DisqusのSettingsでちゃんとURLやtrusted domain指定してるのに...
随分悩みました。
結局、SiteConfig.groovyで、
environments → prod → url を指定してなかったのが、原因でした。
Disqusは、「どのURLからのaccessか」をparameterから見てますから、
ここがSetup → Basic → Site Identity → Website URL と一致してないと
ならないんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Developing and Building Cordova App]]></title><link href="http://u-ryo.github.io//blog/2015/11/10/developing-and-building-cordova-app/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/10/developing-and-building-cordova-app/</id><content type="html"><![CDATA[<p>all cloud環境で、hybrid applicationsを開発する方法がわかりました。</p>
<ol>
<li><a href="http://c9.io">Cloud9</a>で作る</li>
<li><a href="https://github.com">GitHub</a>に置く</li>
<li><a href="https://build.phonegap.com">PhoneGap Builder</a>でbuild</li>
</ol>
<h3>Cloud9</h3>
<p>templateは何を選んでもnode.jsが付いてくるみたいです。
<a href="http://daniel.favand.net/2014/11/21/developing-ionic-cordova-apps-in-the-cloud-with-cloud9/">Developing Ionic (Cordova) apps in the cloud with Cloud9</a>
に従って、以下project nameを「firstproject」とします。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ npm -g install cordova ionic
</span><span class='line'>$ ionic start firstproject
</span><span class='line'>$ cd firstproject
</span></code></pre></td></tr></table></div></figure>
<p>これで準備が出来ます。
<a href="https://docs.c9.io/docs/ionic">official document</a>にもありますが、
<code>$ ionic start firstproject sidemenu</code>とすれば、
tabではなくsidemenu型のprototypeが用意されるようです。</p>
<h3>GitHub</h3>
<p>buildには、上述のように、PhoneGap Builderを使います。
そのためには、一度GitHubにpushせねばなりません。</p>
<p>まずGitHubに行って、repositoryを作ります。
その上で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m &quot;Initial commit&quot;
</span><span class='line'>$ git remote add origin https://github.com/u-ryo/firstproject.git
</span><span class='line'>$ git push -u origin master
</span></code></pre></td></tr></table></div></figure>
<h3>PhoneGap Builder</h3>
<p>そうしておいてから、
<a href="https://build.phonegap.com">PhoneGap Builder</a>(passwordは英小文字大文字8文字以上)に行って、
buildして、端末にはQR codeで読み込ませれば、
install、実行が出来ます。</p>
<p>はぁ〜、イマドキのアプリって、こういう風に作れちゃうんですねー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Controlling Unity on ubuntu through CLI]]></title><link href="http://u-ryo.github.io//blog/2015/11/10/controlling-unity-on-ubuntu-through-cli/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/10/controlling-unity-on-ubuntu-through-cli/</id><content type="html"><![CDATA[<h3>Clock on the menu bar</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-date &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-day &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-seconds &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/datetime/show-year &quot;true&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>battery on the menu bar</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/indicator/power/show-time &quot;true&quot;
</span><span class='line'>$ dconf write /com/canonical/indicator/power/show-percentage &quot;true&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>"En" on the menu bar(default language selection)</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/gnome/desktop/input-sources/current &quot;uint32 1&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>Wallpaper</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/gnome/desktop/background/picture-uri &quot;&#39;file:///usr/share/backgrounds/wallpaper_univcoop.jpg&#39;&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>The way to suppress other icons on the launcher</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/unity/launcher/favorites &quot;[&#39;application://firefox.desktop&#39;]&quot;
</span><span class='line'>$ dconf read /com/canonical/unity/launcher/favorites
</span></code></pre></td></tr></table></div></figure>
<h3>forbidden hud</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/compiz/integrated/show-hud &quot;[&#39;disabled&#39;]&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>To suppress remote content search</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /com/canonical/unity/lenses/remote-content-search &quot;&#39;none&#39;&quot;
</span></code></pre></td></tr></table></div></figure>
<h3>Supress auto-mount</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ dconf write /org/gnome/desktop/media-handling/automount &quot;&#39;false&#39;&quot;
</span><span class='line'>$ dconf write /org/gnome/desktop/media-handling/automount-open &quot;&#39;false&#39;&quot;
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Freetel Samurai Miyabi and the leather cover for it]]></title><link href="http://u-ryo.github.io//blog/2015/11/09/freetel-samurai-miyabi-and-the-leather-cover-for-it/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/09/freetel-samurai-miyabi-and-the-leather-cover-for-it/</id><content type="html"><![CDATA[<p>実は、つい先月初めて自分のスマホを買いました。
<a href="https://www.freetel.jp/lp/samurai/">Freetel Samurai 雅</a>です。
直販ではなく、<a href="http://kakaku.com">kakaku.com</a>から19800円(税込)で買いました。
巷間の話から、モノが来るのは大分先? と覚悟していたんですけど、
割とすぐに来てくれました。
裏蓋が貧相、というレビューもありましたけど、
この値段でこのスペックなら、問題ないです。
かなりいいと思いますこれ。</p>
<p>ただ、裏蓋がツルツルなので、
胸ポケット入れてちょっと屈んだだけですぐ落ちちゃうんですね。
Nexus5と違って。
なので、ケース必須、と思って、注文しました。
出たばっかりの機種なので、
専用ケースは<a href="http://www.amazon.co.jp/freetel-SAMURAI-MIYABI-%E3%83%AC%E3%82%B6%E3%83%BC%E3%82%B1%E3%83%BC%E3%82%B9-%E6%A8%AA%E9%96%8B%E3%81%8D%E6%89%8B%E5%B8%B3%E3%82%BF%E3%82%A4%E3%83%97/dp/B016GHZTXI/ref=pd_sim_23_2?ie=UTF8&amp;dpID=41T8vh5dZKL&amp;dpSrc=sims&amp;preST=_AC_UL160_SR160%2C160_&amp;refRID=1M742B5NZF7BFR3SJAG9">レザーケースカバー 横開き手帳タイプ 2970円</a>
の一択でした。
あ、今では<a href="http://store.shopping.yahoo.co.jp/shizukawill/ft-miyabibl.html?sc_e=slga_pla">Yahoo!ショッピングで1980円</a>であるんですね。
半月前はそれ無かったので、レザーケースカバーを注文したんですけど、
配送は11月下旬頃。
のんびり待ってたら、
「幾つか早く入荷できることになったので、
レビュー書いてくれるのなら、
イヤホンジャック・USBジャック3セット付けて、
先に送りますよ」というので、
Amazonレビュー書くことにしました。
つい昨日猫ポスで届きました。</p>
<p>レザーケースは、胸ポケットに入れるにはちょっと大きいかなぁ、
と危惧していたのですが、意外に大丈夫、です。
一番求めていた、「ちょっ屈んだくらいで胸ポケットから落っこちる」
こともなくなりました。
仮に落ちても、このケースならちょっとやそっとじゃ壊れそうにありません。
専用ケースなので、本体もピッタリ入りますし。
これで格安スマホっぽさもかなり低減されるかと。
1980円のケースでも良さそうですが、
ともあれ何か本体防護はあった方が良いと思います。
そういう意味では、
納得の行く買い物でした。
ケースも本体も。</p>
]]></content></entry><entry><title type="html"><![CDATA[freenom (free DNS Registrar)]]></title><link href="http://u-ryo.github.io//blog/2015/11/06/freenom-free-dns-registrar/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/06/freenom-free-dns-registrar/</id><content type="html"><![CDATA[<p>バイト先のProxyで、ある日突然自宅サーバが「ダイナミックDNSですといって蹴られるようになってしまいました。
IP直打ちでも、「数字IP指定です」みたいなことを言われて繋げてくれません。
お名前.COMにでもお金払うしかないのか、
と観念しかけたんですが、
探してみると、フリーであるんですね、無料ドメインも色々と。
突然無くなったりFacebookにリンク張れないものがあったり制限はあるようですが、
気軽に使えるので有難いです。
gmailアカウントだからなのか、何故か登録できませんでしたが、
他のアカウントでサインアップして、
所期の目的を達しました(バイト先Proxyから自宅サーバへアクセス出来ました)。</p>
<p><a href="http://www.freenom.com/ja/index.html">freenom</a>使ったんですが、
APIもあったり、殆どDDNSみたいです。
バイト先Proxyも、dyndns.orgは通すので、MyDNS狙い撃ち?!
ieServerドメインで試してみればよかったかもしれません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Secure Boot 3 (using signed grub in the official package)]]></title><link href="http://u-ryo.github.io//blog/2015/11/05/secure-boot-3-using-signed-grub-in-the-official-package/"/><updated>2015-11-12T09:45:57+09:00</updated><id>/blog/2015/11/05/secure-boot-3-using-signed-grub-in-the-official-package/</id><content type="html"><![CDATA[<h3>ubuntu公式パッケージのsigned grubを使う方法</h3>
<p>USBメモリに直接ubuntuをインストールするために、
8GBのUSBメモリを用意しました。
それさえあれば、至極簡単です。</p>
<ol>
<li>VirtualBox等で、USBメモリにubuntuを入れる(そのままだと2GBスワップになるので、適宜調整。インストール後は4GB程の使用量なので、最初から5GB程でもよいかも。VMをEFIにしておくのを忘れないように。あと先頭にvfat32のEFI用パーティションを)</li>
<li>リブートした後、<code>/etc/efi/ubuntu/</code>を<code>/etc/efi/BOOT</code>にリネーム</li>
<li><code>linux-signed-image-generic</code>も<code>grub2-efi-amd86-signed</code>も入っているので、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo cp -rpi /usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed /etc/efi/BOOT/BOOTx64.EFI
</span></code></pre></td></tr></table></div></figure></li>
<li>これでSecure BootなPCに挿してリブート</li>
</ol>
]]></content></entry></feed>