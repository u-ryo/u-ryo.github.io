<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2023-09-10T17:20:45+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Get Refresh Token for Google API]]></title><link href="http://u-ryo.github.io//blog/2023/09/10/get-refresh-token-for-google-api/"/><updated>2023-09-10T15:03:23+09:00</updated><id>/blog/2023/09/10/get-refresh-token-for-google-api/</id><content type="html"><![CDATA[]]></content></entry><entry><title type="html"><![CDATA[Get Refresh Token for Google API]]></title><link href="http://u-ryo.github.io//blog/2023/09/10/get-refresh-token-for-google-api/"/><updated>2023-09-10T17:20:45+09:00</updated><id>/blog/2023/09/10/get-refresh-token-for-google-api/</id><content type="html"><![CDATA[<p>何かいつの間にかGoogle APIの認証方法が変わってて、security上の理由からというので仕方ないんでしょうけど。
<code>AUTHORIZATION_CODE</code>を得ようと、以前のように↓のURLにaccessすると、
https://accounts.google.com/o/oauth2/v2/auth?response<em>type=code&amp;client</em>id=...apps.googleusercontent.com&amp;redirect<em>uri=urn:ietf:wg:oauth:2.0:oob&amp;scope=https://www.googleapis.com/auth/photoslibrary&amp;access</em>type=offline
<code>アクセスをブロック: ... のリクエストは無効です</code>
と出て、あれ?!と。</p>
<blockquote><p>エラー 400: invalid_request
The out-of-band (OOB) flow has been blocked in order to keep users secure. Follow the Out-of-Band (OOB) flow migration guide linked in the developer docs below to migrate your app to an alternative method.
で、<a href="https://developers.google.com/identity/protocols/oauth2/resources/oob-migration?hl=ja">帯域外（OOB）フロー移行ガイド</a>へ誘導され。
このoobフローはなくなったと!? んじゃどうせぃっていうんじゃねん。
「デスクトップクライアント」に相当するから、<a href="https://developers.google.com/identity/protocols/oauth2/native-app?hl=ja#redirect-uri_loopback">ループバック IP アドレス（localhost または 127.0.0.1）フロー</a>に飛ばされたものの、こっちもなくなってて、<a href="https://developers.google.com/identity/protocols/oauth2/resources/loopback-migration?hl=ja">ループバック IP アドレスフローの移行ガイド</a>に飛ばされて、結局library使う方法しか書いてなくて。こちとら、shell scriptで使いたいんですけど。<code>refresh_token</code>欲しいだけなのに、なんでこんなに苦労せなかんの??🤔
...って嘆いても仕方ないので、library使って<code>refresh_token</code>取得だけします。
ちょっとめんどくさいんですけど、local環境を汚染しない形で。
参考:
- <a href="https://qiita.com/sey323/items/4c7140efaed750e690eb">PythonからGooglePhotoに画像や動画をアップロード</a>
- <a href="https://qiita.com/sey323/items/875c0ab1585044772ab2#%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BD%9C%E6%88%90">PythonからGoogleDriveにファイルをアップロード</a></p>
</blockquote>
<p>Google APIの<a href="https://console.cloud.google.com/apis/credentials">認証情報のpage</a>から「OAuthクライアントをダウンロード」して<code>client_secret.json</code>として保存。
``<code>
ここで</code>w3m<code>が開くので、</code>Q<code>を押して閉じるとURLが表示され、そこをChromeなりで開いて、突き進んで承認します。
そうすると、http://localhost:8080/?state=.... へ回されて止まるので、</code>C-a<code>で別screenを開いて、そこで</code>w3m 'http://localhost:8080/?state=...'<code>とすると、</code>The authentication flow has completed. You may close this window.<code>と言われます。徐に元のscreenに戻ると</code>credential<code>objectができているので、</code>credential.refresh<em>token<code>とすると、漸く</code>REFRESH</em>TOKEN<code>を得られます。1時間有効な</code>ACCESS_TOKEN<code>は</code>credentail.token`で得られます。
これらを使うと、やっと以前のようにshell scriptで回せるようになります。ふぅ。</p>
]]></content></entry><entry><title type="html"><![CDATA[gradlew stopped]]></title><link href="http://u-ryo.github.io//blog/2021/07/11/gradlew-stopped/"/><updated>2021-07-11T01:12:30+09:00</updated><id>/blog/2021/07/11/gradlew-stopped/</id><content type="html"><![CDATA[<p>実に久し振りにこのblogを書こうとして、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>./grainw create-post &#39;some title&#39;
</span></code></pre></td></tr></table></div></figure>
<p>としたら、<code>gradle-1.8.jar</code>を取りに行って404 not found食らって動きません。
この<a href="https://github.com/sysgears/grain">grain</a>って古いしもう更新止まってるし、先見の明なかったなぁということなんですが、もうちょっと本気で原因究明です。
https://services.gradle.org/distributions/ はあるのになぜ404? と思ったら、<code>http://...</code>で取りに行ってました。gradlewのgradleが古すぎる?
<code>grainw</code>のどこで止まってるか、debug print入れて割り出すと、<code>./gradlew gendeps</code>でした。これをversion 6.8.1のgradleで手動でやってみる(<code>gradle gendeps</code>)と、<code>build.gradle</code>の<code>line: 78</code>で止まります。なんで?と思って調べると、<a href="https://qiita.com/Yu-s/items/13a6a8db8dc191bb3b42">「Cannot add task 'wrapper' as a task with that name already exists.」が出た</a>にあった通り、でした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>task wrapper(type: Wrapper) {
</span></code></pre></td></tr></table></div></figure>
<p>を</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>wrapper {
</span></code></pre></td></tr></table></div></figure>
<p>にすれば動きました。良かった。
<code>gradle wrapper</code>で<code>./gradlew</code>を更新して、<code>./grainw</code>も復活しました。</p>
]]></content></entry><entry><title type="html"><![CDATA[ansible for docker]]></title><link href="http://u-ryo.github.io//blog/2021/07/11/ansible-for-docker/"/><updated>2021-07-11T15:40:40+09:00</updated><id>/blog/2021/07/11/ansible-for-docker/</id><content type="html"><![CDATA[<p>ansibleのlocalでの開発環境といえばvagrant+virtualboxですが、dockerでいいんじゃねぇの?と思って色々試行錯誤してみました。何度も挫けて、もう駄目かと思いましたけど、幾つもの山を越え、ついに出来ましたですよ!</p>
<figure class='code'><figcaption><span>docker.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">[</span><span class="nv">docker_host</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">[container]</span>
</span><span class='line'><span class="l-Scalar-Plain">eiger-local</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>playbooks/docker.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">no</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ansible_python_interpreter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/Users/ryo-umetsu/.anyenv/envs/pyenv/shims/python</span>
</span><span class='line'>    <span class="c1"># ansible_python_interpreter: /usr/bin/python3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy amazonlinux docker</span>
</span><span class='line'>      <span class="l-Scalar-Plain">docker_container</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">amazonlinux</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">eiger-local</span>
</span><span class='line'>        <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/sys/fs/cgroup:/sys/fs/cgroup:ro</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">57017:27017</span>
</span><span class='line'>        <span class="l-Scalar-Plain">expose</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">57017</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tty</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>        <span class="l-Scalar-Plain">detach</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>        <span class="l-Scalar-Plain">privileged</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>        <span class="c1"># capabilities:</span>
</span><span class='line'>        <span class="c1">#   - SYS_ADMIN</span>
</span><span class='line'>        <span class="c1"># sysctl:</span>
</span><span class='line'>        <span class="c1">#   vm.swappiness: 1</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh -c &#39;yum -y install procps systemd-sysv file &amp;&amp; exec /sbin/init &amp;&amp; systemctl restart&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">adding host</span>
</span><span class='line'>      <span class="l-Scalar-Plain">add_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=&quot;eiger-local&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">wait</span>
</span><span class='line'>      <span class="l-Scalar-Plain">wait_for</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">delay</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>
</span><span class='line'>        <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">eiger-local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">setup_mongodb_password</span><span class="p-Indicator">:</span> <span class="kt">!vault</span> <span class="p-Indicator">|</span>
</span><span class='line'>      <span class="no">$ANSIBLE_VAULT;1.1;AES256</span>
</span><span class='line'>          <span class="no">39356533306331333763353433363335343961653335373762623630653361623034646232633837</span>
</span><span class='line'>          <span class="no">6164306666656436653636643333363261646662356666640a636462346635323164633365376637</span>
</span><span class='line'>          <span class="no">39303832396638336664653439326536386235323262303733653563653766353263623032386538</span>
</span><span class='line'>          <span class="no">3135623166613363630a343734666666323830663838653962663032386337626635396563383230</span>
</span><span class='line'>          <span class="no">6266</span>
</span><span class='line'>    <span class="c1"># setup_mongodb_password: &quot;test&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ansible_python_interpreter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/bin/python</span>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="s">&quot;../roles/create_data_directory&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="s">&quot;../roles/setup_mongodb&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="s">&quot;../roles/configure_logrotate&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="s">&quot;../roles/configure_swap&quot;</span>
</span></code></pre></td></tr></table></div></figure>
<p>凄いknow-how詰まってます。</p>
<ul>
<li><code>connection: local</code>とすると<code>ssh</code>経由じゃなく直接command叩いてくれる</li>
<li><code>connection: docker</code>とすると<code>docker exec</code>で叩いてくれる(のでtargetに<code>authorized_keys</code>とか<code>sshd</code>とか不要)</li>
<li><code>localhost</code>では<code>gather_facts: no</code>とする(これをしないと<code>ansible_swaptotal_mb</code>とか<code>ansible_memtotal_mb</code>といった<a href="https://docs.ansible.com/ansible/2.9_ja/user_guide/playbooks_variables.html#fact">システムから検出される変数: Fact (ファクト)</a>が埋められない)</li>
<li><code>ansible_python_interpreter: /usr/bin/python3</code>は<code>python</code> binaryを探す順序があって、<code>/usr/bin/python</code>を先に見つけてしまい、version 2を使ってしまうのを防ぐため。Macだと<code>/usr/bin/python</code>がpython2で、python3は<code>/usr/bin/python3</code>なので。ここのversionが合わないと、<code>The error was: No module named 'requests'"</code>と言われて何が悪いのかさっぱりだった。基本的には<code>pip3 install docker</code>が足りなかったのだが、その他に、このようにansibleが自分で見つけて使っているpythonのversionと自分がcommand lineで使っていて<code>pip install</code>したpythonのversionがずれていると、このように言われる、ことがわかった。その他にもinventoryで指定することもcommand line optionで指定することも出来る。command line optionで<code>-e ansible_python_interpreter=/usr/bin/python3</code>とするのが最も柔軟だが、これはplaybooks中の値を全て上書きするので、やはり注意が必要だった。pythonってversionややこしくて...</li>
<li><code>setup_mongodb_password: !vault |</code>は<a href="https://docs.ansible.com/ansible/2.9/user_guide/playbooks_vault.html#single-encrypted-variable">Single Encrypted Variable</a>で<code>echo -n test|ansible-vault encrypt_string --vault-password-file vault_password.txt --encrypt-vault-id default --stdin setup_mongodb_password</code>のように使う(<a href="https://qiita.com/park-jh/items/91bf48848e366c79a61b#variable%E3%82%921%E9%A0%85%E7%9B%AE%E3%81%A0%E3%81%91%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%99%E3%82%8B">ansible-vaultで暗号化しよう。</a>)</li>
<li><code>docker_container:</code>はmodule名で、古い文献だと<code>docker:</code>になっていて今は効かないので注意。中で指定できるものは<a href="https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module">community.docker.docker_container – manage docker containers</a>に挙がっている。<code>privileged: yes</code>は、container内で<code>sysctl vm.swappiness=1</code>(defaultは60)をされるので。<code>sysctl:</code>というoptionもあるのだけれど、そこで指定できる(whitelistにある)のは<code>net.*</code>とか<code>kernel.*</code>の一部だけだそう(<a href="https://docs.docker.jp/engine/reference/commandline/run.html#currently-supprted-sysctls">サポート中の sysctl</a>)。</li>
<li><code>command: sh -c 'yum -y install procps systemd-sysv file &amp;&amp; exec /sbin/init'</code>は、playbook中で<code>systemctl</code>を設定するものがあるから。<code>Restart=always</code>にしたいんですよね要するに。でも、そうするとdockerに<code>systemd</code>(<code>initd</code>)が動いていねばならず、そういえばdockerって普通はそんなのなかったな、どうやるんだ? <a href="https://qiita.com/mach3/items/33f2b234babe679c759f">調べる</a>と、</li>
<li><code>systemd-sysv</code>をinstallする必要</li>
<li><code>/sys/fs/cgroup:/sys/fs/cgroup:ro</code>のdevice mountが必要<ul>
<li>macにはそんなdirectoryはないのに大丈夫なのが不思議</li>
</ul>
</li>
<li>最後は<code>/sbin/init</code></li>
<li>↑これではcontainerが数秒で倒れるので更に調べると<code>exec /sbin/init</code>(これどこで見たんだっけなぁ感動したなぁStackOverflowだった気が。他では全然書いて無くて、よく見つけたもんだ)</li>
<li><code>wait_for:</code>がないと、docker内にまだ<code>yum install</code>とか終わりきってないのにどんどん次に進んでしまい、<code>service.name:mongod,service.enabled:true</code>の時に「<code>mongod</code>というserviceはない」といって落ちてしまうので。ホントはちゃんと何かを待ちたかったんだけど、何を待ったらいいのか不明でした。processかなと思ったんですが、processのwaitって<a href="https://www.middlewareinventory.com/blog/ansible-wait_for-examples/">pid fileの存在有無を確認する</a>みたいな。いゃー、<code>systemd</code>というか<code>init</code>ってpid fileなんてないんですけど。network port待つ例は数多あれど。仕方ないのでただ10秒待つように。<code>timeout:10</code>は不要かと思いきや、ないとずっと待ってました。</li>
<li>これを<code>ansible-playbook -vvv -i docker.ini playbooks/docker.yml</code>と実行するんですが、dockerでやる場合は<code>ansible/ansible-runner</code>使って、<code>docker run --rm --name=ansible -v $PWD:/work -w /work -v /var/run/docker.sock:/var/run/docker.sock ansible/ansible-runner sh -c 'pip3 install docker&amp;yum install -y yum-utils;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo;yum install -y docker-ce docker-ce-cli containerd.io;ansible-playbook -i docker.ini playbooks/docker.yml'</code>と、CentOS8 baseのansible-runnerにdockerを入れねばならず、またunix socketを共有しないとなりませんでした。CentOS8に<code>yum install docker</code>するとpodmanが入りやがるんですよね。podmanってMacじゃ動かねぇっつーの! podmanだと<code>hosts:eiger-local</code>の<code>gather_facts</code>でDocker version checkに失敗して落ちるんですよね。<a href="https://discussion.fedoraproject.org/t/podman-broken-on-silverblue-podman-complains-kernel-not-supporting-overlay-fs-backing-file-system-is-unsupported-for-this-graph-driver/25403/2">Podman broken on Silverblue? Podman complains kernel not supporting overlay fs (backing file system is unsupported for this graph driver)</a>見て<code>sed -i "s/#mount_program/mount_program/" /etc/containers/storage.conf</code>加えても、<code>Error: mount /var/lib/containers/storage/overlay:/var/lib/containers/storage/overlay, flags: 0x1000: operation not permitted</code>。うーん。逆に、docker containerにansibleを入れる方がsimpleでした。即ち、<code>docker run --rm --name=ansible -v $PWD:/work -w /work -v /var/run/docker.sock:/var/run/docker.sock docker sh -c 'apk add ansible py3-pip;pip3 install docker;ansible-playbook -i docker.ini playbooks/docker.yml'</code>ですね。</li>
</ul>
<h2>参考サイト</h2>
<ul>
<li><a href="https://techblog.gmo-ap.jp/2016/09/23/docker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92ansible%E3%81%A7%E3%83%97%E3%83%AD%E3%83%93%E3%82%B8%E3%83%A7%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%97%E3%81%9F/">ansibleを使ってDockerコンテナをプロビジョニングしたお話</a></li>
<li><a href="https://qiita.com/gosarami/items/e1600292aa260444d3df">ansible-playbookでdockerコンテナをプロビジョニングしてみた</a></li>
<li><a href="https://inamuu.com/ansible%E3%81%A7docker%E3%81%B8%E3%83%97%E3%83%AD%E3%83%93%E3%82%B8%E3%83%A7%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">Ansibleでdockerへプロビジョニングする</a></li>
<li><a href="https://techblog.gmo-ap.jp/wp-content/uploads/2016/09/77a5ba13cea567e2af8323cbfa5a2286.pdf">ansibleを使ってDockerコンテナをプロビジョニングする</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module">community.docker.docker_container – manage docker containers</a></li>
<li><a href="https://rheb.hatenablog.com/entry/ansible_interpreter_discovery">Ansible2.8の新機能1 - Interpreter Discovery</a></li>
<li><a href="https://qiita.com/muddydixon/items/d2982ab0846002bf3ea8">Docker privileged オプションについて</a></li>
<li><a href="https://qiita.com/osamunmun/items/1786aac5904439522d72">Dockerコンテナ上でsysctlでカーネルパラメータを変更する方法</a></li>
<li><a href="https://docs.docker.jp/engine/reference/commandline/run.html#currently-supprted-sysctls">サポート中の sysctl</a></li>
<li><a href="https://qiita.com/ma2shita/items/f1a68a3f909c5cee7869">Dockerコンテナ内のnet.core.somaxconnをいじる方法</a></li>
<li><a href="https://blog.ymyzk.com/2017/01/docker-compose-sysctls/">Docker Compose でカーネルパラメータを設定する</a></li>
<li><a href="https://moznion.hatenadiary.com/entry/2018/09/01/224626">Linux Kernel 4.12以前であればhostマシンのsysctlの値がDocker container環境に引き継がれるかどうか検証した</a></li>
<li><a href="https://qiita.com/hiroyuki_onodera/items/398c1331b157e5b4b588">Ansible: ターゲットノードでpython3を使用するansible.cfg設定は、ansible<em>python</em>interpreterでは無くinterpreter_python</a></li>
<li><a href="https://kamatama41.hatenablog.com/entry/2019/06/17/001009">DockerのUbuntuコンテナでsystemdを動かす</a></li>
<li><a href="https://qiita.com/mach3/items/33f2b234babe679c759f">Docker amazonlinux2 で systemctl を使いたい人生だった</a></li>
<li><a href="https://qiita.com/kawanet/items/d856b7b9eb8ceccac4d7">Docker for MacでAmazon Linux 2でsystemd</a></li>
<li><a href="https://www.middlewareinventory.com/blog/ansible-wait_for-examples/">Ansible wait_for module examples</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[google photo api]]></title><link href="http://u-ryo.github.io//blog/2019/06/02/google-photo-api/"/><updated>2020-01-11T00:58:08+09:00</updated><id>/blog/2019/06/02/google-photo-api/</id><content type="html"><![CDATA[<p>一日千枚とか写真撮る人だと写真がすぐ溜まっちゃうんですよね。
backupは無限の<a href="https://photos.google.com">Google Photos</a>に、ということで、前はPicasaのAPI、<code>upload_gphots</code>を使ってたんですけど、もう無くなっちゃっていて。どうしよう、途方に暮れていました。暫くぶりに探すと、丁度1年程前からGoogle Photo APIが整備されたようで、良かったです。ずっと待っていました。
<a href="https://qiita.com/zaki-lknr/items/97c363c12ede4c1f25d2">[追記あり] Google Photos APIsでアルバム作成と写真のアップロード</a>と<a href="https://qiita.com/wo_k_harada/items/7327971a2414040e5a86">Google Photoを業務システムのクラウドストレージとして使った結果</a>、<a href="https://developers.google.com/photos/library/guides/list">本家API Document</a>を参考に早速使ってみます。</p>
<h2>ACCESS_TOKENの取得</h2>
<ul>
<li><a href="https://developers.google.com/photos/library/guides/get-started">APIの有効化</a></li>
<li><a href="https://console.developers.google.com/">Google Developer Console</a>から「認証情報」→「OAuth2.0クライアントID」無ければ上の「認証情報を作成」pulldown menuから「OAuthクライアントID」(「ウェブアプリケーションの種類」は「その他」)で作成</li>
<li>上記「クライアントID」「クライアント シークレット」をメモ</li>
<li>次のURLに<code>$CLIENT_ID</code>を入れてbrowserでaccess、AUTHORIZATION_CODEを取得 (<code>https://accounts.google.com/o/oauth2/v2/auth?response_type=code&amp;client_id=$CLIENT_ID&amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;scope=https://www.googleapis.com/auth/photoslibrary&amp;access_type=offline</code> (SCOPEはGoogle PhotoでのR/W accessの場合は<code>https://www.googleapis.com/auth/photoslibrary</code>)</li>
<li>以下のようにして、<code>ACCESS_TOKEN</code>及び<code>REFRESH_TOKEN</code>を得る
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ AUTHORIZATION_CODE</span><span class="o">=</span>4/wnmGpTh__1zdrgdjmPWyetUI7C1mvsjRrA_IyZmwY7aSeYppD9X_9iB
</span><span class='line'><span class="nv">$ CLIENT_ID</span><span class="o">=</span>952391557281-s8b8ditnocfu590fi0ntsfk76rbmkm80.apps.googleusercontent.com
</span><span class='line'><span class="nv">$ CLIENT_SECRET</span><span class="o">=</span>k6XPLuryMWUtKDKmS1cYgW0r
</span><span class='line'><span class="nv">$ REDIRECT_URI</span><span class="o">=</span>urn:ietf:wg:oauth:2.0:oob
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;code=$AUTHORIZATION_CODE&quot;</span> --data <span class="s2">&quot;client_id=$CLIENT_ID&quot;</span> --data <span class="s2">&quot;client_secret=$CLIENT_SECRET&quot;</span> --data <span class="s2">&quot;redirect_uri=$REDIRECT_URI&quot;</span> --data <span class="s2">&quot;grant_type=authorization_code&quot;</span> --data <span class="s2">&quot;access_type=offline&quot;</span> https://www.googleapis.com/oauth2/v4/token
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;access_token&quot;</span>: <span class="s2">&quot;ya29.GlsOB-ebr6NrI78UemOPHcm1-jdw0XkxD8iiSqE-Bh5xB_Sx8bhKsRhRyz7gqJy45A-HIF6s6GF0j5wz0dmNppVqEMhtUurAwfbe-xgEsR5MZFjoIY3ONOx8zd4Q&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;expires_in&quot;</span>: 3600,
</span><span class='line'>  <span class="s2">&quot;refresh_token&quot;</span>: <span class="s2">&quot;1/8LrGRLdBaFJYHlOr0rEAyZcgC9yDl2PcZZyrbqoxc7c&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;scope&quot;</span>: <span class="s2">&quot;https://www.googleapis.com/auth/photoslibrary&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;token_type&quot;</span>: <span class="s2">&quot;Bearer&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></li>
<li><code>ACCESS_TOKEN</code>は1時間しか有効でないので、適宜<code>REFRESH_TOKEN</code>を使って更新
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ REFRESH_TOKEN</span><span class="o">=</span>1/8LrGRLdBaFJYHlOr0rEAyZcgC9yDl2PcZZyrbqoxc7c
</span><span class='line'><span class="nv">$ CLIENT_ID</span><span class="o">=</span>952391557281-s8b8ditnocfu590fi0ntsfk76rbmkm80.apps.googleusercontent.com
</span><span class='line'><span class="nv">$ CLIENT_SECRET</span><span class="o">=</span>k6XPLuryMWUtKDKmS1cYgW0r
</span><span class='line'>
</span><span class='line'><span class="nv">$ ACCESS_TOKEN</span><span class="o">=</span><span class="sb">`</span>curl -s --data <span class="s2">&quot;refresh_token=$REFRESH_TOKEN&quot;</span> --data <span class="s2">&quot;client_id=$CLIENT_ID&quot;</span> --data <span class="s2">&quot;client_secret=$CLIENT_SECRET&quot;</span> --data <span class="s2">&quot;grant_type=refresh_token&quot;</span> https://www.googleapis.com/oauth2/v4/token|jq .access_token -r<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>
<p><code>REFRESH_TOKEN</code>を取得すれば、あと<code>CLIENT_ID</code>と<code>CLIENT_SECRET</code>が分かれば<code>ACCESS_TOKEN</code>は更新できます。</p>
<h2>ALBUMの作成</h2>
<ul>
<li>既存のAlbumの確認
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -s -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> https://photoslibrary.googleapis.com/v1/albums?pageSize<span class="o">=</span>50
</span></code></pre></td></tr></table></div></figure></li>
<li>既存のAlbumの確認(<code>nextPageToken</code>がある場合)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -s -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> https://photoslibrary.googleapis.com/v1/albums?pageSize<span class="o">=</span>50&amp;pageToken<span class="o">=</span>...
</span></code></pre></td></tr></table></div></figure></li>
<li>新規Albumの作成
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ DIR</span><span class="o">=</span>20190428
</span><span class='line'><span class="nv">$ </span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;album&quot;: { &quot;title&quot;:&quot;&#39;</span><span class="nv">$DIR</span><span class="s1">&#39;&quot; } }&#39;</span> https://photoslibrary.googleapis.com/v1/albums
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;ADIlBkAOcfB64a_Opnwdjgxeq6jhQv4GQ1pZQ-wse2o2hiBIofuhefmFycfTtIcLAG0inLt0FlZn&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;20190428&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;productUrl&quot;</span>: <span class="s2">&quot;https://photos.google.com/lr/album/ADIlBkAOcfB64a_Opnwdjgxeq6jhQv4GQ1pZQ-wse2o2hiBIofuhefmFycfTtIcLAG0inLt0FlZn&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;isWriteable&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>
<h2>UPLOAD and adding to Album</h2>
<p>2段階になっていて、</p>
<ol>
<li>binary fileをuploadして<code>UPLOAD_TOKEN</code>を得る</li>
<li><code>UPLOAD_TOKEN</code>を元に<code>mediaItems:batchCreate</code>する(ALBUM名はここで渡す。batch処理なので複数の<code>UPLOAD_TOKEN</code>を渡せる)</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">FILENAME</span><span class="o">=</span>20190428/img_0699.jpg
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s1">&#39;Content-type: application/octet-stream&#39;</span> -H <span class="s1">&#39;X-Goog-Upload-Protocol: raw&#39;</span> -H <span class="s2">&quot;X-Goog-Upload-File-Name: $FILENAME&quot;</span> --data-binary <span class="s2">&quot;@$FILENAME&quot;</span> https://photoslibrary.googleapis.com/v1/uploads
</span><span class='line'>CAIS+QIASsy4zFbu3IKGgbDXA5XshOGvHPOTLuqbqTN9MQxKRVCsxp3YHbus+qsDgA0GCjuqXdmGpv1uWFxKvf8GYa/8VJQ1S6FUcmGWgw6Hdj14QNYtBRVbXU/cdq/Jkx3ZblG5co3hnY6+yMxih26kB0vTWfWp9GwIE904y5yXEE1pm/V0bFduzA/CZvdlAU9EvWfqKnNO7c3nozWUalm5WUZHHatVQZT+H5+jD0Bq3YwMUdfC5KF048AxFa9auW1HpQGdboalYyXBCJksfzteWtU53wZ8rFnZgHwrui9uA2ptnTuDlin2m+WXU+HqaVRuKX1ou5BzalI4P0gVfWql41Af6nuvvEdMNZ39tEvK2EARUX0CUd8veDznZiWjtPcRqpJnvjDRCxaSgr/cn+JXf9k7SnD0DYVWOdM64lngcAuXxsKk6RJJOVxQBUi6XAG04dHnKxDndqjl+fcH9qWAmpXejPx8Kgn6GX7TgatiKHEG4ybvWjStWg1JPg
</span><span class='line'>
</span><span class='line'><span class="nv">$ UPLOAD_TOKEN</span><span class="o">=</span>CAIS+...
</span><span class='line'><span class="nv">$ ALBUM_ID</span><span class="o">=</span>ADIlBkAOcfB64a_Opnwdjgxeq6jhQv4GQ1pZQ-wse2o2hiBIofuhefmFycfTtIcLAG0inLt0FlZn
</span><span class='line'><span class="nv">$ </span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;albumId&quot;: &quot;&#39;</span><span class="nv">$ALBUM_ID</span><span class="s1">&#39;&quot;, &quot;newMediaItems&quot;:[ { &quot;simpleMediaItem&quot;: { &quot;uploadToken&quot;: &quot;&#39;</span><span class="nv">$UPLOAD_TOKEN</span><span class="s1">&#39;&quot; }} ] }&#39;</span> https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;newMediaItemResults&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;uploadToken&quot;</span>: <span class="s2">&quot;CAIS+...&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;status&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>
</span><span class='line'>      <span class="o">}</span>,
</span><span class='line'>      <span class="s2">&quot;mediaItem&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;ADIl...&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;productUrl&quot;</span>: <span class="s2">&quot;https://photos.google.com/lr/album/ADIl...&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;mimeType&quot;</span>: <span class="s2">&quot;image/jpeg&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;mediaMetadata&quot;</span>: <span class="o">{</span>
</span><span class='line'>          <span class="s2">&quot;creationTime&quot;</span>: <span class="s2">&quot;2019-04-28T02:40:35Z&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;width&quot;</span>: <span class="s2">&quot;5184&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;height&quot;</span>: <span class="s2">&quot;3456&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;filename&quot;</span>: <span class="s2">&quot;20190428/img_0699.jpg&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h2>folderまるっとupload</h2>
<ul>
<li>事前準備
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">REFRESH_TOKEN</span><span class="o">=</span>...
</span><span class='line'><span class="nv">CLIENT_ID</span><span class="o">=</span>...
</span><span class='line'><span class="nv">CLIENT_SECRET</span><span class="o">=</span>...
</span><span class='line'><span class="nv">ACCESS_TOKEN</span><span class="o">=</span><span class="sb">`</span>curl -s --data <span class="s2">&quot;refresh_token=$REFRESH_TOKEN&quot;</span> --data <span class="s2">&quot;client_id=$CLIENT_ID&quot;</span> --data <span class="s2">&quot;client_secret=$CLIENT_SECRET&quot;</span> --data <span class="s2">&quot;grant_type=refresh_token&quot;</span> https://www.googleapis.com/oauth2/v4/token|jq .access_token -r<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></li>
<li>Album作成
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">DIR</span><span class="o">=</span>...
</span><span class='line'><span class="nv">ALBUM_ID</span><span class="o">=</span><span class="sb">`</span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;album&quot;:{&quot;title&quot;:&quot;&#39;</span><span class="nv">$DIR</span><span class="s1">&#39;&quot;}}&#39;</span> https://photoslibrary.googleapis.com/v1/albums|jq -r .id<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></li>
<li><code>~/photo/$DIR</code>以下の<code>img_*.jpg</code> filesのuploadとalbum登録(約100 files毎に<code>ACCESS_TOKEN</code>のrefresh)</li>
</ul>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>i in ~/photo/<span class="nv">$DIR</span>/img_*.jpg; <span class="k">do if</span> <span class="o">[</span> ! <span class="k">${</span><span class="nv">i</span><span class="p">##*00.jpg</span><span class="k">}</span> <span class="o">]</span>;<span class="k">then </span><span class="nv">ACCESS_TOKEN</span><span class="o">=</span><span class="sb">`</span>curl -s --data <span class="s2">&quot;refresh_token=$REFRESH_TOKEN&quot;</span> --data <span class="s2">&quot;client_id=$CLIENT_ID&quot;</span> --data <span class="s2">&quot;client_secret=$CLIENT_SECRET&quot;</span> --data <span class="s2">&quot;grant_type=refresh_token&quot;</span> https://www.googleapis.com/oauth2/v4/token|jq .access_token -r<span class="sb">`</span>;<span class="k">fi</span>;<span class="nv">UPLOAD_TOKEN</span><span class="o">=</span><span class="sb">`</span><span class="nv">FILENAME</span><span class="o">=</span><span class="nv">$DIR</span>/<span class="k">${</span><span class="nv">i</span><span class="p">##*/</span><span class="k">}</span>; curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s1">&#39;Content-type: application/octet-stream&#39;</span> -H <span class="s1">&#39;X-Goog-Upload-Protocol: raw&#39;</span> -H <span class="s2">&quot;X-Goog-Upload-File-Name: $FILENAME&quot;</span> --data-binary <span class="s2">&quot;@$i&quot;</span> https://photoslibrary.googleapis.com/v1/uploads<span class="sb">`</span>;curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;albumId&quot;:&quot;&#39;</span><span class="nv">$ALBUM_ID</span><span class="s1">&#39;&quot;,&quot;newMediaItems&quot;:[{&quot;simpleMediaItem&quot;:{&quot;uploadToken&quot;:&quot;&#39;</span><span class="nv">$UPLOAD_TOKEN</span><span class="s1">&#39;&quot;}}]}&#39;</span> https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate|tee -a /tmp/upload.log|grep -q error&amp;&amp;echo <span class="nv">$i</span>;<span class="k">done</span>|tee /tmp/upload_failed.log
</span></code></pre></td></tr></table></div></figure>
<p>uploadに失敗したfile namesが標準出力と<code>/tmp/upload_failed.log</code>に出てくるので、後刻それらをretry。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>i in <span class="sb">`</span>cat /tmp/upload_failed.log<span class="sb">`</span>; <span class="k">do if</span> <span class="o">[</span> ! <span class="k">${</span><span class="nv">i</span><span class="p">##*00.jpg</span><span class="k">}</span> <span class="o">]</span>;<span class="k">then </span><span class="nv">ACCESS_TOKEN</span><span class="o">=</span><span class="sb">`</span>curl -s --data <span class="s2">&quot;refresh_token=$REFRESH_TOKEN&quot;</span> --data <span class="s2">&quot;client_id=$CLIENT_ID&quot;</span> --data <span class="s2">&quot;client_secret=$CLIENT_SECRET&quot;</span> --data <span class="s2">&quot;grant_type=refresh_token&quot;</span> https://www.googleapis.com/oauth2/v4/token|jq .access_token -r<span class="sb">`</span>;<span class="k">fi</span>;<span class="nv">UPLOAD_TOKEN</span><span class="o">=</span><span class="sb">`</span><span class="nv">FILENAME</span><span class="o">=</span><span class="nv">$DIR</span>/<span class="k">${</span><span class="nv">i</span><span class="p">##*/</span><span class="k">}</span>; curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s1">&#39;Content-type: application/octet-stream&#39;</span> -H <span class="s1">&#39;X-Goog-Upload-Protocol: raw&#39;</span> -H <span class="s2">&quot;X-Goog-Upload-File-Name: $FILENAME&quot;</span> --data-binary <span class="s2">&quot;@$i&quot;</span> https://photoslibrary.googleapis.com/v1/uploads<span class="sb">`</span>;curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;albumId&quot;:&quot;&#39;</span><span class="nv">$ALBUM_ID</span><span class="s1">&#39;&quot;,&quot;newMediaItems&quot;:[{&quot;simpleMediaItem&quot;:{&quot;uploadToken&quot;:&quot;&#39;</span><span class="nv">$UPLOAD_TOKEN</span><span class="s1">&#39;&quot;}}]}&#39;</span> https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate|tee -a /tmp/upload.log|grep -q error&amp;&amp;echo <span class="nv">$i</span>;<span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>
<p>これではbatch処理を活かしていない(複数の<code>UPLOAD_TOKEN</code>をbatchCreateしていない)のですが、Googleだけに割とすぐ終わること、error handlingがあまりにも複雑になることから、都度batchCreateすることにしました。</p>
<p>私の場合、1000 filesで約3GB弱、を目処に分割してuploadしています。
uploadしたfilesは全て「元のサイズ」で保存されてしまい、Google Driveの容量を消費してしまうので、<a href="https://photos.google.com/settings">設定</a>から「容量を解放」しなければなりません。これが「1日1回」となっているものの、だからといって24時間後に再度実行しても「ファイルを圧縮できませんでした。ストレージを復元できるのは 1 日 1 回だけです。」と言われて出来ず、困っています。実際に再度実行できるまでには1.5日〜2日かかるようで、これが最大のneckになっています。</p>
<h2>新規Albumへの既存files追加</h2>
<p>これはダメでした。
何度試してもダメだったので、調べてみると、公式Documentに、
<a href="https://developers.google.com/photos/library/guides/manage-albums">Note that you can only add media items that have been uploaded by your application to albums that your application has created.</a>とあります。
なんでやねん!
何で既存の画像とAPI経由の画像とを区別するのか、わけわかりません。
それじゃぁ、っていうんで、既にGoogle Photos上にある写真も改めてuploadしてalbumにaddしたら、それは出来ました。しかし、「元のサイズ」になってしまって容量を食ってしまいます。これについても「容量を解放」しなければなりません。
全く七面倒臭いものです。</p>
<p>ちなみに、以下のようにやりました。paginationが発生しない程度のAlbum限定で、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ DIR</span><span class="o">=</span>20171005
</span><span class='line'><span class="nv">$ ALBUM_ID</span><span class="o">=</span><span class="sb">`</span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;album&quot;: { &quot;title&quot;:&quot;&#39;</span><span class="nv">$DIR</span><span class="s1">&#39;&quot; } }&#39;</span> https://photoslibrary.googleapis.com/v1/albums|jq -r .id<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ MEDIA_ITEMS</span><span class="o">=</span><span class="sb">`</span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;pageSize&quot;:&quot;100&quot;,&quot;filters&quot;:{&quot;dateFilter&quot;:{&quot;dates&quot;:[{&quot;year&quot;:2017,&quot;month&quot;:10,&quot;day&quot;:5}]}}}&#39;</span> https://photoslibrary.googleapis.com/v1/mediaItems:search|jq .mediaItems<span class="o">[]</span>.id|sed -z <span class="s1">&#39;s/\n/,/g&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;mediaItemIds&quot;:[&#39;</span><span class="nv">$MEDIA_ITEMS</span><span class="s1">&#39;]}&#39;</span> https://photoslibrary.googleapis.com/v1/albums/<span class="k">${</span><span class="nv">ALBUM_ID</span><span class="k">}</span>:batchAddMediaItems
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;error&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;code&quot;</span>: 400,
</span><span class='line'>    <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;Request contains an invalid media item id.&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;INVALID_ARGUMENT&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
なら既存のものは手でやればいいではないか?
やってみたのですが、微妙に手元のfilesと数が合わなかったりするので、困難です。手元に3282枚あってGoogle PhotosのAlbumに3281枚あった時、どうやって差分をあぶり出したらいいのですか?! 全downloadはなしで。もう一つでは、手元に5221枚、Google Photosに5230枚と増えてます! Manuallyでは限界を感じました。</p>
<h2>Album中の全file名取得</h2>
<p>自己解決しました。
<code>NEXT_PAGE_TOKEN</code>あると面倒くさいんですけど、これで何とか。</p>
<h3>Album探し</h3>
<p>最初のpageに目的のalbumがあるかをこれ↓で探す</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -s -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> <span class="s1">&#39;https://photoslibrary.googleapis.com/v1/albums?pageSize=50&#39;</span>|jq -r .albums<span class="o">[]</span>.title,.nextPageToken
</span></code></pre></td></tr></table></div></figure>
なければ次のpageへ。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -s -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> <span class="s1">&#39;https://photoslibrary.googleapis.com/v1/albums?pageSize=50&amp;pageToken=Ck...&#39;</span>|jq -r .albums<span class="o">[]</span>.title,.nextPageToken
</span></code></pre></td></tr></table></div></figure>
<p>見付かれば、<code>ALBUM_ID</code>を同定。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -s -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> <span class="s1">&#39;https://photoslibrary.googleapis.com/v1/albums?pageSize=50&amp;pageToken=Ck...&#39;</span>|grep -1 20080318
</span><span class='line'>      <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;ADI...&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;20080318&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;productUrl&quot;</span>: <span class="s2">&quot;https://photos.google.com/lr/album/ADI...&quot;</span>,
</span></code></pre></td></tr></table></div></figure>
<p>そうしてから徐に、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">ALBUM_ID</span><span class="o">=</span>...
</span><span class='line'><span class="nv">NEXT_PAGE_TOKEN</span><span class="o">=</span><span class="sb">`</span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;pageSize&quot;:&quot;100&quot;,&quot;albumId&quot;:&quot;&#39;</span><span class="nv">$ALBUM_ID</span><span class="s1">&#39;&quot;}&#39;</span> https://photoslibrary.googleapis.com/v1/mediaItems:search|jq -r <span class="s1">&#39;.mediaItems[].filename,.nextPageToken&#39;</span>|tee /tmp/files.txt|tail -1<span class="sb">`</span>;<span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;$NEXT_PAGE_TOKEN&quot;</span> !<span class="o">=</span> null <span class="o">]</span>;<span class="k">do </span><span class="nv">NEXT_PAGE_TOKEN</span><span class="o">=</span><span class="sb">`</span>curl -s -X POST -H <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;pageSize&quot;:&quot;100&quot;,&quot;albumId&quot;:&quot;&#39;</span><span class="nv">$ALBUM_ID</span><span class="s1">&#39;&quot;,&quot;pageToken&quot;:&quot;&#39;</span><span class="nv">$NEXT_PAGE_TOKEN</span><span class="s1">&#39;&quot;}&#39;</span> https://photoslibrary.googleapis.com/v1/mediaItems:search|jq -r <span class="s1">&#39;.mediaItems[].filename,.nextPageToken&#39;</span>|tee -a /tmp/files.txt|tail -1<span class="sb">`</span>;<span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>
<p>その後、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>grep -vE -e <span class="s1">&#39;.{300,}&#39;</span> -e null /tmp/files.txt
</span></code></pre></td></tr></table></div></figure>
<p>で取り出せます。</p>
<p>それで比較(<code>diff -y --suppress-common-lines &lt;(cd ~/photo;ls .../img_*|sort) &lt;(grep -vE -e '.{300,}' -e null /tmp/files.txt|sort)</code>)したところ、足りないものはわかりました。
ですが、何故かAPIで取ると3282個なのに
「コンテンツ 3283個」と表示されていたり...
よく精査すると、なるほど、Google Photosが勝手に?作った、
<a href="https://photos.google.com/assistant">アシスタント</a>にある
<code>MOVIE.mp4</code>(ムービー)や<code>...-EFFECTS.jpg</code>(スタイルを適用した写真)、
<code>...-PANO.jpg</code>(パノラマ)が含まれているから?
いや、一つ(5230個と表示)はそれが原因で9個多く数が表示されていたのですが、
もう一つ、「コンテンツ 3283個」は、APIで取得するといくら見ても
3282個しかない、自動生成物もない、です。謎です。</p>
<p>それと、EnrichmentとかいってTextやLocationとMapを入れられるんですけど、
それらを取得する術がなく、Textに書いたことを検索するとかも出来ず。
GUIから入れてみましたが、要素を追加する度にいちいち先頭に戻される、
移動すると他の要素もどこかに行ってしまうことがある、
等何だかなぁ、というものでした。
Googleならこんなもんじゃないだろー!</p>
]]></content></entry><entry><title type="html"><![CDATA[3 good things in this week]]></title><link href="http://u-ryo.github.io//blog/2019/01/28/3-good-things-in-this-week/"/><updated>2019-01-28T01:01:51+09:00</updated><id>/blog/2019/01/28/3-good-things-in-this-week/</id><content type="html"><![CDATA[<p>また幸せになるため?に、
先週3つ良かったことを並べてみます。</p>
<ul>
<li>バイトで発表を何とか凌げたこと(でも本番のreportを書き上げる筈のこの土日、またなぁんにもしませんでした...orz)</li>
<li>職場で定期本番リリースを無事?終えたこと(完全に付きっきりでしたけど。まぁ最初だから仕方ありませんよね。けど次のリリース、一人で出来るかな?)</li>
<li>Paiza S Rank、CodeIQ S Rankを持っていたこと(でもこんな役に立たないもの自慢?という程のものではないにしても、何だか、ですが。みみっちぃなぁ...)</li>
</ul>
<p>あと、12月半月分の給料もいっぺんに出たので、
今回の総額が多かったこと、とか?</p>
<p>良くないことは沢山思い付くんですけど、
それじゃぁいけないんですよね。
しかしまぁ、総体的には健気に生きています。</p>
]]></content></entry><entry><title type="html"><![CDATA[Omega3 fatty acids]]></title><link href="http://u-ryo.github.io//blog/2019/01/24/omega3-fatty-acids/"/><updated>2019-01-24T05:13:51+09:00</updated><id>/blog/2019/01/24/omega3-fatty-acids/</id><content type="html"><![CDATA[<p>去年11月の<a href="http://www9.nhk.or.jp/gatten/articles/20181121/">ためしてガッテン</a>や一昨年の<a href="http://www.nhk.or.jp/beautyscience-blog/2017/101/">美と若さの新常識</a>でもやってたように、
オメガ3脂肪酸として亜麻仁油スプーン一杯を始めてみたところ、
1ヶ月経たずしてホントに効果がありました。
というのも、鼻血が出やすくなったり、
痔核からの血便が出たりと、
「血液サラサラ」ってこういうことかーとの自覚が。
血小板の働きが抑えられるみたいです。
あと、この寒い中、未だにストーブ付けてなくても頑張っていられる、
というのも効果の一つかと。
最近お魚を選択できるめし処減っちゃったので、
オメガ3脂肪酸の強制摂取は必要なんだろうなぁ。
それにしても高いですねえごま油とか亜麻仁油って。
それでも西友でえごま油なんか絶えて久しいです。</p>
<h3>参考:</h3>
<ul>
<li><a href="http://www.sciencecomlabo.jp/">疑似科学とされるものの科学性評定サイト</a>の<a href="http://www.sciencecomlabo.jp/healthy_food/dha.epa">DHA・EPA</a></li>
<li><a href="https://www.umablo.net/entry/亜麻仁油の働きと危険性">イラスト徹底解説！ダイエットに人気の亜麻仁油の効能と副作用・注意点とは？</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Deeplooks]]></title><link href="http://u-ryo.github.io//blog/2019/01/24/deeplooks/"/><updated>2019-01-24T04:57:31+09:00</updated><id>/blog/2019/01/24/deeplooks/</id><content type="html"><![CDATA[<p><a href="https://deeplooks.com/">Deeplooks</a>という、
顔の良さ?を冷厳に判定するsiteがあるのを知りました。
アプリとかだと顔のpartsの対称性や黄金比などから算出するみたいですが、
これはdeep learningの蓄積によるものだと。
試してみると、ぼくの写真ではどうやっても2.5〜2.7がせいぜい。
同じ写真でも拡大率によって2.5〜2.7の間でぶれますね。
笑顔など表情では変わらないようです。
また、女性の方が高めに出るようです。
なので、0.2程度は誤差があるものと。
それにしても、ぼく如きでは3とか4は出そうにありません。
確かに「この人美人だなぁ」という人を入れれば高得点なので、
客観的指標になりそうです。
Deeplooksのスマホアプリはないですが、
普通にbrowserでaccessすれば、その場で撮った写真で判定できるので十分です。
ただこれ、submitした写真は蓄積されていくようで、しまった!</p>
]]></content></entry><entry><title type="html"><![CDATA[Positive Psychology]]></title><link href="http://u-ryo.github.io//blog/2019/01/24/positive-psychology/"/><updated>2019-01-24T04:49:26+09:00</updated><id>/blog/2019/01/24/positive-psychology/</id><content type="html"><![CDATA[<p>ポジティブ心理学について調べてて、
<a href="https://lightworks-blog.com/pos-psych-strength">〔ポジティブ心理学〕あなたが気づかなかった「強み」を引き出す方法</a>を読んでいたら、
CS(Character Strength)を測る(『どれが自分の「強み」なのかを簡単に調べられるサーベイを無料で受けることができ』る)<a href="https://www.viacharacter.org/Survey/Account/Register">VIA Institute on Character</a>というのがあるというのでやってみました。</p>
<ol>
<li>向学心</li>
<li>勇敢さ</li>
<li>好奇心</li>
</ol>
<p>だそうです。
審美眼、思慮深さ、と続きます。</p>
<p>うー。</p>
<p>下位は、下(24位)から、</p>
<ol>
<li>愛情</li>
<li>感謝</li>
<li>慎み深さ</li>
<li>熱意</li>
</ol>
<p>耳が痛いです。
team workは14番目。
あうー。
もうしょうがないのかなぁ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Funny Patents]]></title><link href="http://u-ryo.github.io//blog/2019/01/24/funny-patents/"/><updated>2019-01-24T04:42:06+09:00</updated><id>/blog/2019/01/24/funny-patents/</id><content type="html"><![CDATA[<p>弁理士さんの話が出て、
特許と言えば赤城徳川埋蔵金とか変なのありますよねー、
って話で、さらっと調べてみる(<a href="https://anond.hatelabo.jp/20120202011001">ヤバい特許</a>)と色々あるんですねぇ他にも。
「太陽の壺」とかって殆ど小説ですか?
っていう感じですけど、どうしてこういうの通るんでしょうか?
役人がザルだから??
不思議でなりません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Learn Python 3 the Hard Way]]></title><link href="http://u-ryo.github.io//blog/2019/01/24/learn-python-3-the-hard-way/"/><updated>2019-01-24T04:34:38+09:00</updated><id>/blog/2019/01/24/learn-python-3-the-hard-way/</id><content type="html"><![CDATA[<p>知人が<a href="https://www.amazon.co.jp/Learn-Python-Hard-Way-Introduction-ebook/dp/B07378P8W6">Learn Python 3 the Hard Way</a>を<a href="https://www.amazon.co.jp/Learn-Python-Hard-Way-%E6%9B%B8%E3%81%84%E3%81%A6%E8%A6%9A%E3%81%88%E3%82%8BPython%E5%85%A5%E9%96%80/dp/4621303287">翻訳しました</a>。
凄いなぁと思うと同時に、
見てみると既に<a href="https://learnpythonthehardway.org/">英語版</a>で<a href="http://blog.sayajewels.com/posts/janiota-python-practice/">勉強した人がいる</a>というので、
その人がやったという初心者用練習問題を、
ジャニヲタじゃないので、
というか初心者ではないので「一行で」やってみました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt;&gt;&gt; def average_age(members):
</span><span class='line'>...  return sum([x[2] for x in members])/len(members)
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; average_age([(&#39;s&#39;,&#39;s&#39;,35),(&#39;a&#39;,&#39;a&#39;,34),(&#39;n&#39;,&#39;n&#39;,34),(&#39;d&#39;,&#39;o&#39;,36),(&#39;j&#39;,&#39;j&#39;,34)])
</span><span class='line'>34.6
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def oldest_member(members):
</span><span class='line'>...  return max(members, key=(lambda x:x[2]))[0]
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; oldest_member([(&#39;s&#39;,&#39;s&#39;,35),(&#39;a&#39;,&#39;a&#39;,34),(&#39;n&#39;,&#39;n&#39;,34),(&#39;d&#39;,&#39;o&#39;,36),(&#39;j&#39;,&#39;j&#39;,34)])
</span><span class='line'>&#39;d&#39;
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def second_oldest_member(members):
</span><span class='line'>...  return sorted(members, key=(lambda x:x[2]))[1][0]
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; second_oldest_member([(&#39;s&#39;,&#39;s&#39;,35),(&#39;a&#39;,&#39;a&#39;,34),(&#39;n&#39;,&#39;n&#39;,34),(&#39;d&#39;,&#39;o&#39;,36),(&#39;j&#39;,&#39;j&#39;,34)])
</span><span class='line'>&#39;n&#39;
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def next_older_member(members, nickname):
</span><span class='line'>...  return min([a for a in members if a[2] &gt; [b for b in members if b[0]==nickname][0][2]],key=(lambda x:x[2]))[0]
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; next_older_member([(&#39;st&#39;,&#39;ms&#39;,19),(&#39;m&#39;,&#39;my&#39;,17),(&#39;k&#39;,&#39;nk&#39;,23),(&#39;f&#39;,&#39;kf&#39;,22),(&#39;sh&#39;,&#39;ss&#39;,20)],&#39;f&#39;)
</span><span class='line'>&#39;k&#39;
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def check_future_age(current_members, future_members):
</span><span class='line'>...  return len({i[2]-j[2] for i,j in zip(current_members,future_members)}) == 1
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; check_future_age([(&#39;st&#39;,&#39;ms&#39;,19),(&#39;m&#39;,&#39;my&#39;,17),(&#39;k&#39;,&#39;nk&#39;,23),(&#39;f&#39;,&#39;kf&#39;,22),(&#39;sh&#39;,&#39;ss&#39;,20)],[(&#39;st&#39;,&#39;ms&#39;,22),(&#39;m&#39;,&#39;my&#39;,20),(&#39;k&#39;,&#39;nk&#39;,26),(&#39;f&#39;,&#39;kf&#39;,25),(&#39;sh&#39;,&#39;ss&#39;,23)])
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; check_future_age([(&#39;st&#39;,&#39;ms&#39;,19),(&#39;m&#39;,&#39;my&#39;,17),(&#39;k&#39;,&#39;nk&#39;,23),(&#39;f&#39;,&#39;kf&#39;,22),(&#39;sh&#39;,&#39;ss&#39;,20)],[(&#39;st&#39;,&#39;ms&#39;,22),(&#39;m&#39;,&#39;my&#39;,20),(&#39;k&#39;,&#39;nk&#39;,26),(&#39;f&#39;,&#39;kf&#39;,25),(&#39;sh&#39;,&#39;ss&#39;,24)])
</span><span class='line'>False
</span></code></pre></td></tr></table></div></figure>
<p>あぁ、なんてアホなことに時間と頭を使ってしまった...</p>
<p><code>min</code>、<code>max</code>、<code>sorted</code>ってリスト内包表記で出来ないんですか?</p>
<p>印税は初版で20〜30万、あとは増刷でガッポガッポ、だそうです。
1年半かかったって。お疲れさまでした。
ぼくも販促に協力しましょうかね。
そしておこぼれにあずかれれば!</p>
]]></content></entry><entry><title type="html"><![CDATA[lualatex error]]></title><link href="http://u-ryo.github.io//blog/2019/01/23/lualatex-error/"/><updated>2019-01-23T22:34:34+09:00</updated><id>/blog/2019/01/23/lualatex-error/</id><content type="html"><![CDATA[<p>Ubuntu 18.04になってからか、これまで難なく通っていたLuaLaTeXが
通らなくなっていました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(/usr/share/texlive/texmf-dist/tex/luatex/luatexja/patches/lltjp-stfloats.sty)
</span><span class='line'>ABD: EverySelectfont initializing macros
</span><span class='line'>! Undefined control sequence.
</span><span class='line'><span class="nt">&lt;argument&gt;</span> ...x \ifdim \paperheight &gt;0pt\relax \pdfpagewidth
</span><span class='line'>                                                  =\paperwidth \pdfpageheigh...
</span><span class='line'>
</span><span class='line'>l.5 \begin{document}
</span><span class='line'>?
</span></code></pre></td></tr></table></div></figure>
<p>version upしたからかな、
そのうち通るようになるかな、
それまでは16.04捨てられないな、
とか思ってほっぽっておいてたんですが、
一向に良くならないので、ちょっと調べてみました。
LuaLaTeX追ってる人には何でもない情報でしょうが、
色々変わってたんですね。</p>
<p>結論から示しますと、
<code>graphicx</code>のdriverを<code>pdftex</code>から<code>luatex</code>にする
(→defaultの自動判定に任せる)ようにすれば良かったです。
具体的には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>\usepackage[pdftex]{graphicx}
</span><span class='line'>   â
</span><span class='line'>\usepackage{graphicx}
</span></code></pre></td></tr></table></div></figure>
<p>だけでした(ref.<a href="http://acetaminophen.hatenablog.com/entry/2016/04/23/141922">TeX Live 2016 の新しい LuaTeX あれこれ</a>)。
primitive名が色々変わって、
LuaTeXのprimitiveに対応した<code>luatex.def</code>が出来て、
graphicx driverの<code>luatex</code>への自動判定(<code>pdftex</code>ではなく)が
導入されていました。</p>
]]></content></entry><entry><title type="html"><![CDATA[3 good things in this week]]></title><link href="http://u-ryo.github.io//blog/2019/01/13/3-good-things-in-this-week/"/><updated>2019-01-15T01:06:52+09:00</updated><id>/blog/2019/01/13/3-good-things-in-this-week/</id><content type="html"><![CDATA[<p>とっても今更ですが、凄い本に出会いました。
情報処理学会誌のビブリオトークで紹介されていた「データの見えざる手」、
帰りに池袋三省堂で100頁ちょっと立ち読みしたら止まらくなっちゃって、
もう本を買うのはやめようと思ってたのに、買っちゃいました。
もう出版から4年経って手軽な文庫になってましたし。
発刊が2014、文庫化が2018年、でも内容は古くない、
というか聞いたことなかったです。
このdog yearな技術進歩の中で!
調べてみると<a href="https://industry-co-creation.com/industry-trend/6539">論文として出してないでClosedだ</a>って言ってましたから、
そのせい?</p>
<p>この本の凄いのは、data分析に留まらず、
「幸せは、加速度センサで測れる」と喝破しているところ。
そういう考察まで進めるというのが、そこらのAI、big dataの話と
違うところ、です。
(よく見ると、「組織の」happiness?)</p>
<p>その中で、
今週あったよかったこと3つを10分で書き出すと
happiness levelが高まった、という話がありました(p.81)。
3つ書き出す手法自体は共同研究者でHappinessの心理学(Positive心理学)が専門で
<a href="http://www.positivepsych.jp/pp6/book10.html">The How of Happiness: A Scientific Approach to Getting the Life You Want</a>の著者
<a href="https://en.wikipedia.org/wiki/Sonja_Lyubomirsky">リュボミルスキ(リュボミアスキー)教授</a>の
ものだそうですが、
それをwearable sensorの比較実験で裏付けたと。
そして言います。</p>
<blockquote><p>人のハピネスは、意外に小さなことが決めていることが実証された。(p.82)</p>
</blockquote>
<p>あぁ、でもよく読むと、</p>
<ul>
<li>幸せは、およそ半分は遺伝的に決まっている</li>
<li>驚くべきことに、これら環境要因をすべて合わせても、幸せに対する影響は、全体の10%にすぎない</li>
<li>残りの40%は何だろう。...たとえば、人に感謝を表す、困っている人を助けてあげる、という一見簡単なことでも、実はハピネスは格段に高まる</li>
</ul>
<p>といった辺り(p.72〜74)は、<a href="https://ja.wikipedia.org/wiki/ポジティブ心理学">ポジティブ心理学</a>の成果なんですね。</p>
<p>なるほど、要するに、
こういった心理学(や経営学?)の成果を、
アンケートではなくwearable sensorによる行動履歴から実証した、
更に押し進めて、人間行動もmassの視点から見ると一般の物理法則に従う、
と主張しているものなんですかね。
あ、いや、コールセンタやホームセンタの話などは、
兎に角やってみたらわかった、という話ですか。
だから「仮説を立てることも学習できるマシンに任せた方がいい」
([<a href="https://cakes.mu/posts/7372">どっちが最強！？ 物理学VS統計学——矢野和男×西内啓 対談 データ分析で「過失」という概念が進化を遂げてしまう？</a>])のですね。
(但しGoalは人間が設定する必要がある、と)</p>
<p>まぁいいです。
「幸せ」になるために、ぼくも3つ、書き出してみましょう。
* 転職して3週間、研修とは言えsource codeが書けたこと(でも今更AngularJSとは... 昔取った杵柄とはいえ)
* 会社の初詣・昼食会でお昼ご飯がタダだったこと(家計が助かります... でも周囲とはまだまだ馴染めず)
* 金曜昼の会社の食事会でタダ飯が食べられたこと(家計が助かります... ご飯のことばっかり。でもそれって大事ですよ)
あれ? オチは付けちゃいけないんですかね?</p>
<p>あとは「mindfulness」、寝る前の瞑想深呼吸でしょうか。</p>
<p>あぁ、幸せ。</p>
<p>...ホント?!</p>
<p>何の心配もなく寝ていれば、それで幸せ、デス。</p>
<p>って、死んでるのと然程変わらないのでは。</p>
<p>...あー、これも、<a href="https://lightworks-blog.com/happiness-formula">〔ポジティブ心理学〕「意図的行動」で仕事の幸せ度を上げる方法</a>によると、
それぞれの「よいこと」について、「なぜ起きたのか」「どんな意味があるのか」「自分/他人がどんな働きかけをしたからか」「もっと得るためにはどうしたらよいか」を書き加えるそう。
うーむ、幸せへの道はそう容易くはないのですね。
そういえば随所に書かれてますか。
幸せとは能動的なもので受動的なものではない、と。
HappinessというよりWell-being?</p>
<h3>矢野さん related links</h3>
<ul>
<li><a href="https://cakes.mu/posts/6945">人間の行動を支配する隠れた法則とは——『データの見えざる手』矢野和男インタビュー 【 前編】人間を測る新しいものさしの誕生</a></li>
<li><a href="https://cakes.mu/posts/6946">人間の行動を支配する隠れた法則とは——『データの見えざる手』矢野和男インタビュー 【 中編】人間はエネルギー保存則から逃れられない！</a></li>
<li><a href="https://cakes.mu/posts/6947">人間の行動を支配する隠れた法則とは——『データの見えざる手』矢野和男インタビュー 【 後編】体を動かすと幸福に、幸福になると生産性が上がるという事実</a></li>
<li><a href="https://cakes.mu/series/3235">どっちが最強！？ 物理学VS統計学——矢野和男×西内啓 対談</a></li>
<li><a href="https://cakes.mu/posts/7370">どっちが最強！？ 物理学VS統計学——矢野和男×西内啓 対談 「人の行動を自発的に変えることを命令する」という矛盾のそばで</a></li>
<li><a href="https://cakes.mu/posts/7371">どっちが最強！？ 物理学VS統計学——矢野和男×西内啓 対談 人生はお金と時間と制御資源のマネジメントである</a></li>
<li><a href="https://cakes.mu/posts/7372">どっちが最強！？ 物理学VS統計学——矢野和男×西内啓 対談 データ分析で「過失」という概念が進化を遂げてしまう？</a></li>
<li><a href="https://cakes.mu/posts/7373">どっちが最強！？ 物理学VS統計学——矢野和男×西内啓 対談 コンピュータもデータも、最終的に人間中心であるべきである。</a></li>
<li><a href="http://www.soshisha.com/book_wadai/books/2068.html">データの見えざる手--ウェアラブルセンサが明かす人間・組織・社会の法則 「知り合いの知り合い」が増えると仕事がうまくいく!</a></li>
<li><a href="https://industry-co-creation.com/industry-trend/6539">人工知能”Hくん”はものすごく少ないデータで学習し、最適解を導く(日立 矢野）【K16-1A #6】</a></li>
<li><a href="https://industry-co-creation.com/industry-trend/6541">組織のハピネスは加速度センサーで測れる(日立 矢野)【K16-1A #7】</a></li>
<li><a href="https://industry-co-creation.com/industry-trend/6543">人工知能が生む出す新たな職業「AIer」とは何か？【K16-1A #8】</a></li>
<li><a href="http://www.hitachi.co.jp/products/it/it-pf/mag/pf/pr_ai_jump/">日立の人工知能とは</a></li>
</ul>
<p>Hくん、今は<a href="http://www.hitachi.co.jp/products/it/lumada/">Lumada</a>になっているようですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Nengajo Rhapsody]]></title><link href="http://u-ryo.github.io//blog/2019/01/07/nengajo-rhapsody/"/><updated>2019-01-15T00:49:28+09:00</updated><id>/blog/2019/01/07/nengajo-rhapsody/</id><content type="html"><![CDATA[<p>いつも年賀状で苦労しています。
毎年微妙に変わりますので。
今年苦労した点をメモしておきます。年末の自分のために。</p>
<p><code>LuaLaTeX</code>になってから、fontの扱いは大分楽になりました。
<a href="https://arxiv.hatenablog.com/entry/2016/11/30/183000">LuaLaTeXのフォントの取り扱いについて</a>を参考に、
<code>*.ttf/otf</code>を<code>/usr/share/fonts/[true|open]type/xxx/</code>以下にcopyして、
<code>.tex</code>fileに
<code>\newfontfamily\Text任意名{英文フォントファイル名}</code>や
<code>\newjfontfamily\Text任意名{和文フォントファイル名}</code>と書けば、
<code>\Text任意名 happy new year!</code>や<code>\Text任意名 謹賀新年</code>というように使えました。</p>
<p>class fileは香田温人さんの<code>ltjhagaki.cls</code>を長年使わせて貰っています。
探してみたら今はもう見付からないようですね。</p>
<p>0.81や0.85でLuaLaTeXが少し変わって(<a href="https://zrbabbler.hatenablog.com/entry/20151013/1444700367">LuaTeX や LaTeX や LuaLaTeX が新しくなってアレ(1)</a>)、
<code>\pdfpagewidth</code>も未定義になっちゃってて、
はがき自体の表示位置もA4のupper centerになっちゃってて。
去年はハガキサイズでPDF出てたのに。
これだと印刷にどうにも苦労したので、
<a href="https://org-technology.com/posts/lualatex-geometry.html#">LuaLaTeX での余白の設定</a>を参考に
geometryを導入してはがきサイズでpdfを出力するようにしたら
ようやっとうまく行きました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>\usepackage[paperwidth=100mm, paperheight=149mm]{geometry}
</span><span class='line'>\geometry{top=0truemm,bottom=0truemm,inner=0truemm,outer=0truemm}
</span></code></pre></td></tr></table></div></figure>
<p>これですね。良かったです。</p>
<p><a href="http://www.easydrawingtutorials.com/index.php/disney/414-mickey-mouse-body">Easy Drawing Tutorials</a>、<a href="http://www.easydrawingtutorials.com/index.php/88-disney/81-draw-mickey-mouse">顔の描き方</a>なんてあるんですね凄いなぁ。</p>
]]></content></entry><entry><title type="html"><![CDATA[creating executable war on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/12/03/creating-executable-war-on-jhipster/"/><updated>2018-12-03T02:19:42+09:00</updated><id>/blog/2018/12/03/creating-executable-war-on-jhipster/</id><content type="html"><![CDATA[<p>いつも忘れちゃうんで。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ gradle bootRepackage -Pprod
</span></code></pre></td></tr></table></div></figure>
<p><code>build.gradle</code>に中に定義があります。</p>
]]></content></entry><entry><title type="html"><![CDATA[mat-spinner in Angular Material]]></title><link href="http://u-ryo.github.io//blog/2018/12/02/mat-spinner-in-angular-material/"/><updated>2018-12-02T09:56:25+09:00</updated><id>/blog/2018/12/02/mat-spinner-in-angular-material/</id><content type="html"><![CDATA[<p>Angularで「ロード中」を簡単に実現する方法を探していて、
<a href="https://material.angular.io/components/progress-spinner/overview">Angular Material</a>にあるんですね。<code>&lt;mat-spinner&gt;&lt;/mat-spinner&gt;</code>だけ。凄く簡単。
でも、実際にやってみても出て来なかったので不思議でした。
いや、<a href="https://stackblitz.com/angular/qyqovrjarbx?file=app%2Fprogress-spinner-overview-example.html">sample</a>とかいくら見ても、特に何も<code>import</code>しなくてもいきなりtag書くだけで使えるよ、っていうんですけど、自分のには出て来ません。なぜ??
<a href="https://www.youtube.com/watch?v=Z6JdFWXh1Nc">動画</a>見てやっとわかりました。
確かに当該component fileではimportの必要ありませんけど、
<code>app.module.ts</code>なりで<code>MatProgressSpinnerModule</code>のimport/importsが必要なんですね。
もし入ってなければ<code>BrowserAnimationsModule</code>も。
sampleはdefaultでMat系Module全部入りだからよくわかんなかったんですよ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Using where and join in mysqldump]]></title><link href="http://u-ryo.github.io//blog/2018/11/28/using-where-and-join-in-mysqldump/"/><updated>2018-11-28T00:37:50+09:00</updated><id>/blog/2018/11/28/using-where-and-join-in-mysqldump/</id><content type="html"><![CDATA[<p>基本的には<a href="https://qiita.com/asigochan/items/fec45efff78045b33b90">mysqldumpでwhereにjoinを使う</a>にある通り、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mysqldump -uusername -p DatabaseName tableA --single-transaction --were &#39;id IN (SELECT a.id FROM tableA a JOIN tableB b ON a.b_id=b.id WHERE b.name LIKE &quot;%someone%&quot;)&#39;
</span></code></pre></td></tr></table></div></figure>
<p>というわけですが、肝は、</p>
<ul>
<li><code>--where</code>中で<code>JOIN</code>を使うためにsubqueryにする</li>
<li><code>--single-transaction</code>を付けることで<code>mysqldump: Couldn't execute 'SELECT... Table 'a' was not locked with LOCK TABLES (1100)</code>と言われるのを防ぐ</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Suddenly failed to parse DateTime on JHipster Angular]]></title><link href="http://u-ryo.github.io//blog/2018/11/25/suddenly-failed-to-parse-datetime-on-jhipster-angular/"/><updated>2018-11-25T01:23:33+09:00</updated><id>/blog/2018/11/25/suddenly-failed-to-parse-datetime-on-jhipster-angular/</id><content type="html"><![CDATA[<p>ある時、JHipsterのAngularのUser Managementを久し振りに見てみると、user名など表示されるのが物凄く遅いことがありました。ポツ、また数秒してポツ、という具合に一つ一つの行が表示されていきます。あれぇ? こんなもんだったかなぁ? あまり気にしなかったのですが、流石に新規Userを作成しようとして失敗する段になって、これは何とかしなければと思い始めました。browserでF12を押してみると、どうやらDate Pipeでのparseに失敗している様子。どうして? 前は出来てたのに。serverから来ているJSONをよく見ると、DBからのDateTime部分のObjectが<code>epochSecond</code>とかnano何とかになっていました。検索すると、
<a href="https://stackoverflow.com/questions/37999762/efficient-way-to-have-jackson-serialize-java-8-instant-as-epoch-milliseconds/38004044">Efficient way to have Jackson serialize Java 8 Instant as epoch milliseconds?</a>を見付けて、中身読んでないですが「jackson-datatype-jsr310」を見掛けてあぁー!っと。</p>
<p>jhipsterで新規application作ってその<code>build.gradle</code>見てみると、確かにありました<code>compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'</code>。
これを、なくてもいいじゃん、と大分前に取っちゃってたんですね。確かにWebアプリ本体には影響なかったので気付きませんでした。あーあ。こういう影響が出てくるですか。なるほど。</p>
]]></content></entry><entry><title type="html"><![CDATA[Setting password for unreachable mail user on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/11/24/setting-password-for-unreachable-mail-user-on-jhipster/"/><updated>2018-11-28T04:32:45+09:00</updated><id>/blog/2018/11/24/setting-password-for-unreachable-mail-user-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでuserを作る時にmail addressは必須で、
基本的にはnew user作るとJHipsterは裏でmailを投げています。
投げて失敗してもnew userは作れるんですが、passwordを設定できません。
どうしたらいいんだろう? と思ってlog見ていたら、
<code>http(s)://ホスト名/#/reset/finish?key=XXXXXXXXXXXXXXX</code>にaccessすれば通常の手続きに乗れるんですね。
このkeyはどこで規定されるのかと思ったら、<code>JHI_USER.RESET_KEY</code>の値です。
ここだけではダメで、<code>JHI_USER.RESET_DATE</code>に<code>now()</code>等で日付時刻をsetしないと、そしてその時刻から24時間以内にaccessしないと、ならないです。
あるuserのpassword強制resetにも使える、と思います。</p>
<p>ただこれをやると、<code>UserService#completePasswordReset</code>の中の<code>cacheManager.getCache</code>でヌルポが出るようでどうしようもなかったです。なので、<code>UserService.java</code>中の<code>cacheManager.getCache(...)</code>を(当該method以外でも)全て<code>try...catch</code>で囲いました。だって無害でしょう?</p>
<p>追記: JHipsterでのlogin dialogには「パスワードを忘れましたか」というlinkがあって、
それを踏むと<code>http://127.0.0.1:8080/#/reset/request</code>というpageに遷移し、
mail addressを入れると、上記初期登録時同様にActivateを要求するmailが飛びます。
初めてやってみました。へぇよく出来てますね。
そのmailに書いてあるURLも初期登録時同様<code>http://127.0.0.1:8080/#/reset/finish?key=XXXXXXXXXX</code>です。</p>
]]></content></entry><entry><title type="html"><![CDATA[Adding a new column on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/11/24/adding-a-new-column-on-jhipster/"/><updated>2018-11-24T05:56:26+09:00</updated><id>/blog/2018/11/24/adding-a-new-column-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでdatabaseのtableに新しいcolumnを足したいと思いました。
Liquibaseで管理されているので、直接DBを変えちゃうと立ち上がらなくなっちゃいます。
結構面倒臭いんですよねLiquibase。</p>
<p>基本的には<a href="https://www.jhipster.tech/development/#database-updates">Using JHipster in developmentのDatabase updates</a>に書いてある通り、です。
3通り紹介されていますが、最初に書かれている<code>entity sub-generator</code>を使った方が、testやi18n、angular側の面倒も見てくれるので楽です。
但し、generateされるjava/json/ts filesについては、面倒でも一つ一つdiffを見て上書きするか考えた方がいいです。場合によっては上書きしない方がいいcaseもありました(repository class、即ちDBを直接叩くclassとかresource class、即ちRest Controllerとか、i18nのglobal.jsonとか、独自に書いたところがあるものは特に)。</p>
<p>新規にtableごと加える時はこれでいいのかもしれません(以前やってうまく行った薄い記憶がありますがよく覚えてません)。
けれども、既存tableにcolumnを足す、となると、
<code>年月日_changelog.xml</code>を作ってくれないので、
いくら<code>gradle</code>かけてもDBのtableを変更してくれないんです。
更に、checksumが合わないといって起動しなくなります。
困ります。</p>
<p>なので、2番目の策を合わせて<code>changelog.xml</code>を作ってもらいます。
そのためには上記ページに書いてあるように、<strong>一旦buildしてから</strong>、
<code>gradle liquibaseDiffChangelog -PrunList=diffLog</code>すると、
class fileのdiffを取って<code>src/main/resources/config/liquibase/changelog/</code>以下にchangelogを作ってくれます。
それを<code>src/main/resources/config/liquibase/master.xml</code>に手で書き入れてからbuildすると、changelogが働いて<code>alter table</code>してくれます。
但しその際、元のtableのxml(<code>年月日_added_entity_テーブル名.xml</code>)をもとに戻しておかないと、「checksumが合わない」と言われるでしょう。</p>
<p>...というように、1番目と2番目の合わせ技的なところが最良のように思います。</p>
<p>どうしてもうまく行かない時、最後は以下の手で何とかなります。なりました。</p>
<ul>
<li>DBは自分で<code>alter table</code></li>
<li>checksumは<code>DATABASECHANGELOG.MD5CHECKSUM</code>にあるので自分で<code>update table set ...</code></li>
</ul>
]]></content></entry></feed>