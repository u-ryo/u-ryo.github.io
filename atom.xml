<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-10-06T02:17:17+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Pro-do by Ukkyo-san]]></title><link href="http://u-ryo.github.io//blog/2017/10/06/pro-do-by-ukkyo-san/"/><updated>2017-10-06T02:17:17+09:00</updated><id>/blog/2017/10/06/pro-do-by-ukkyo-san/</id><content type="html"><![CDATA[<p>もう閉鎖されるというのに何を今更ですが、
ひょんなことから<a href="http://ukkyo.sakura.ne.jp/">未経験２７歳プログラマーへの道（イバラ）</a>を見付けて、一気に読んでしまいました。
最初の企業の話は、まさに今のぼくのと符合するところが多く。
でもこの人、人類みな京大なんですね頭いいんだ... というより、数学的で要領がいいんですね(ってご自分でも書いてますね)。
ぼくも社長メール、しようかなぁ。オーナー社長じゃないから、効き目は無さそうなんですが。
よく読むと、「君は来月以降は５５万／月の金額で契約延長になりました」で「ようやく年収２４０万円」なので、ピンはね率64%だからぼくと同じくらいですね。</p>
<h3>なるほど</h3>
<ul>
<li>とくに流行らない店によく見られる特徴として「特定の客（常連など）に過剰なサービスを提供する」これをしているところが非常に多い。...流行っている店はこれをほとんどしない。逆に新規客（初めて来た客）ほど大切にしろと教育するところもある。基本的に全てのお客様にできないサービスはどのお客様にもしない。</li>
<li>だから他人とコミュニケーションを取るときには気をつけなければいけない。
相手の気持ちを汲んで些細なことでも一言謝ってから話を続けたほうが円滑に進むことが多いのだ。</li>
<li>そういうプログラムを深く追求してこなかったSEの大多数は口を揃えてこう言う。<br  />
「大事なのは技術力じゃない。」<br  />
そういう方々にオレは問いたい。<br  />
「あなた達が売ってるのは何なのですか？」</li>
<li>さて、このような環境でプログラマとして仕事をしていると<br  />
学ぶべき人がいない<br  />
のだ。</li>
<li>お客様としゃべって仕事をもらって、それをこちらに放り投げる。
きっちりと仕様も確定していないからこちらは四苦八苦しながら作っている。
するとそこに時々やってきてはできたか、できたかと聞いてくる。
少し偏見が入っているかもしれないが実際こんなSEが多いみたいだ。
要するに作る、という部分にまるで踏み込まない。</li>
<li>オレはトラックで運送業のバイトをしていた知り合いがいた。
そいつから聞いた話だが車が接触事故にあったときなどの対処法がマニュアルとしてあったらしい。
その接触の状況がどのような、たとえ完全に自分が悪いのだとしても<br  />
まず切れろ<br  />
というものらしい。</li>
<li>どこかで聞いた話であるが９０歳代の人たちにアンケートをとった。
人生で一番後悔している事はなんですか、と。
圧倒的に多かったのが<br  />
「失敗を恐れて何もしなかったこと」<br  />
という答えらしい。</li>
<li>伸びていく人というのはこれからあげる３つの力において合計得点が高い人ではないか、と。
勝手に選ばせてもらったその力というのは<br  /></li>
<li>能力（先天的な能力＋努力）</li>
<li>発明力（物事に対する好奇心＋気付く力）</li>
<li>人間力（人の心の機微がわかる＋性格）</li>
<li>では森君はどうかというと彼ははここがすばらしい。
心の機微に気付くというだけではない。
今だに(ママ)過去のバイト先の上司との付き合いがあったりするらしい。
その人にお世話になったという気持ちを失わず接し続けているからだろう。
人とのつながりを非常に大切にし、常に回りに気を配る。
それに加えて彼の努力家な一面がいい具合にマッチしている。
何人かの森君に対する評価を聞いたが口を揃えたように、彼は教えてあげたくなる人、と言う。</li>
</ul>
<p>あぁ、ぼく性格悪いなぁ、と反省しきりです。
腰低い方がいいんですよ。わかってますよ。営業のTさんとかマネジャーのIさんとか見てるとそう思いますよ、それだけで生きていけるって。
でも、どうしても何か...
これをpride、下らないprideって言うんですかねぇ。
「アルジャーノン」、粗筋しか知りませんが、
やっぱりバカな方がみんなから愛されて幸せなんじゃないかと。
なのになぜ人は頭いい方を目指すんでしょうか。</p>
<ul>
<li>もう一度徹底的に自覚しなくてはならないこと、それは<br  />
人生は有限である。</li>
<li>「現在所持している石炭を使用し、石油を一番効率よく得られる方法を書け。」<br  />
「石炭を売って石油を買う」</li>
<li>よく情報関連のコラムなどを読むと「技術者は技術だけでは生き残れない」という記事を見る。
これはまさしく事実だと思う。
しかしこれらの記事を逆手にとった怠け者が多数存在する。
自分が勉強するのに疲れたもんだから「オレは技術に走らない。」などと言い訳に使うのだ。</li>
<li>ここまで話し合いをしてきて、オレはとうとう本音を。
今まで恐らく誰にも言わなかった（酔ってしゃべったかもしれないが）事を言った。<br  />
オレはあの社長を喜ばせたくないのだ<br  />
どうしてもそんな気になれない。
...
どうもこの辺のやり方が好きではないのだ。
オレが会社に貢献することで結果としてあの社長が喜ぶだろう。<br  />
だからオレは貢献したくないのだ<br  />
自分の会社やその社長を悪く言うのは自分を悪く言うのと同じだ、と教えられてきた。
...
そこで働いている自分の価値をも低くする行為だ、ということだ。
そして自分は裏表のある人間だということを宣伝しているようなものだと。
だから誰にも言わなかった。
しかし心の中にずっと引っかかっていて、もう我慢できずに漏れ出してしまったのだ。</li>
</ul>
<p>ぼくだけじゃなかったんだ! と思った瞬間です。
「社長」じゃなくて「(出向先の)部長」とか「(今いる)会社」とかですけどぼくの場合。</p>
<p>会社の不満だと、最近あったのは、
10月も人売り契約が続くという連絡が9月中に無かったこと。
なので、売られた先に「お世話になりました」メールを敢えて出してやりました。
まー、CTCクビになった時も連絡無かった(偶然他から連絡があって2営業日後に知った)くらいですから。
働いてるのはこっちだっちゅーのに、人売り営業のこっちへの扱いなんてこんなもんです。</p>
<p>あと、自分で環境をcloud上のserverに移した、前のと同じだ、というのに、
動かない、直してくれ、と。
自分でやったのに、ケツをこっちに持ってくるんかい。
環境のcopyも満足に出来ないのに、運用するっていうんかい。
こういうアホな人達の下で働きたくないんですよ。
...あぁ、キリがなくなってきそう。</p>
<p>「プロ道」(プロどう)って言うんですね。
逆境の大阪編の方が面白かったです。
っていうか、大きな外資系入れて凄いなぁ。
人の縁をあんまり大事にして来なかった報いですかねぼくは。
自業自得ですそういう意味では。
徒手空拳で転職するのは難しいですぼくには。</p>
]]></content></entry><entry><title type="html"><![CDATA[Vulnerability POC site]]></title><link href="http://u-ryo.github.io//blog/2017/10/05/vulnerability-poc-site/"/><updated>2017-10-05T23:10:34+09:00</updated><id>/blog/2017/10/05/vulnerability-poc-site/</id><content type="html"><![CDATA[<p>各種POCがありました。</p>
<ul>
<li><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">各漏洞poc、Exp的收集或写</a></li>
</ul>
<p>特にStruts2については、↓にあります。</p>
<ul>
<li><p>https://github.com/coffeehb/Some-PoC-oR-ExP/tree/master/Struts2</p>
</li>
<li><p><a href="https://www.mbsd.jp/blog/20170904.html">Apache HTTP Serverのバージョンを当てる方法</a>
bannerは信じちゃダメですよね。ぼくも対策を求められて面倒くさかったのでbinaryを偽装した覚えがあります。</p>
</li>
<li><p><a href="https://www.lac.co.jp/lacwatch/alert/20170906_001382.html">Apache Struts 2における脆弱性 (S2-052、CVE-2017-9805)は悪用可能と確認</a> に、「既に攻撃コードが公開されており、中国のWebサイトでは URL を入力するだけで脆弱性の有無をチェックするサイトも登場しています」とあるのですが当該サイトの画像だけでlinkが無かったので、探してもらいました。↓</p>
</li>
<li><p><a href="https://www.seebug.org/monster/">Seebug Vulnerability Scan Online Tomcat代码执行漏洞(CVE-2017-12615)</a><br  />
ただ、↑を試したところ、loginしてないと試せなくて、sign upするには電話番号とSNS codeまで必要なので、諦めました。</p>
</li>
<li><p><a href="http://mkt-eva.hateblo.jp/entry/2017/09/11/020530">Apache Struts 2の脆弱性(S2-052)や(S2-053)についてのまとめてみた。</a> POCへのlinkがありました。</p>
</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Enforce FullGC to JavaVM]]></title><link href="http://u-ryo.github.io//blog/2017/10/05/enforce-fullgc-to-javavm/"/><updated>2017-10-05T21:01:51+09:00</updated><id>/blog/2017/10/05/enforce-fullgc-to-javavm/</id><content type="html"><![CDATA[<p>あ、FullGCって強制的にかけられるんですね。</p>
<p><a href="http://cco.hatenablog.jp/entry/2013/05/20/223212">JavaでFull GCを実行する方法</a></p>
<p>要するに、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>jmap -histo:live <span class="nt">&lt;pid&gt;</span>
</span><span class='line'>or
</span><span class='line'>jcmd <span class="nt">&lt;pid&gt;</span> GC.heap_dump <span class="nt">&lt;output</span><span class="na">_filename</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>「生存中のオブジェクトのみ抽出したメモリーマップを作成するために、直前にFull GCを実行するのでこれを利用する」のだそう。「対象のJavaプロセスを実行しているユーザで実行する必要があるので注意」ご尤も。</p>
]]></content></entry><entry><title type="html"><![CDATA[Digest Authentication and File Realm on Glassfish]]></title><link href="http://u-ryo.github.io//blog/2017/10/04/digest-authentication-and-file-realm-on-glassfish/"/><updated>2017-10-04T23:48:38+09:00</updated><id>/blog/2017/10/04/digest-authentication-and-file-realm-on-glassfish/</id><content type="html"><![CDATA[<p>客先から「192.168.1.134にdiget認証のrelmsを作成してください」と
相変わらずわけわかんない指令を受けたので、
「何かに使う『digest』認証を任意の『Realm』で設定」
と解釈して取り組みました。
一番簡単な<code>FileRealm</code>でいいっしょ、
これは4848のGUIからRealms辿って<code>Manage Users</code>ボタンからuser足せばいいし、
Digest Authは<code>&lt;auth-method&gt;DIGEST&lt;/auth-method&gt;</code>で瞬殺、
とか思ってたら、ハマりました。
<code>index.html</code>と<code>web.xml</code>のみの最小構成でproof application作ったのですが、
どうしても認証できないのです。
<code>server.log</code>見ると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>SEC1105: A PasswordCredential was required but not provided.
</span></code></pre></td></tr></table></div></figure>
<p>と言われています。えー!? 何で?
試しにBASIC認証にしてみると、(紆余曲折ありましたが要するに)通ります。
だから、<code>keyfile</code>の書き方が悪いわけでは無いんですね。
勿論色々ググりました。が、なかなか出て来ません類似例。
辛うじて同じような症状があっても、Answerがついてません。
半日悩みました。
GlassfishのRealmって、
JAAS Contextを指定する必要があって、これは<code>.../domains/domain/config/login.conf</code>で規定されているんですね。
これを見ると、
<code>fileRealm</code>は一つなのに、
<code>jdbcRealm</code>と<code>jdbcDigestRealm</code>ってあるぢゃないですか。
をぉ、と思って、source treeを探してみると、
<code>com.sun.enterprise.security.auth.login.DigestLoginModule</code>
というのもあるんですね。
これどうやって使うんでしょうね。
使い方とかも例も、
JavaDocに書いてないしググっても出て来ませんでした。
試しに<code>digestRealm</code>なんて<code>login.conf</code>に他のを真似して、
上の<code>DigestLoginModule</code>を指定して作って使ってみたのですが、
fileから読み込むようにはなっていないようで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>WEB9102: Web Login Failed: com.sun.enterprise.security.auth.login.common.LoginException: Login failed: unable to instantiate LoginModule: null
</span></code></pre></td></tr></table></div></figure>
<p>と言われて失敗してました。
...って、これ<code>abstract class</code>だから当たり前じゃないですか恥ずかしい。
<code>DigestLoginModule</code>をextendsしてるのは<code>JDBCDigestLoginModule</code>だけだから、
file realmで使うなら<code>JDBCDigestLoginModule</code>みたいに自前で作らないとならないんじゃないでしょうかね。
でもそうならどっかにそう書いといてよねー。</p>
<p>結局、大人しく<code>jdbcDigestRealm</code>を使うように変更することで面倒を回避しました。
まぁ、それだけ世にDigest Authenticationのdemandがない、
という証左なのかなと思いました。</p>
<h3>minimum web.xml</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;web</span><span class="na">-app</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee</span>
</span><span class='line'><span class="s">                             http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>
</span><span class='line'>         <span class="na">version=</span><span class="s">&quot;3.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;security</span><span class="na">-constraint</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;web</span><span class="na">-resource-collection</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;web</span><span class="na">-resource-name</span><span class="nt">&gt;</span>Digest Authentication Test<span class="err">&lt;</span>/web-resource-name&gt;
</span><span class='line'>      <span class="nt">&lt;url</span><span class="na">-pattern</span><span class="nt">&gt;</span>/*<span class="err">&lt;</span>/url-pattern&gt;
</span><span class='line'>    <span class="err">&lt;</span>/web-resource-collection&gt;
</span><span class='line'>    <span class="nt">&lt;auth</span><span class="na">-constraint</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;role</span><span class="na">-name</span><span class="nt">&gt;</span>someRole<span class="err">&lt;</span>/role-name&gt;
</span><span class='line'>    <span class="err">&lt;</span>/auth-constraint&gt;
</span><span class='line'>  <span class="err">&lt;</span>/security-constraint&gt;
</span><span class='line'>  <span class="nt">&lt;login</span><span class="na">-config</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;auth</span><span class="na">-method</span><span class="nt">&gt;</span>DIGEST<span class="err">&lt;</span>/auth-method&gt;
</span><span class='line'>    <span class="nt">&lt;realm</span><span class="na">-name</span><span class="nt">&gt;</span>someCreatedRealmUsingjdbcDigestRealmOnJAASContext<span class="err">&lt;</span>/realm-name&gt;
</span><span class='line'>  <span class="err">&lt;</span>/login-config&gt;
</span><span class='line'>  <span class="nt">&lt;security</span><span class="na">-role</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;role</span><span class="na">-name</span><span class="nt">&gt;</span>someRole<span class="err">&lt;</span>/role-name&gt;
</span><span class='line'>  <span class="err">&lt;</span>/security-role&gt;
</span><span class='line'><span class="err">&lt;</span>/web-app&gt;
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Make SqlCipher Faster]]></title><link href="http://u-ryo.github.io//blog/2017/09/28/make-sqlcipher-faster/"/><updated>2017-10-06T00:52:34+09:00</updated><id>/blog/2017/09/28/make-sqlcipher-faster/</id><content type="html"><![CDATA[<p>他に言及しているsourceが全く無かったのでまさかと思っていたのですが、<a href="http://qiita.com/atr-toru/items/d98a434eecf9f58c443d#keyの形式を変えて爆速に">keyの形式を変えて爆速に</a>は本当でした。
試しに、Allcaridaから<code>c.bin</code>だけ持ってきてAndroid sample applicationを作って計測した所、従来のkey(4文字)だと約0.4秒、上記ページ例の64字だと0.02秒と顕著な差がありました。</p>
<p>従いまして、「SqlCipherの<code>key</code>を64文字の16進数にすれば速くなる」が結論です。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>å¾æ¥
</span><span class='line'>09-27 16:25:59.010 30173-30173/sqlcipher.test.jmtech.co.jp.sqlciphertest D/Open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c.bin
</span><span class='line'>09-27 16:25:59.400 30173-30173/sqlcipher.test.jmtech.co.jp.sqlciphertest D/AfterÂ open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c.bin
</span><span class='line'>
</span><span class='line'>64å­key
</span><span class='line'>09-27 16:24:26.060 28517-28517/sqlcipher.test.jmtech.co.jp.sqlciphertest D/Open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c2.bin
</span><span class='line'>09-27 16:24:26.080 28517-28517/sqlcipher.test.jmtech.co.jp.sqlciphertest D/AfterÂ open: /data/user/0/sqlcipher.test.jmtech.co.jp.sqlciphertest/databases/c2.bin
</span></code></pre></td></tr></table></div></figure>
<p>そこで、実際にAllcaridaで<code>c.bin</code>,<code>r.bin</code>だけ64字key版を作って「履歴一覧」画面表示を比較してみると、従来約3.5秒のところ約0.2秒で開けることを確認しました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>å¾æ¥ 3.46ç§(ç´0.6ç§Ã5+Î±)
</span><span class='line'>09-27 17:53:03.670 9054-9054/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;HistoryMainActivity</span><span class="err">#</span><span class="na">activityStart:49</span><span class="nt">&gt;</span>&gt; å±¥æ­´ä¸è¦§
</span><span class='line'>09-27 17:53:03.680 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c.bin Open
</span><span class='line'>09-27 17:53:04.360 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:04.380 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r.bin Open
</span><span class='line'>09-27 17:53:05.010 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:05.050 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c.bin Open
</span><span class='line'>09-27 17:53:05.710 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:05.720 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r.bin Open
</span><span class='line'>09-27 17:53:06.370 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:53:06.390 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r.bin Open
</span><span class='line'>09-27 17:53:07.030 9054-10071/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>
</span><span class='line'>64å­key 0.21ç§(0.0+0.01+0.01+0.02+0.03+Î±)
</span><span class='line'>09-27 17:50:57.350 4493-4493/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;HistoryMainActivity</span><span class="err">#</span><span class="na">activityStart:49</span><span class="nt">&gt;</span>&gt; å±¥æ­´ä¸è¦§
</span><span class='line'>09-27 17:50:57.360 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c2.bin Open
</span><span class='line'>09-27 17:50:57.360 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.400 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r2.bin Open
</span><span class='line'>09-27 17:50:57.410 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.460 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; c2.bin Open
</span><span class='line'>09-27 17:50:57.470 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.480 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r2.bin Open
</span><span class='line'>09-27 17:50:57.500 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span><span class='line'>09-27 17:50:57.530 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:964</span><span class="nt">&gt;</span>&gt; r2.bin Open
</span><span class='line'>09-27 17:50:57.560 4493-5754/jp.ideacross.allcardia.main D/After: <span class="err">&lt;</span><span class="nt">&lt;DatabaseHelper</span><span class="err">#</span><span class="na">open:970</span><span class="nt">&gt;</span>&gt; After Database Open
</span></code></pre></td></tr></table></div></figure>
<p>More concretely,</p>
<p><code>SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(databaseFile, "x\'2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99\'", null);</code></p>
<p>in Java.</p>
<p>To get a rekeyed file,</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo apt install sqlcipher
</span><span class='line'>$ sqlcipher /tmp/c.bin
</span><span class='line'>SQLCipher version 3.15.2 2016-11-28 19:13:37
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt; PRAGMA key = &#39;7824&#39;;
</span><span class='line'>sqlite&gt; ATTACH DATABASE &#39;c2.bin&#39; AS c KEY &quot;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&quot;;
</span><span class='line'>sqlite&gt; SELECT sqlcipher_export(&#39;c&#39;);
</span><span class='line'>
</span><span class='line'>sqlite&gt; DETACH DATABASE c;
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>
<p>You'll get <code>c2.bin</code> with the new 64bit key.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sqlcipher r.bin
</span><span class='line'>SQLCipher version 3.8.6 2014-08-15 11:46:33
</span><span class='line'>Enter &quot;.help&quot; for instructions
</span><span class='line'>Enter SQL statements terminated with a &quot;;&quot;
</span><span class='line'>sqlite&gt; PRAGMA key = &quot;7824&quot;;
</span><span class='line'>sqlite&gt; ATTACH DATABASE &#39;r2.bin&#39; AS r KEY &quot;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&quot;;
</span><span class='line'>sqlite&gt; SELECT sqlcipher_export(&#39;r&#39;);
</span><span class='line'>
</span><span class='line'>sqlite&gt; DETACH DATABASE r;sqlite&gt; PRAGMA user_version;
</span><span class='line'>0
</span><span class='line'>sqlite&gt; PRAGMA user_version = 6;
</span><span class='line'>sqlite&gt; PRAGMA user_version;
</span><span class='line'>6
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>
<p>You'll get <code>r2.bin</code> with the new 64bit key and version 6.</p>
<p><code>PRAGMA user_version</code> is needed because in SQLiteOpenHelper class judges whether it calls <code>onCreate</code>(table creation) by <code>db.getVersion()</code>.
<a href="http://d.hatena.ne.jp/isher/20091108/1257684508">[Android]データベースをアップグレードする時</a></p>
<p>そもそも画面遷移に4秒も掛かるようなAndroidアプリをリリースするなんていうのもunbelievableですが、そういう人達なので...</p>
<p>まぁ、暗号化するにせよ自分なら<a href="https://realm.io/">Realm</a>使うので、こんな知識不要ですけど、SqlCipher使うなら最初から64字16進code使うべきなんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Test Failed on AndroidStudio]]></title><link href="http://u-ryo.github.io//blog/2017/09/28/test-failed-on-androidstudio/"/><updated>2017-10-06T00:54:10+09:00</updated><id>/blog/2017/09/28/test-failed-on-androidstudio/</id><content type="html"><![CDATA[<p>Android Studio(2.3.1)で久し振りにtestを動かしてみると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Caused by: java.lang.ClassNotFoundException: android.view.View$OnClickListener
</span></code></pre></td></tr></table></div></figure>
<p>と言われて動かなくなりました。
instrumentation testではなくフツーのtestですjunit4とmockitoの。
<a href="https://stackoverflow.com/questions/14213219/java-lang-noclassdeffounderrorandroid-and-junit-test">java.lang.NoClassDefFoundError:android and junit test</a>を見付けて、えーとか思いつつもやってみたら、確かに直りました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ rm -rf .gradle
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[BotUI - ChatBot only by JavaScript]]></title><link href="http://u-ryo.github.io//blog/2017/09/26/botui-chatbot-only-by-javascript/"/><updated>2017-09-26T01:33:45+09:00</updated><id>/blog/2017/09/26/botui-chatbot-only-by-javascript/</id><content type="html"><![CDATA[<p><a href="http://paiza.hatenablog.com/entry/2017/09/21/﻿JavaScriptだけで本格的なチャットボットを開発できる">paiza開発日誌</a>で紹介されていた<a href="https://github.com/botui/botui">BotUI</a>、なるほど予め型にはまった会話ならこれだけでお手軽にJavaScriptだけで(<code>.then(function(){...})</code>で繋ぐだけで)出来ちゃうんですね。注文を取るとか、特定のAPI叩く(Wizardを会話でやる)とか、サポートセンターで特定の電話番号につなぐとか。AIは使ってないので、user側の曖昧な自然言語を受け取って処理する、というものではないですけど、そういうのに繋げればいい? いや、IBMのWatsonとかみると、そういう会話のplatformも含めて提供しているので、そうなるとBotUIの出番は無い筈。
<a href="https://webhacck.github.io/botui-sample/">Git Repositoriesの総数を答えるsample</a>は、<a href="https://examples.botui.org">公式のsamples</a>より面白かった(興味深かった)です。</p>
]]></content></entry><entry><title type="html"><![CDATA[S Rank of CodeIQ]]></title><link href="http://u-ryo.github.io//blog/2017/09/25/s-rank-of-codeiq/"/><updated>2017-09-26T00:26:43+09:00</updated><id>/blog/2017/09/25/s-rank-of-codeiq/</id><content type="html"><![CDATA[<p>もう昨日のことですが、<a href="https://paiza.jp/challenges/share/Ku6dnsSr8gw5zINY0ItXIQ1UXOOdmh6Xl_0akPz7zwo">Paiza</a>に続いてようやっと<a href="https://codeiq.jp">CodeIQ</a>でも<a href="https://codeiq.jp/badge/3116">Sランク取りました</a>。</p>
<p>まぁ、u-ryoさんなら当然だよね、とか言われておしまいでしょうけど。</p>
<p><a href="https://paiza.jp/challenges/share/UwlvLJ8wbTeDuWz-kV7g2vpFehW0vZE-wI-qg56WM98">Paizaにあった似た問題</a>(←これで見ると失敗もありますが、これは最初に提出したcodeについてで、後でちゃんと全部通るようにしてます)からcode引っ張ってきて、でも勿論そのままでは使えなくて。土曜未明の一晩で終えるつもりが、間にバイトやmachine troubleを挟んで日曜の午後までかかっちゃいました。ふと探してみると、<a href="http://ideone.com/pfoy7z">まんまのcode</a>があるのにはびっくり。流石にそのままっていうのは癪なので、「直前の方向を使う」というideaと検算にだけありがたく使わせてもらいました。
探索順の違いによるエラーをなかなか潰せなくて。そっか全探索なのね、そのためには... BFSではなくDFSか、と辿って、あーそっか、その違いはstackかqueueかだけか、に最後の最後気付いてgoalでした。何か色々忘れてて、こういうのやり続けてないと錆び付いてたなーというのを思い知らされました。この手のalgorithm系は集中してやらないと!</p>
<p>コメント書きすぎでしょうか。でもまんまの置いてあるよりは遥かにマシかと。</p>
]]></content></entry><entry><title type="html"><![CDATA[Images in README.md on Github]]></title><link href="http://u-ryo.github.io//blog/2017/09/20/images-in-readme-md-on-github/"/><updated>2017-09-20T01:27:50+09:00</updated><id>/blog/2017/09/20/images-in-readme-md-on-github/</id><content type="html"><![CDATA[<p><a href="https://github.com/">Github</a>の<code>README.md</code>にscreen shotとか画像を貼りたかったんですけど、どうしたものなんでしょう。説明用のimagesをsource codeと一緒に置いておくというのも何か野暮なので。幾つかやり方があるようです。</p>
<ol>
<li>image用の別branchを切る(e.g. <a href="https://github.com/cakecatz/garage">https://github.com/cakecatz/garage</a>)</li>
<li>Githubのissueを利用する(<a href="https://www.youtube.com/watch?v=hHbWF1Bvgf4">GitHub Readme Images Tutorial (screenshots in readmes)</a>)</li>
<li>Githubのwikiを利用する(<a href="https://www.pupha.net/archives/1632/">GitHubに画像ファイルを保存してREADME.mdで表示する方法</a>)</li>
</ol>
<p>issueに画像をDrag and Dropすると、https://user-images.githubusercontent.com/... に自動的にuploadしてURLが得られるなんて知りませんでした。でもこれ、いつまで持っててくれるんでしょう、というのと、消したい時に消せるのかな? というのがあって。やっぱり自分でcontrol持っておきたいでしょう。(<a href="https://qiita.com/kotet/items/a2203a400136ba50b41e">GitHubのissueを悪用して画像をホストする</a>)</p>
<p>別branchを切ると、一旦画像以外全部消さないとならなくて、
何となくそれがちょっと嫌だったので、結局wikiを利用しました。
一度何でもいいのでWikiのpageを保存しないとならないみたいです。
一度保存しちゃえば、上記ページに書いてあるように<code>git clone https://github.com/.../XXX.wiki</code>で取ってこられて、images作って置けちゃうんですね。へー。</p>
]]></content></entry><entry><title type="html"><![CDATA[gitignore]]></title><link href="http://u-ryo.github.io//blog/2017/09/20/gitignore/"/><updated>2017-09-20T01:51:29+09:00</updated><id>/blog/2017/09/20/gitignore/</id><content type="html"><![CDATA[<p>前も書いたような気がしますけど、<code>.gitignore</code>は<a href="https://gitignore.io/">gitignore.io</a>で。ここでgenerateしたものに置き換えてみたんですが、<code>git status</code>はあんまり変わりませんでした。記述量は確かに増えていたので、良くはなっているんでしょう...</p>
<p>AndroidStudio用に引っ張ってきたんですけど、そのままだと<code>.idea/kotlinc.xml</code>が入ってきてしまうようです。<code>kotlinc.xml</code>はversion管理不要ですよね?
逆に、<code>.idea/gradle.xml</code>はversion管理下に、という話が<a href="http://www.torutk.com/projects/swe/wiki/Android_Studioのバージョン管理対象ファイル">Android Studioのバージョン管理対象ファイル</a>、<a href="http://qiita.com/komax/items/d1aaecaec0a22cb5bc4e">Android Studioでバージョン管理下に置かないもの</a>、<a href="http://gihyo.jp/dev/serial/01/android_studio/0035">第35回　バージョン管理 ─プロジェクト管理ファイルについて［後編］</a>と出て来るんですが、<code>gitignore.io</code>のfileではexplicitlyにignore対象なんですよね...</p>
<p>試してみると、特に<code>.idea/</code>が無くてもAndroid Projectとして開けますね。じゃ全部要らないのかな。</p>
]]></content></entry><entry><title type="html"><![CDATA[Personal Information Leak Incident]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/personal-information-leak-incident/"/><updated>2017-09-17T17:12:32+09:00</updated><id>/blog/2017/09/16/personal-information-leak-incident/</id><content type="html"><![CDATA[<p>先日派遣先で、5万数千件にのぼる個人情報漏洩を見付けてしまいました。</p>
<p>その会社ではチンケなECサイトをやってるんですけど、
といっても再販の再販までされてて何百人にも使われちゃってますが、
中身は2000年代前半〜中盤のcode。未だにJSP(一部Java)。
今やもうJavaEEから外れたっていうのに。
OSやlibrary、middlewareもsupport切れで無いものは無いという。
http/https混在、userのpasswordもDBに平文で保存してるくらい、
設計思想からして古いままのものです。WAFも入ってないといいますし。
早晩、こんなことが起こるだろうと傍で見ていて思っていましたが、
現実になり、しかも発見者がぼくだとは。
ぼく一応これ、部外者なんですけど。
同じように派遣されててそっちも手伝っている同僚から、
こんなaccessが沢山来てるってattack patternを見せられて。
不覚にも最初は一般的な定期巡回sql injectionかと思ってました。
Googleで調べると、<a href="https://serverfault.com/questions/541401/mysql-injection-attacks-random-urls-causing-errors">そういうのが載ってた</a>んです。</p>
<p>(<a href="https://github.com/ron190/jsql-injection">jsql-injection</a>
かとも思ったんですが、試してみるとちょっと違うかも。
Havij ProはWindowsだしちょっと怖いので入れてません)</p>
<p>ともあれ、だから単なる下調べ的なattackかと思ってました当初は。
しかし、</p>
<ol>
<li>IP遮断してもIP変えてやって来るくらいしつこい(IP元はHK,US,JP,CN,UK等々)</li>
<li>しかも同じようだが微妙に違うrequestを大量にする</li>
</ol>
<p>というところからすぐにピンとくるべきでした。
翌週になって、そういえば見せられたqueryに
このサイト固有の名前が入っていたな、
というところから、ちょっと実際に叩いてみたんですね。
そしたら...</p>
<p>あらま。</p>
<p>確かによく見たらqueryの中に「MAIL、PASSWD、TEL」の文字が。
見事に抜かれてました。
各queryの違いは、<code>lImIt</code>の数。
これを変えて、順々に取って行ってたんですね。
後でわかったことですが、固有名が無くても<code>information_schema</code>から
table名1個ずつ抜けるんですね。</p>
<p>attackがあったのが木曜、ぼくが気付いたのが翌週月曜、
log解析依頼されて、調べてみるとMAIL AddressとかPASSWDが5万数千件は
抜かれてました。
その他、抜かれてたのはショップ運営者の方のID、MAIL、PASSWDも。
それは6月19日に起きてました。
今までずっと気付いてなかったという。
再販先と連絡取って、すぐサイト全体落としたんですけど、
全体をこれまでのオンプレミスサーバ群からクラウドに移行したということで、
また再開したそうです(WAFは入れると言ってはいましたが)
(しかも移行したといってもミスがあるらしくすぐにはうまく行っていないとかで、
自分でやっといて直せないなんてアホの極みだと。
その不具合修正をぼくに求めてくるという。
確かにぼくはJava expertなので、
なんで見当違いのところで騒いでるのかくらいの指摘はしてあげましたけど、
自分の尻くらい自分で拭ったらどうですか?と)。</p>
<p>色々信じられません。</p>
<p>元々彼らの思考には付いていけてなくて。
今自分がやらされているprojectの方でも、
serverのlogic追ってったら「これ認証無いですよ」
って言っても改善せずそのまま、
他人の電話番号とか情報を抜けるPOC作って示しても、
「そのPOC書くのにどのくらい時間かけた?」とか聞いてくる始末。
もう匙投げてました。
っていうか、こんな人もいるんだ、と勉強になりました。
更に言えば、日本のsecurity意識って一般的にはこんなもんなんでしょうか。</p>
<p>本当は、この実態を再販先等に告発した方が社会正義のためだと
思うんですけれども、
西宮冷蔵社長の例を鑑みても告発者が報われない社会なのは明らかなので、
黙っているしか無いのかと悲しい思いをしています。</p>
<p>早くこんなとこから抜け出さないと、イケマセン。</p>
]]></content></entry><entry><title type="html"><![CDATA[Getting Prize S Level Programmer at Paiza]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/getting-prize-s-level-programmer-at-paiza/"/><updated>2017-09-17T17:26:07+09:00</updated><id>/blog/2017/09/16/getting-prize-s-level-programmer-at-paiza/</id><content type="html"><![CDATA[<p>先日、<a href="https://paiza.jp/challenges">Paizaのスキルチェック</a>で
<a href="https://paiza.jp/challenges/share/0njRogbXZnuXG_Dt_noi_u1lW1Bl4R262Je2koUAjNA?source=social">時間切れ0点</a>を取ってしまったので、
癪だからランクS、本気で取りに行きました。
<a href="https://paiza.jp/challenges/share/BpVEE0xUqzek-gFkhWaalVEwoIv7rpTSXnDL6cOC4eo?source=social">ひとりすごろく</a>は第一次制限時間の40分を超えてしまったので、
全ケース通ったんですけど95点でSではなくA判定。
やっぱり時間が大事なんですね。
Javaで「早く」書くのは確かにキツイです。
ので、次は50点の制限時間が2時間の<a href="https://paiza.jp/challenges/share/Ku6dnsSr8gw5zINY0ItXIQ1UXOOdmh6Xl_0akPz7zwo?source=social">ビリヤードの玉突き</a>に挑戦しました。
こちらは、問題中にヒントを書いていてくれていることもあり、
60分で解答を提出、ようやっとSランクをゲットできました。
今までAランクでいっか、とか思ってて、S問題はゆっくりやって、
再チャレンジでcodeをbrush upして100点を取ってたんですけど、
それより時間が大事、なんですかね。
いや、実務では分を争う程、そこまでsevereではないので...
それに、paizaでいくら頑張っても、
小さいとこばっかりであんまり行きたい先が無いので、虚しいんです。</p>
]]></content></entry><entry><title type="html"><![CDATA[Challenging Paiza TSP]]></title><link href="http://u-ryo.github.io//blog/2017/09/13/challenging-paiza-tsp/"/><updated>2017-09-17T17:27:16+09:00</updated><id>/blog/2017/09/13/challenging-paiza-tsp/</id><content type="html"><![CDATA[<p>8/13はPaizaの日、ということで、巡回セールスマン問題を出題していました。
<a href="https://paiza.jp/works/algorithm/primer/algorithm3">Paizaラーニングでも巡回セールスマン問題のさわり(貪欲法)を取り上げていて</a>、
2-OptやSimulatedAnnealing(焼きなまし法)を<a href="https://github.com/eugenp/tutorials/blob/3abb98e9e8acc7efe3f9f8423fcf0f8934655be7/algorithms/src/main/java/com/baeldung/algorithms/ga/annealing/SimulatedAnnealing.java">学んで</a>、
いざ書いてみたんですが、なかなかうまく行きません。
テストデータは<a href="http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/tsp/">有名ドコロ</a>があります。
まずはatt48で2-Optでやってみたものの、
交差線が多く、全然それっぽい経路が得られません。
なんでーーー!?
<a href="http://ist.ksc.kwansei.ac.jp/~tutimura/GraphApplication/">Javaによるまんまのコード</a>があったので、
読み解いていったんですけど時間かかっちゃって、
結局Paizaの締切9/12に間に合いませんでした...
何たること。</p>
<p>どうも、キモはswapにあるようで、
点を交換すると総延長が短くなる場合、
当然点を交換するんですが、
当該点だけを交換するだけじゃなく、
そこから真ん中へ向かってずっと点を交換していくんですね。
そうかー。</p>
<p>悔しいから、久し振りにPaizaのS問題やってみました。
最も簡単そうな最小辞書順列にしてみました。
けれど、問題の意味を理解するのと、JavaのStreamで書ききったために、
制限の2時間、あっという間に過ぎてしまいました。<a href="https://paiza.jp/challenges/share/0njRogbXZnuXG_Dt_noi_u1lW1Bl4R262Je2koUAjNA?source=social">0点確定</a>です。トホホ。
しかも、提出したコードは、2つの場合だけ通らずに、80点。
どうしてコケる時があるのか、思い当たるフシもなく、未だにわかっていません。
テストデータ、見せて欲しいです。</p>
]]></content></entry><entry><title type="html"><![CDATA[hostapd after that...]]></title><link href="http://u-ryo.github.io//blog/2017/09/06/hostapd-after-that/"/><updated>2017-09-06T22:22:29+09:00</updated><id>/blog/2017/09/06/hostapd-after-that/</id><content type="html"><![CDATA[<p>何か、不安定ですhostapd。
昨夜は、何故か出勤後の9:58に勝手に謎のrebootしてたし、
今日も帰宅後、NotePCがWiFiで繋がらないから試行錯誤すると、
一旦USB WiFiドングル抜き差ししてhostapdをstop/startしたら、漸く。
でも、1秒毎にreconnectしたりして、もう何だか。
やっぱり、何かWiFi station買ってこないとダメなのかなー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Grain on CodeAnywhere]]></title><link href="http://u-ryo.github.io//blog/2017/09/06/grain-on-codeanywhere/"/><updated>2017-09-06T22:03:32+09:00</updated><id>/blog/2017/09/06/grain-on-codeanywhere/</id><content type="html"><![CDATA[<p>ちょっと、やっぱりダメですね。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>java.lang.RuntimeException: While executing class com.sysgears.grain.registry.Registry.compile
</span><span class='line'>        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
</span><span class='line'>        :
</span><span class='line'>        :
</span><span class='line'>Caused by: java.net.SocketTimeoutException: Accept timed out
</span><span class='line'>        at java.net.PlainSocketImpl.socketAccept(Native Method)
</span></code></pre></td></tr></table></div></figure>
<p>といわれて、<code>./grainw generate</code>も<code>./grainw gendeploy</code>も出来ません。
あーあ、なぁんだ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Current Project I'm working in]]></title><link href="http://u-ryo.github.io//blog/2017/09/06/current-project-i-m-working-in/"/><updated>2017-09-06T22:03:07+09:00</updated><id>/blog/2017/09/06/current-project-i-m-working-in/</id><content type="html"><![CDATA[<p>今、グループ内会社のAndroidアプリ開発に売られてるんですけど、そこのソフトの作りがひどくてひどくて泣けてきます。</p>
<ol>
<li>「結果が表示されなくなった」というので見てみたら、<code>toString()</code>が変わっていたのが原因。より根本的な原因は、<code>toString()</code>というdebug用途のmethodをoverrideしてmainのlogicに使っていること。まぁ、Activity跨ぐstructured dataを<code>Parcelable</code>にする時間が無かった、という事情は分かるんですけど、<code>StringBuilder#toString</code>ですら使わず<code>new String(StringBuilder)</code>とするくらいなのでぼくは。</li>
<li>「途中で落ちる」というので見てみると、ヌルポが出てました。どうしてかなー、と見ていくと、途中でnullを代入しているmethodが呼ばれています。どうしてこれを呼ぶよう変えたのか聞いてみると、終了処理をちゃんとするようしてる時に、comment outしてあったこのfinishっぽいmethodをcomment inしたんだそう。それがどういう効果を持つのかわからぬまま、そうしたんだって。えーーーっ!?</li>
<li>極めつけは、今日わかったんですが、<code>HashMap</code>を<code>List</code>にしてその0番目を使ってるんですね。えーーーっ! どうしてAndroid 4.4.2ではうまく動かないの? というのを探っていったら、そこに行き着きました。逆に、これまでよく動いていましたねぇ。素晴らしい!! 先月までいた派遣のフリー技術者が書いたcodeの一部でしたけど、わざと書いたならいざ知らず、もし意識せず書いたのなら、恐ろしいです。</li>
</ol>
]]></content></entry><entry><title type="html"><![CDATA[Illegal keysize]]></title><link href="http://u-ryo.github.io//blog/2017/09/04/illegal-keysize/"/><updated>2017-09-04T02:32:48+09:00</updated><id>/blog/2017/09/04/illegal-keysize/</id><content type="html"><![CDATA[<p>Androidで<a href="https://github.com/NanoHttpd/nanohttpd">NanoHTTPD</a>を
動かすprogramを開発しているんですが、
WebRTCにするのに、TLSが必要じゃないですか。
そのserver certを普通に作ると、<code>Illegal keysize</code>と言われて
key load時に落ちるのでハマりました。
<a href="https://github.com/NanoHttpd/nanohttpd#generating-an-self-signed-ssl-certificate">NanoHTTPDの解説</a>にあるように、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 360 -keysize 2048 -ext SAN=DNS:localhost,IP:127.0.0.1  -validity 9999
</span></code></pre></td></tr></table></div></figure>
<p>と作ってもダメでした。
色々調べると、AndroidにはBouncyCastle(BKS)でないとならないらしく、
証明書は面倒なのでsnakeoilを流用して、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo openssl pkcs12 -export -in /etc/ssl/certs/ssl-cert-snakeoil.pem -inkey /etc/ssl/private/ssl-cert-snakeoil.key -out ~/AndroidStudioProjects/SharedEye/ssl-cert-snakeoil.p12 -name ssl-cert-snakeoil
</span><span class='line'>$ /usr/lib/jvm/java-8-oracle/bin/keytool -importkeystore -deststorepass password -destkeypass password -destkeystore snakeoil.jks -srckeystore ssl-cert-snakeoil.p12 -srcstoretype PKCS12 -srcstorepass password -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk15-1.46.jar
</span></code></pre></td></tr></table></div></figure>
<p>とすると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Problem importing entry for alias java.security.KeyStoreException: java.io.IOException: Error initialising store of key store: java.security.InvalidKeyException: Illegal key size.
</span></code></pre></td></tr></table></div></figure>
<p>と言われてimport出来ませんでした(→jksが作れませんでした)。
かなり悩んだのですが、結局<a href="http://qiita.com/mizuki_takahashi/items/cc26a7fd51aa04396e92">JavaでAES256を使用できるようにする</a>にあるように、
JCE(Java Cryptography Extension)を落としてきて
<code>local_policy.jar</code>を上書きしたら、
jksも出来て、Android側でも何事もなくloadしてくれました。</p>
]]></content></entry><entry><title type="html"><![CDATA[revive hostapd]]></title><link href="http://u-ryo.github.io//blog/2017/09/03/revive-hostapd/"/><updated>2017-09-04T02:35:32+09:00</updated><id>/blog/2017/09/03/revive-hostapd/</id><content type="html"><![CDATA[<p>家のオンプレミスサーバが最近五月蝿く、
何か常に3.4GHz近くまでいっていて電気食ってるようなので、
1年弱ぶりに止めてみました。
すると、次、立ち上げた時、
繋げていたPlanexの11/n/g/b Real Portable Wi-Fi Router
<a href="www.planex.co.jp/product/router/mzk-rp150n/point.shtml">MZK-RP150N</a>
が死にました。
通電はしているようなのですが、
Wi-Fiは繋がらず(ランプも消灯)、resetかけようとマニュアル探して、
その通りにボタン10秒以上長押ししてもPowerランプがつかず。
USB刺してすぐはPowerランプとWirelessランプが暫時点灯するので、
ランプの故障ではない模様。
また、ケーブルがInternet側でもLAN側でも、設定したIP、
defaultのIP、どんなIPでも繋がらず(ping不通)。
ノートPCと直接LANで繋いでpacket captureしても、
packetは漏れてこず。
どうしようもないので、家庭内LANから取り外しました。
けどWi-Fiがないのは不便すぎます。
そこで、余っていたUSB WiFiドングルをオンプレミスサーバに挿し、
実に久し振りにhostapdにしてみました。
21世紀初頭、hostapdで頑張っていたんですが、
設定が面倒臭かったから、MZK-RP150N買ってきたのに、
今はhostapd、凄い簡単になったんですね。
かつてはhostapdが出来るchipから気にしなきゃいけなかったのに、
今やその辺のドングル刺しても大丈夫なんですか。隔世の感。
こういうのは時に応じて調べなきゃならないと思うので、
ここで設定の覚書を書いといても無駄な気がしますけど、一応。</p>
<ul>
<li><code>apt install hostapd</code></li>
<li><code>/etc/hostapd/hostapd.conf</code>を編集</li>
<li>bridgeは必要(ウチの場合)→<code>/etc/network/interfaces</code>に<code>br0</code>の設定要</li>
</ul>
<h1>hostapd.conf</h1>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>interface=wlan0
</span><span class='line'># automatically register wlan0 to br0
</span><span class='line'>bridge=br0
</span><span class='line'># Wireless LAN adapter driver(fixed value)
</span><span class='line'>driver=nl80211
</span><span class='line'># SSID name
</span><span class='line'>ssid=...
</span><span class='line'># 802.11g/a/...
</span><span class='line'>hw_mode=g
</span><span class='line'># Enable 802.11n
</span><span class='line'>ieee80211n=1
</span><span class='line'># channel=60 when 802.11a
</span><span class='line'>channel=7
</span><span class='line'>wpa=2 # WPA2
</span><span class='line'># passphrase for WPA2
</span><span class='line'>wpa_passphrase=...
</span><span class='line'># stealth
</span><span class='line'>ignore_broadcast_ssid=1
</span><span class='line'># Mac Address ACL
</span><span class='line'>macaddr_acl=1
</span><span class='line'># file for Mac Address ACL (permission should be 600)
</span><span class='line'>accept_mac_file=/etc/hostapd/hostapd.accept
</span><span class='line'>wpa_key_mgmt=WPA-PSK
</span><span class='line'>rsn_pairwise=CCMP
</span></code></pre></td></tr></table></div></figure>
<p>あと前やったのに書き方忘れてたのが、
<code>/etc/network/interfaces</code>の<code>br0</code>設定。</p>
<h1>interfaces</h1>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>iface br0 inet static
</span><span class='line'>	bridge_ports eth1
</span><span class='line'>	bridge_stp off
</span><span class='line'>	bridge_maxwait 0
</span><span class='line'>	address 192.168.X.X
</span><span class='line'>	netmask 255.255.255.0
</span></code></pre></td></tr></table></div></figure>
<p>iptalesの設定も変更忘れないように。</p>
<p>Planex MZK-RP150NではMac Address制限が出来なかったので、
ちょっぴり安心に。</p>
<p>ですが、<code>hostapd.accept</code>書き換えても
<code>sudo service hostapd restart</code>しないと反映されず、
restartすると<code>br0</code>消えるっぽいので、注意です。
<code>hostapd stop</code>して<code>ifup br0</code>、
<code>hostapd start</code>するのが正しい手順でしょうか。
その間ノートPCからは接続切れるので、これも気を付けませんと。</p>
<p>それと、
<a href="http://qiita.com/KuwabataK/items/5903c7584657151d576a">コマンド一発でLinuxマシンを即席無線LANルーターにできる「create_ap」がすごい便利だった</a>は、
別件で使ってみましたが、ホントにすぐにhostapからbridge、
dhcpまで出来て感動モノでした。
今読んで、<code>haveged</code>というのを初めて知りました。
オンプレミスサーバにはentropyが足りなかったので入れてみて、
確かにentropyは上がりましたが、
Wireless LANがホントに早くなるのかどうか...
(確かに遅い感じはしてました)。</p>
]]></content></entry><entry><title type="html"><![CDATA[information products]]></title><link href="http://u-ryo.github.io//blog/2017/08/30/information-products/"/><updated>2017-08-30T23:20:41+09:00</updated><id>/blog/2017/08/30/information-products/</id><content type="html"><![CDATA[<p>転職活動用の書類をなかなか書けなくて、
現実逃避にFXとか調べてるうちに、
情報商材に行き着きました。
真面目によさ気なのは、</p>
<ul>
<li>FXだと<a href="www.w-crew.com/fxvictory/">佐野裕氏『ビクトリーメソッドアドバンス(VMA)』</a></li>
<li>株だと<a href="http://best-pln.com/">投資顧問ベストプランナー</a></li>
</ul>
<p>の評価が高いです。
やっぱ、こういうのやらないとダメなのかなー。</p>
]]></content></entry><entry><title type="html"><![CDATA[learning ruby and python3]]></title><link href="http://u-ryo.github.io//blog/2017/08/29/learning-ruby-and-python3/"/><updated>2017-08-30T07:06:14+09:00</updated><id>/blog/2017/08/29/learning-ruby-and-python3/</id><content type="html"><![CDATA[<p>paiza learningの<a href="https://paiza.jp/works/ruby/primerfemale">Ruby入門編</a>のコース、一部が期間限定無料だったので、やってみました。
女の子の声、何かいいですね。
内容は「入門編」だけにifやloopやarray等ホントに基本的なことで、ぼくには易しすぎですけど、演習問題で学習内容を確認出来るのがいい感じです。ただ、まだ有料部分もあり、そういう所は動画が見られないのは当然としても、演習問題も出来ないとは。
物足りないので、<a href="https://paiza.jp/works/python3/primer">python3の入門編</a>もやっちゃいました。こちらは全編無料ですし。でも、やっぱりホント基本的なことですね。あと、rubyとpython、同時にやるもんじゃないです。<code>puts</code>とか<code>print</code>は勿論、<code>gets</code>と<code>input()</code>、<code>elsif</code>と<code>elif</code>等、色々ごっちゃになっちゃいます。rubyの方が後発のいいとこ取りなだけに、配列範囲外アクセスでもエラーにしない等洗練されてる印象。ただ、<code>puts</code>や<code>gets</code>は英語がヘン、というか独特な気が。日本人だから? 紹介されてたrubyのfor loop(<code>each do |x| ... end</code>)は、<code>do</code>と書かないで<code>each{|x|...}</code>と書けばJava8のStreamingと同じなんですね。<code>each</code>って<code>map</code>とかと同じ。なるほど、最初からそうなってるんだ、と納得です。</p>
]]></content></entry></feed>