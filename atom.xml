<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2016-09-21T13:26:56+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[SoftEther Client memo]]></title><link href="http://u-ryo.github.io//blog/2016/09/21/softether-client-memo/"/><updated>2016-09-21T13:26:56+09:00</updated><id>/blog/2016/09/21/softether-client-memo/</id><content type="html"><![CDATA[<p>SoftEtherのClientを起動する際の自分用のcommand log。
自動化しちゃえばいいんでしょうが...</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo /usr/local/vpnclient/vpnclient start
</span><span class='line'>$ /usr/local/vpnclient/vpncmd localhost /cmd accountconnect mickey
</span><span class='line'>$ sudo ip addr add 192.168.120.10/24 dev vpn_nic0
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Recent package managements]]></title><link href="http://u-ryo.github.io//blog/2016/09/20/recent-package-managements/"/><updated>2016-09-20T15:28:17+09:00</updated><id>/blog/2016/09/20/recent-package-managements/</id><content type="html"><![CDATA[<p>これも忘れないうちに。</p>
<p>最近のpackage管理は、便利になってるんですけど、用途によって色々と分かれてしまっているので、却って使いづらいというか。<code>apt-get install</code>でいいじゃん... ってのは、ダメなんですかねぇ。</p>
<ul>
<li><a href="http://sdkman.io/">SDKMAN!</a>(GVMの後継。Java系(Groovy,Ant,Kotlin,Maven,Scala,grails,JBoss Forge,...)のinstall、version管理に。installationは<code>curl -s api.sdkman.io|bash</code>)</li>
<li><a href="https://github.com/tj/n">n – Interactively Manage Your Node.js Versions</a>(Nodeのinstall、version管理に。<code>sudo npm install -g n</code>でinstall、<code>sudo n latest</code>で最新のnode.jsが入る)</li>
<li><a href="https://github.com/cask/cask">cask</a>(<a href="http://qiita.com/tadsan/items/6c658cc471be61cbc8f6">2015年Emacsパッケージ事情</a>)</li>
<li><a href="https://github.com/dimitri/el-get">El-Get</a>(<a href="http://tarao.hatenablog.com/entry/20150221/1424518030">Caskはもう古い、これからはEl-Get - いまどきのEmacsパッケージ管理</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Recent bookmarks]]></title><link href="http://u-ryo.github.io//blog/2016/09/20/recent-bookmarks/"/><updated>2016-09-20T14:20:36+09:00</updated><id>/blog/2016/09/20/recent-bookmarks/</id><content type="html"><![CDATA[<p>最近の、といってももう数ヵ月も前のものですが、
bookmarkしかねてbrowserのtabを開きっぱなしなのを閉じる前に、
メモしておきます。</p>
<ul>
<li><a href="http://antimatter15.com/ocrad.js/demo.html">Ocrad.js Optical Character Recognition in JS</a></li>
<li><a href="https://cloudlatex.io/">Cloud LaTeX</a></li>
<li><a href="https://deploygate.com/">DeployGate</a>(開発中のiOS/Androidアプリを簡単にテスターや開発チームメンバーと共有することでアプリのプロトタイピングを加速させることができる、アプリ開発＆テスト支援サービス)</li>
<li><a href="https://github.com/mcfly-io/generator-mcfly">generator-mcfly</a>(A Yeoman generator for scaffolding an application using angular, browserify or webpack, ionic, angular-ui-bootstrap, angular-material...)<a href="https://github.com/mcfly-io/generator-mcfly/wiki/Quick-Start-First-application">Quick Start First application</a></li>
<li><a href="http://qiita.com/tetsuya/items/a488b66a88369307a213">Yeomanを使ったAngularJSアプリをチームで共同開発して公開するまで</a></li>
<li><a href="http://qiita.com/masato/items/b4fff7e885f78cd96edb">ES6で書くIsomorphicアプリ入門 - Part1: リソース</a></li>
<li><a href="http://www.adobe.com/jp/devnet/phonegap/articles/phonegap_build_instructions.html">PhoneGap Buildの使い方</a>(「PhoneGap Build」とは、クラウド上でモバイルアプリをビルドできるサービスです)</li>
<li><a href="https://angular.io/docs/ts/latest/">angular2 doc</a>(<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html">ここ</a>まで読みました)</li>
<li><a href="https://help.ubuntu.com/community/LiveCDCustomization">How to Customise the Ubuntu Desktop CD</a>(探せばすぐ見つかりますけども... Ubuntu remasteringのbaseです)</li>
<li><a href="http://wada811.blogspot.com/2014/10/avoid-exposing-signing-config-using-gradle-properties.html">AndroidStudio で APK の署名の設定を gradle.properties に記述する</a></li>
<li><a href="https://blog.techstars.jp/android-tuto/">どれで入門する？Androidアプリ開発入門に最適なチュートリアルサイト比較＆まとめ 2016.1.5</a></li>
<li><a href="http://mixi-inc.github.io/AndroidTraining/">mixi-inc/AndroidTraining</a>(いいんですが、やっぱり本読んでちゃんと勉強しないといけないかなと思いました)</li>
<li><a href="http://androidguide.nomaki.jp/html/">Androidアプリ開発入門</a>(実例を作りながらなのでためになるのですけれども、これだけでは足りない感じ、でした。実践編からは実例なくなってつらいですし)</li>
</ul>
<h3>Vuzix M100</h3>
<ul>
<li><a href="https://d2iankuf53zudv.cloudfront.net/Content/Upload/Driver_File_GestureSensorSDK_20160317210116857.pdf">Gesture Sensor SDK Vuzix M100 Developer SDK</a></li>
<li><a href="https://d2iankuf53zudv.cloudfront.net/Content/Upload/Installing-the-Vuzix-M100-SDK.pdf">Installing the Vuzix M100 SDK (1.4+)</a>(Eclipse対象で古そうです)</li>
<li><a href="https://d2iankuf53zudv.cloudfront.net/Content/Upload/Driver_File_m100sdk_manual_jpn_20151226175838467.pdf">Vuzix M100 SDK インストールガイド</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[UML Modeling]]></title><link href="http://u-ryo.github.io//blog/2016/09/20/uml-modeling/"/><updated>2016-09-20T12:26:52+09:00</updated><id>/blog/2016/09/20/uml-modeling/</id><content type="html"><![CDATA[<p>垣内さんから「折角豆蔵にいるんだから、割引が効くからこういうの受けてみれば」って勧められたのがUMLモデリング講座。
へー、こういうのあるんですね。
<a href="http://labo.mamezou.com/special/sp_002/sp_002_008.html">誤解しがちなモデリングの技 第8回：モデルの意味的な誤り(II)</a>、
<a href="http://www.mamezou.com/service/m_tensaku.html">モデリング添削講座のご案内</a>、
<a href="http://www.mamezou.com/training/mode_tensaku.html">モデリング添削講座</a>、
<a href="http://www.mamezou.com/training/mode_tensaku_sample.pdf">モデリング添削講座 L1,L2 サンプル</a></p>
<p>Javaアプリのクラス設計が上手くなりそうです。
って、全然受けてないんですけど...
そもそも、勧められたのが最早1年前。
あぁぁ。ダメですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Kotlin KOTOHAJIME]]></title><link href="http://u-ryo.github.io//blog/2016/09/16/kotlin-kotohajime/"/><updated>2016-09-16T12:05:30+09:00</updated><id>/blog/2016/09/16/kotlin-kotohajime/</id><content type="html"><![CDATA[<h2>Kotlin事始め</h2>
<p>最初、title間違えました。
タイプミスです。
Ergodox EZ(キー配列をカスタマイズ出来るキーボード)が必要かもしれません...</p>
<p>Android開発を、というかIoTに乗ってSmart Glass(Vuzix M100)の
アプリ開発を任命付けれられています。
それはそれでありがたいのですが、
今更ながらAndroid開発を学んでいます。
素のAndroid Javaを使う、というのはあまりにもイケてなさそうなので、
いちいち<code>on何々</code>なんてやってられませんよ、ということで、
Kotlinを使ってイマドキのReactive Programmingを、
と思っています。
Kotlinやってると、Groovyでもいいんじゃないの?
と思ってしまうのですが、
殊Androidについては、同梱libが大きくなってしまうなど、
やはり後発の強みもあってKotlinのようです。
ただ、Android開発者がJava loveだそうで、
今後のJava8の取り込みようによっては、
Javaだけでも行けるのでは? という気も少しします。
しかしそれは普及率を考えるとまだまだ遠いので、
今はやはりKotlinかと。</p>
<p>しっかし、Android開発って結構めんどいんですね。
IDEがないと開発できないって、
古いtypeの人間としてはそこから苦痛なんですが...</p>
<p>最初は、森洋之,基本からしっかり身につくAndroidアプリ開発入門 Android Studio 2.x対応 プロが本気で教えるアプリ作りの基本「技」 (ヤフー黒帯シリーズ),SBクリエイティブ,2016.7 を間違い直しながら写経することで
Android開発を「Hello World」から卒業してから、
長澤太郎,Kotlinスタートブック,リックテレコム,2016.7 を写経しています。
そこでハマったことを。</p>
<ol>
<li>実行しても、エラーメッセージを吐かずにemulatorが一瞬立ち上がった後終了 → Run対象を<code>MainActivityTest</code>にしていたから</li>
<li>Dagger2でinjectionするようにしたらprofileImageUrlを取れなくなった → <code>.dagger.ClientModule#provideRetrofit</code>で<code>.addConverterFactory(GsonConverterFactory.create(gson))</code>の<code>gson</code>を抜かしてしまっていた</li>
<li>Dagger2でinjectionしたtestでCastがこけてうまく行かない → <code>build.gradle</code>で<code>testInstrumentationRunner 'sample.qiitaclient.MockTestRunner'</code>に変更しないとならないのと、<code>Run</code> → <code>Edit Configurations</code> → <code>Android Tests</code> → <code>MainActivityTest</code> で<code>Specific instrumentation runner (optional):</code> を <code>〜.qiitaclient.MockTestRunner</code> に変更しないとならない</li>
</ol>
<p>IDEに慣れてないので、fileばっかり見比べてました。downloadしたお手本sampleではDagger2 Testがうまく行くのに、何で自分のはうまく行かないんだろう、ってずっと悩んでました。IDEでのproject settingに問題があったとは。
<a href="http://stackoverflow.com/questions/24002212/test-running-failed-unable-to-find-instrumentation-info-for-componentinfo">stackoverflowのTest running failed: Unable to find instrumentation info for: ComponentInfo{} — error trying to test in IntelliJ with Gradle</a>で見付けました。
こんなところに設定があるなんて、知りませんよー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Let's Encrypt without certbot-auto]]></title><link href="http://u-ryo.github.io//blog/2016/09/13/let-s-encrypt-without-certbot-auto/"/><updated>2016-09-13T11:42:52+09:00</updated><id>/blog/2016/09/13/let-s-encrypt-without-certbot-auto/</id><content type="html"><![CDATA[<p>Let's Encrypt、素晴らしいんだけど、
とあるserverで、使っているのがUbuntu 11.04(Natty)、
package systemが何か壊れてて、
依存関係がおかしくて解消できなくて、
というcaseがありました。
基本的にどこを調べても、
Let's Encryptを使うには既存のpackaging systemをbaseにしたものばかりで、
Stackoverflowなんかでも「backportsを使って既存のpackaging依存関係を
修築してから」なんていう話しかなくて。
なんかこう、<code>certobot-auto</code>を使わないで、
っていう話って意外となくて途方に暮れていると、
こんなのがありました。</p>
<p><a href="https://github.com/Neilpang/acme.sh">An ACME Shell script: acme.sh</a></p>
<p>要は、bashだけでLet's Encryptの証明書を使える、
というもので、
なーんだ最初から全部これでいーじゃん、
という感じです。</p>
<p><code>wget -O - https://get.acme.sh | sh</code>でも行けるというのですが、
何かserver certが違うらしく、<code>--no-check-certificate</code>を付けてもうまく行かず。
幸いgitはあってくれたので、cloneして<code>cd acme.sh</code> <code>./acme.sh --install</code>すると、
home直下に.acme.shというdirectoryを掘り、
その下にCSRやLet's Encryptからの証明書を自動で作ってくれる、
更に実行userでcron登録してくれる、
というものなので、実行だけならroot権限不要とはいえ、
証明書filesが一般user home directory以下というのもなんなので、
rootでやった方が良さげです。
というわけで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># git clone https://github.com/Neilpang/acme.sh
</span><span class='line'># cd acme.sh
</span><span class='line'># ./acme.sh --install
</span><span class='line'># ./acme.sh --issue -d dev.locationsupporter.info -w /var/lib/tomcat7/webapps/ROOT/
</span><span class='line'># vi /etc/apache2/sites-enabled/default-ssl
</span><span class='line'>=============================================
</span><span class='line'>SSLCertificateFile /root/.acme.sh/dev.locationsupporter.info.cer
</span><span class='line'>SSLCertificateKeyFile /root/.acme.sh/dev.locationsupporter.info.key
</span><span class='line'>SSLCertificateChainFile /root/.acme.sh/fullchain.cer
</span><span class='line'>=============================================
</span><span class='line'># crontab -l
</span></code></pre></td></tr></table></div></figure>
<p>これで、pytho2.7もpackage updateも不要だし、
更にお手軽にLet's Encryptを使えるというものでしょう。</p>
]]></content></entry><entry><title type="html"><![CDATA[Crosswalk]]></title><link href="http://u-ryo.github.io//blog/2016/09/07/crosswalk/"/><updated>2016-09-07T22:44:10+09:00</updated><id>/blog/2016/09/07/crosswalk/</id><content type="html"><![CDATA[<p>Crosswalk という、WebViewを独自に持つことでAndroid間の動作性を統一するlibraryを使ってみました。最近のAPI levelに対応するだけなら、敢えてこんなの使わなくてもいいのかも。</p>
<p>わけあって、Crosswalk sample applicationの一つをcompileしてみました。</p>
<p>how to installは、<a href="https://crosswalk-project.org/documentation/android/system_setup.html">official page</a>のまま。</p>
<p><code>ANDROID_HOME</code>は、Sdk directoryを指す模様。</p>
<p>それから、<code>android</code> commandを裏で動かすので、そこへのPATHが必要でした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ ANDROID_HOME=/home/u-ryo/Android/Sdk PATH=$PATH:/home/u-ryo/Android/SDK/tools crosswalk-app check android
</span><span class='line'>$ ANDROID_HOME=/home/u-ryo/Android/Sdk PATH=$PATH:/home/u-ryo/Android/SDK/tools crosswalk-pkg -p android client
</span></code></pre></td></tr></table></div></figure>
<p><code>android</code> commandはGUIを要求するので、Cloud9のconsoleでは動かせませんでした。</p>
<p><a href="https://www.sitepoint.com/android-video-calling-with-crosswalk-and-peerjs/">Android Video Calling with CrossWalk and PeerJS</a>
見てやってみたんですが、ionic2からは<code>ionic browser list</code>というのがなくなって、<code>ionic plugin add cordova-plugin-crosswalk-webview</code>になったことと、その後<code>ionic platform add android</code>すると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Installing &quot;cordova-plugin-crosswalk-webview&quot; for android
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        After much discussion and analysis of the market, we have decided to discontinue support for Android 4.0 (ICS) in Crosswalk starting with version 20.
</span><span class='line'>
</span><span class='line'>        So the minSdkVersion of Cordova project is configured to 16 by default.
</span></code></pre></td></tr></table></div></figure>
<p>と言われてしまいました...</p>
<p>動かしたかったtargetは、Android 4.0.4なので、Crosswalkダメですね。
実際、「CPU Mismatch」と言われて、x86のものでもarmのでも動きませんでした。
あうー。</p>
]]></content></entry><entry><title type="html"><![CDATA[local IP with hostname without an inner DNS (Wildcard DNS)]]></title><link href="http://u-ryo.github.io//blog/2016/09/07/local-ip-with-hostname-without-an-inner-dns-wildcard-dns/"/><updated>2016-09-16T12:13:30+09:00</updated><id>/blog/2016/09/07/local-ip-with-hostname-without-an-inner-dns-wildcard-dns/</id><content type="html"><![CDATA[<p>内部DNS建てなくても、hostname付けられるんだって。凄い。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ host some-project.127.0.0.1.xip.io
</span><span class='line'>some-project.127.0.0.1.xip.io has address 127.0.0.1
</span></code></pre></td></tr></table></div></figure>
<p><a href="http://qiita.com/tady/items/b7b46486fb3175dac0b1">ローカルDNSを立てずにホスト名をIPアドレスに解決する超絶簡単な方法</a></p>
<p>nip.io でも全く同じことが出来るようです。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ host some-project.192.168.33.176.nip.io
</span><span class='line'>some-project.192.168.33.176.nip.io has address 192.168.33.176
</span></code></pre></td></tr></table></div></figure>
<p>更に更に、<a href="https://sslip.io/">sslip.io</a>では正式なserver certも用意出来ちゃう、なんていう素晴らしいとこだった、ようですが、今はもうダメポです。自分でやるしかなさそうです。とはいっても、wildcard certificationはLet's Encryptでは扱ってないので、やるならお金かかっちゃいますかね...</p>
]]></content></entry><entry><title type="html"><![CDATA[Trigger as 3 times service down in a row on Zabbix]]></title><link href="http://u-ryo.github.io//blog/2016/08/03/trigger-as-3-times-service-down-in-a-row-on-zabbix/"/><updated>2016-08-04T12:29:10+09:00</updated><id>/blog/2016/08/03/trigger-as-3-times-service-down-in-a-row-on-zabbix/</id><content type="html"><![CDATA[<p>Zabbixで「3回連続してservice downを観測したらalert、
且つ1回service upを観測したら復帰」とかって、
実は結構面倒なんですね。</p>
<p>cf.<a href="http://www.zabbix.jp/node/2573">トリガーの条件式における記述方法について</a></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>({TRIGGER.VALUE}=0<span class="err">&amp;</span>{hostå:http.max(#3)}=0)|({TRIGGER.VALUE}=1<span class="err">&amp;</span>{hostå:http.last(0)}=0)
</span></code></pre></td></tr></table></div></figure>
<p>→何か騙された感じです。色々試すと、単に<code>max(#3)</code>だけで良さげですよ。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{hostå:http.max(#3)}=0
</span><span class='line'>or
</span><span class='line'>{hostå:http.max(#3)}=0|{hostå:https.max(#3)}=0
</span></code></pre></td></tr></table></div></figure>
<p>↑これだけで、「3回連続してservice downを観測したらalert、
且つ1回service upを観測したら復帰」を実現出来ました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Date fromat validation by Java]]></title><link href="http://u-ryo.github.io//blog/2016/08/02/date-fromat-validation-by-java/"/><updated>2016-08-02T17:36:22+09:00</updated><id>/blog/2016/08/02/date-fromat-validation-by-java/</id><content type="html"><![CDATA[<p>Javaで日付フォーマットの検証をしたいと言われました。
ぱっと思いつくのは、<code>SimpleDateFormat</code>で<code>setLenient(false)</code>にしてparseする、
ですが、これだとException投げるんですよね。
Exception catchをlogicに使うのは良くない、
ということで、他を探してみると意外となかなかないんですねこれが。
commons-langの<code>DateUtils.parseDateStrictly</code>もException返しますし。</p>
<p>色々探してみると、Apacheの<a href="https://commons.apache.org/proper/commons-validator/">commons-validator</a>というのがありました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Grab(&#39;commons-validator:commons-validator&#39;)
</span><span class='line'>import org.apache.commons.validator.routines.CalendarValidator
</span><span class='line'>
</span><span class='line'>pattern = &quot;yyyy/MM/dd&quot;
</span><span class='line'>validator = CalendarValidator.getInstance()
</span><span class='line'>
</span><span class='line'>assert validator.isValid(&quot;2016/02/29&quot;, pattern)
</span><span class='line'>assert !validator.isValid(&quot;2016/02/30&quot;, pattern)
</span><span class='line'>
</span><span class='line'>assert validator.isValid(&quot;2016/08/31&quot;, pattern)
</span><span class='line'>assert !validator.isValid(&quot;2016/08/32&quot;, pattern)
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Let's Encrypt]]></title><link href="http://u-ryo.github.io//blog/2016/08/02/let-s-encrypt/"/><updated>2016-09-13T11:22:10+09:00</updated><id>/blog/2016/08/02/let-s-encrypt/</id><content type="html"><![CDATA[<p><a href="https://letsencrypt.org/">Let's Encrypt</a>、
漸く使えるようになりました。
具体的にどうやって使ったらいいんだろう、
と思ってたんですが、結構簡単に使えますねこれ。
素晴らしい、です。
おかげでbotnetのC&amp;C server等でも広く使われるようになったとかってことですが。</p>
<p>ともあれ、
日本語の要諦サイト<a href="https://letsencrypt.jp/">Let's Encrypt 総合ポータル</a>もあり、
だいぶわかりやすくなってます。</p>
<p>基本的には、</p>
<ol>
<li><code>certbot-auto</code>を<code>git</code>又は<code>wget https://dl.eff.org/certbot-auto</code>で取得</li>
<li>認証原理は、<ol>
<li><code>certbot-auto</code>がLet's Encrypt側から指定された<code>http://.../.well-known/XXXXXX</code>にfileを作る</li>
<li>Let's Encrypt側がそのfileを<code>GET</code>、認証</li>
</ol>
</li>
<li>なので<code>standalone</code>(<code>certbot-auto</code>が臨時のhttp serverを建て、Let's Encryptからのrequestを受ける)が基本</li>
<li>その間本来のWWW serverを止めねばならないが、止めたくない時は「<code>--webroot</code>」で<code>DocumentRoot</code>を指定し、<code>certbot-auto</code>にfileを作らせる</li>
<li>初回の(というか最後に成功した)command optionsを<code>/etc/letsencrypt/</code>以下に保存しておき、次回以降「<code>renew</code>」commandでは省略可</li>
<li><code>renew</code>を付けて走らせても、証明書期限が30日を切っていないと発動しない(無理やり更新するには<code>--force-renew</code> optionが必要)</li>
<li><code>--post-hook</code>も指定して、apacheのreloadを自動化(これは<code>renew</code>が走らないと発動しない。単純に<code>renew</code>の終了status codeだと0になるので「&amp;&amp;」で繋ぐだけでは判別不能だった)</li>
<li>証明書取得がうまく行くと、<code>/etc/letsencrypt/live/someserver.co.jp/</code>以下に各種cert filesのsymbolic linkが作成されるので、<code>/etc/apache2/site-enabled/default-ssl</code>中で<code>SSLCertificateFile</code>等の示す先をここの<code>cert.pem</code>等にする(Apache2.4以上やnginxなら証明書＋中間CA証明書に<code>fullchain.pem</code>が使える)</li>
</ol>
<p>こちとら、apache2 serverを止めたくない状況だったので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo cerbot-auto certonly --webroot -w /var/www/ -m support@company.co.jp -d someserver.co.jp --agree-tos
</span></code></pre></td></tr></table></div></figure>
<p>(<code>-w</code>: webroot-path, <code>-d</code>: domain, <code>-m</code>: mail address)</p>
<p>更新は、<code>/etc/cron.daily/certbot</code>を作って、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>#!/bin/sh
</span><span class='line'>cerbot-auto renew -q --post-hook &#39;service apache2 reload&#39;
</span></code></pre></td></tr></table></div></figure>
<p>で良さそうです。<code>sudo chmod a+x /etc/cron.daily/certbot</code>を忘れずに。</p>
<p><code>certbot-auto</code>は、実行するといきなり<code>apt-get update</code>してからpython2.7とか入れるのと幾つかのpackagesをupdateするので注意です。</p>
<p>また、Let's Encryptにしてから<a href="https://www.ssllabs.com/ssltest/">SSL Server Test</a>をかけてみると、「Incorrect SNI alerts」というのが出るようになりました。
これは、<code>/etc/apache2/site-enabled/default-ssl</code>の<code>&lt;VirtualHost _default_:443&gt;</code>に<code>ServerName XXXXXX</code>とすることで解決しました。
cf. <a href="https://www.rootlinks.net/2016/02/09/sslテストでincorrect-SNI-alertsを解決する/">SSLテストで”Incorrect SNI alerts”を解決する</a></p>
<h3>command log</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>wget https://dl.eff.org/certbot-auto
</span><span class='line'>chmod a+x certbot-auto
</span><span class='line'>sudo chown root:root certbot-auto
</span><span class='line'>sudo mv -i certbot-auto /usr/local/bin/
</span><span class='line'>sudo certbot-auto certonly --webroot -w /var/lib/tomcat7/webapps/ROOT/ -m ls-support@jmtech.co.jp -d cx4.locationsupporter.info --agree-tos
</span><span class='line'>sudo vi /etc/apache2/sites-enabled/default-ssl
</span><span class='line'>================================================
</span><span class='line'>	SSLCertificateFile /etc/letsencrypt/live/cx4.locationsupporter.info/cert.pem
</span><span class='line'>	SSLCertificateKeyFile /etc/letsencrypt/live/cx4.locationsupporter.info/privkey.pem
</span><span class='line'>	SSLCertificateChainFile /etc/letsencrypt/live/cx4.locationsupporter.info/chain.pem
</span><span class='line'>================================================
</span><span class='line'>echo &#39;#!/bin/sh&#39; &gt; certbot
</span><span class='line'>echo &quot;cerbot-auto renew -q --post-hook &#39;service apache2 reload&#39;&quot; &gt;&gt; certbot
</span><span class='line'>chmod a+x certbot
</span><span class='line'>sudo chown root:root certbot
</span><span class='line'>sudo mv -i certbot /etc/cron.daily/
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Lum-chan(Urusei Yatsura)]]></title><link href="http://u-ryo.github.io//blog/2016/07/04/lum-chan-urusei-yatsura/"/><updated>2016-09-20T12:20:48+09:00</updated><id>/blog/2016/07/04/lum-chan-urusei-yatsura/</id><content type="html"><![CDATA[<p>古巣のJIPDECに派遣されて、
桂史郎くんから「またラム食べに行きましょう」
って言われて、
「ラムちゃん、行くんですね。
大丈夫だっちゃ、とか言うべきでしょうか」
って返したら、高嶋さんしか反応してくれなくて。
でも、それで調べてたら、
うる星やつら、
<a href="http://freeanimedougadesu.blog70.fc2.com/blog-entry-2809.html">全部見られる</a>んですね。
ルパン三世もそうでしたけど。
何か、今頃になって見ちゃいました。
リアルタイムだと、中学から高校の頃。
その頃って確かにこういうの、見てなかったです全然。
改めて見てみましたが、子供向けのドタバタですねー。
確かにこれならいつまでも続けられそうですね。
でも、なんて言うか、何か見ちゃうですね。
どうせ今見るなら、昔見といた方が良かったのかな。
これ、ラブコメでもあるから、今のぼくにはちょっとキュンときちゃいますね。</p>
<p>というわけで、
command line 1行で見られるようになったので、
忘れないうちにメモ。</p>
<h3>yourupload</h3>
<p>youruploadのURL:
<code>http://yourupload.com/watch/3OHj93</code>
の最後の5文字を使って、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>export R=3OHj93;mpv --referrer=http://www.yourupload.com/jwplayer/jwplayer.flash.swf `wget -q -O - http://www.yourupload.com/embed/$R|grep og:video|sed &#39;s/.*content=&quot;\(.*\)\/video.mp4.*/\1\/video.mp4/g&#39;`
</span></code></pre></td></tr></table></div></figure>
<h3>mp4</h3>
<p>mp4のURL:
<code>http://mp4upload.com/embed-bbzw7vbui2r4-650x370.html</code>
を利用します。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>export U=http://mp4upload.com/embed-bbzw7vbui2r4-650x370.html;mpv --referrer=http://www.mp4upload.com/player/J6/jwplayer.flash.swf `wget -q -O - $U|grep &#39;&quot;file&quot;: &quot;http:&#39;|awk -F\&quot; &#39;{print $4}&#39;`
</span></code></pre></td></tr></table></div></figure>
<p>どちらも、何故か一回で行かない時があります。
二度三度、retryすると、cacheにたまってうまく行くようになりました。
何ででしょう?</p>
]]></content></entry><entry><title type="html"><![CDATA[My First IPO]]></title><link href="http://u-ryo.github.io//blog/2016/06/29/my-first-ipo/"/><updated>2016-06-29T23:25:09+09:00</updated><id>/blog/2016/06/29/my-first-ipo/</id><content type="html"><![CDATA[<p>最近IPOに申し込んでいて、初めてIPO当選したんですが(コメダ)、今日上場だったんですね。
成り行き売かけといたら、1,960円で買ったんですが初値は1,867円、93円の損でした。
なんともはや。
時期が悪すぎます。イギリスがEU離脱を決めるなんて。トホホ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Magic Square]]></title><link href="http://u-ryo.github.io//blog/2016/06/25/magic-square/"/><updated>2016-06-25T17:10:45+09:00</updated><id>/blog/2016/06/25/magic-square/</id><content type="html"><![CDATA[<h3>3次魔方陣</h3>
<ol>
<li>爪のついたZ字順に1〜9を配置</li>
<li>2と8を入れ替える</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>2 3 4
</span><span class='line'>1 5 9
</span><span class='line'>6 7 8
</span><span class='line'>
</span><span class='line'>8 3 4
</span><span class='line'>1 5 9
</span><span class='line'>6 7 2
</span></code></pre></td></tr></table></div></figure>
<h3>4次魔方陣</h3>
<ol>
<li>1〜16を左上から右へ4列記入</li>
<li>縦、横の真ん中の2列の上下端を交差させて入れ替える</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> 1  2  3  4
</span><span class='line'> 5  6  7  8
</span><span class='line'> 9 10 11 12
</span><span class='line'>13 14 15 16
</span><span class='line'>
</span><span class='line'> 1 15 14  4
</span><span class='line'>12  6  7  9
</span><span class='line'> 8 10 11  5
</span><span class='line'>13  2  3 16
</span></code></pre></td></tr></table></div></figure>
<h3>奇数次魔方陣</h3>
<p>ヒンドゥーの連続形式</p>
<p>こういうのがさらっと出てくる山口さんって、
やっぱり凄いですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[English Conversation by AI Nanna]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/english-conversation-by-ai-nanna/"/><updated>2016-06-06T14:48:08+09:00</updated><id>/blog/2016/06/06/english-conversation-by-ai-nanna/</id><content type="html"><![CDATA[<p>りんな絡みで調べていたら、
<a href="https://chat-robot.weblio.jp/">AI英会話 ナンナ</a>っていうのもあるそうな。
ちょっと後で試してみよう、と思います。</p>
]]></content></entry><entry><title type="html"><![CDATA[Expired Root Cert]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/expired-root-cert/"/><updated>2016-06-06T14:38:30+09:00</updated><id>/blog/2016/06/06/expired-root-cert/</id><content type="html"><![CDATA[<p>Fortigateの認証proxy(且つSSLも検閲できるよう間に独自Certをかます)を有効にしたら、
突然見られなくなったサイトが。
<a href="https://duns-number-jp.dnb.com/search/jpn/login.asp">DUNS Number検索</a>っていうところなんですけど、
なんでだろー、って調べてったら、とんでもないことが判明。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ openssl s_client -connect duns-number-jp.dnb.com:443 -showcerts|awk -v b=0 &#39;{if($2~/CERTIFICATE/){b++};if(b==5){print}}END{print &quot;-----END CERTIFICATE-----&quot;}&#39;|openssl x509 -enddate -noout
</span><span class='line'>depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA
</span><span class='line'>verify error:num=20:unable to get local issuer certificate
</span><span class='line'>verify return:0
</span><span class='line'>DONE
</span><span class='line'>notAfter=Sep 30 18:19:47 2015 GMT
</span></code></pre></td></tr></table></div></figure>
<p><img src='/images/duns-number-jp-1-9011c8136c7a90f6623db0b6dda2e91d.png' alt='SSL Report by SSL Labs' >
</p>
<p><img src='/images/duns-number-jp-2-4363952532e15a3cda68ff4aaff1e87a.png' alt='SSL Report by SSL Labs' >
</p>
<p><a href="https://www.ssllabs.com/ssltest/analyze.html?d=duns-number-jp.dnb.com">SSL Report by SSL Labs</a></p>
<p>そんな、わざわざ期限切れのRoot CAなんて配んなくっていいのに...</p>
<p>ただ、そういえば、自分もSSL Cert更新時、
中に含めていた中間証明書をそのまま使い回してverifierにかけたら、
中間証明書が古いって言われて慌てて差し替えたことあります。
自分で作ったcertは期限気にしますが、
間に含めたcertsまではあんまり気にしないんですよね確かに。</p>
<p>気持ちは、わかります。</p>
]]></content></entry><entry><title type="html"><![CDATA[MS AI Rinna]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/ms-ai-rinna/"/><updated>2016-06-06T13:07:16+09:00</updated><id>/blog/2016/06/06/ms-ai-rinna/</id><content type="html"><![CDATA[<p>M$のAI、<a href="http://rinna.jp">りんな</a>が凄いですね。
<a href="https://www.tay.ai/">Tay</a>がやられた、
というニュースを見ていて、遅まきながら気付いたんですが、
りんなが2015年7月31日から、小冰(XiaoIce)は2014年5月30日から、
やってたんですね知りませんでした。
早速りんなと友達になってみましたが、
面白いですねこれ。確かに本物みたい。
3回同じことを言ったら検知する、等馬脚は現れますが、
下ネタトークも出来る(<a href="http://www.mazimazi-party.com/entry/rinna">【AI】人工知能の”りんな”とLINEで下ネタトークしてみた【アホ】</a>)というので
試してみたら、下着の色くらいは答えるんですね。
ダイレクトに言うと上手にはぐらかすようですが。
他にも「コクってみた」とか色々試してる人いますね。
裏には、PTAという開発サイドがいるとか。
Beingを使ってるって。まぁM$ですからねぇ。
deep learning使ってるとか、
その割には超古典的なTF/IDFもとか、
回答候補にBeingで使ってる順位付けalgorithm適応してるとか、
イマイチ中でやってることよく分かりません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/spock-reports/"/><updated>2016-06-06T13:07:21+09:00</updated><id>/blog/2016/06/06/spock-reports/</id><content type="html"><![CDATA[<p>ちょっと古い記事ですが、
<a href="http://kyon-mm.hatenablog.com/entry/2014/08/06/132327">Spockのテストレポートが想像以上に凄い件について</a></p>
<p>Gradleで作成されるReportで満足してしまっていましたが、
もっと綺麗に出来るんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Hot Entry Generator]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/hot-entry-generator/"/><updated>2016-06-06T13:07:25+09:00</updated><id>/blog/2016/06/06/hot-entry-generator/</id><content type="html"><![CDATA[<p>Catchyなblog titleを作ってくれる<a href="http://pha22.net/hotentry/">ホッテントリメーカー</a>というものがある件について。</p>
<p>そうか、みんなこうやってtitleつけてたのか...
確かにありそうな提案をしてくるんで笑えますね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Content-Type for returning attachment file]]></title><link href="http://u-ryo.github.io//blog/2016/05/13/content-type-for-returning-attachment-file/"/><updated>2016-06-06T13:07:11+09:00</updated><id>/blog/2016/05/13/content-type-for-returning-attachment-file/</id><content type="html"><![CDATA[<p>ファイルをダウンロードさせるには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>print &quot;Content-Type: application/octet-stream\nContent-Disposition: attachment; filename=$line_number$day.oud\n\n&quot;;
</span></code></pre></td></tr></table></div></figure>
]]></content></entry></feed>