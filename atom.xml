<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2018-02-04T01:35:42+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Brain Science]]></title><link href="http://u-ryo.github.io//blog/2018/02/03/brain-science/"/><updated>2018-02-04T01:19:53+09:00</updated><id>/blog/2018/02/03/brain-science/</id><content type="html"><![CDATA[<p>出されている仕事先の事務女性が前社長夫人で、
今頃になってパワハラとか受けて辞めそうだと聞いていて、
そういう今日このごろに刺さった記事がありました。
<a href="http://toyokeizai.net/articles/-/205707">ヒトの脳は｢他人を裁く｣ようにできている ｢暴走する正義漢｣を止める方法はない</a>
そこから、
「シャーデンフロイデ」(≒メシウマ)、
脳科学者中野信子さん、と調べて読んでいきました。</p>
<ul>
<li><a href="http://logmi.jp/234713">ネットで誰かを吊し上げて叩くと快感が得られる–脳科学者・中野信子氏が解説する「シャーデンフロイデ」という感情</a></li>
<li><a href="http://news.livedoor.com/article/detail/9282077/">脳科学者・中野信子「人間は実力のある人よりも、確信のある人のほうにひかれるのです」</a></li>
<li><a href="https://www.cafeglobe.com/2017/11/065561book.html">脳科学者・中野信子さんが教える「大人のいじめ」回避のしかた</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Optical Illusion]]></title><link href="http://u-ryo.github.io//blog/2018/02/03/optical-illusion/"/><updated>2018-02-04T01:35:42+09:00</updated><id>/blog/2018/02/03/optical-illusion/</id><content type="html"><![CDATA[<p>IT mediaの記事(<a href="http://www.itmedia.co.jp/news/articles/1802/02/news010.html">コンピュータで“錯視”の謎に迫る：試してびっくり　点を回転させると円に見える「グラス・パターン」錯視の謎</a>)を見て、<a href="http://araiweb.matrix.jp/Exhibition/illusiongallary4.html">こんな世界</a>があるんだー! って驚きました。錯視を引き起こす成分を分離できるなんて!
ここでも出来るのかな?</p>
<p>夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー<br  />
夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー</p>
<p>ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏<br  />
ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏ーワナ夏</p>
<p>夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー<br  />
夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー夏ワナー</p>
]]></content></entry><entry><title type="html"><![CDATA[JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/01/30/jhipster/"/><updated>2018-01-31T21:52:58+09:00</updated><id>/blog/2018/01/30/jhipster/</id><content type="html"><![CDATA[<p>ここんとこPWA(Progressive Web Application)作ろうとしていて、
ずっとJEEかなぁって思ってたんですけどSpringの勢いが凄くて、
それと今ならSPAでぼくはAngular派なので、
それに今時認証は自分でやりたくないよねとOAuth2で、
連動させるの大変だなぁとかって思ってたら、
そういうの全部ひっくるめた<a href="http://www.jhipster.tech/">JHipster</a>というのがあるんだ!
というのが衝撃でした。
かなり前からあったんですね。</p>
<p>ただこれ難しいですね。
scaffoldingまでは簡単ですけど、
そこからどうしていいのか。
自動生成filesはなるべく弄りたくないですが、
そうもいかないですよねこれ。
samplesも、「そこから先」についてはなかなか。
<a href="https://www.infoq.com/minibooks/jhipster-4-mini-book">JHipster Mini-Book 4.0</a>も見てみましたものの、それをなぞって行けるわけでは無かったので。
scaffoldingと、JDLでentities作って、
<code>jhipster spring-controller Foo</code>や<code>ng g component Bar</code>とかのcommandで取っ掛かりを作って、
そこから作り込んでいく、感じでしょうか。</p>
<p>Angular CLIがうまく動かなかった等あったのでメモ。
jhipsterのversionが変われば、こんな知識も不要になると思われますが。</p>
<ul>
<li>JDLでfield名はsnakeやhyphenationではなくcamelで。
DBだからhyphenかなと思ったんですが、
生成されたclassのfield名がcamelにならなかったので。</li>
<li>JDLでUserは特別なentity。
<a href="http://www.jhipster.tech/managing-relationships/">Manual</a>に書いてありました。
scaffoldingの次は取り敢えず
<a href="https://start.jhipster.tech/jdl-studio/">JDL Studio</a>でentity作成、import、
になるのに、解説すっ飛ばしてJDL見たので、なんだろう?って思うんですよね。</li>
<li>jhipster 4.13.3で入るAngular CLI(<code>./node_modules/@angular/cli/</code>)のversionは
1.6.0(<code>package.json</code>)でbug持ち(<code>@angular-devkit/core</code>が入らない)なので、
<code>ng g ...</code>が失敗します。<code>package.json</code>中の<code>@angular/cli</code>の
version numberを最新のもの(本執筆時点では1.6.6)に書き換え、
<code>yarn install</code>するとうまく行きました
(Angular CLIをglobalでinstallしてもlocalのversionのモノを使うのでダメ、
<code>@angular-devkit/core</code>を個別に<code>npm install ...</code>しても、
次から次へと足りないものが出て来て、
全部入れた挙句の果てに<code>yarn start</code>がコケるようになるのでダメ)。</li>
<li><code>ng g component Foo</code>としてそれを表示させるにはどうしたらいいんだろう? と悩みました。route作ってそこで表示させるべく、他のentityとか見よう見真似で<code>foo.route.ts</code>作ってpath直打ちして試したものの、表示されず。errorも何も出ないので、何が悪いのか分かりません。多分登録が届いてないんだろうとは思ってたんですけど、具体的にどこをどう直せばいいのかわけわかめです。<a href="https://stackoverflow.com/questions/46587247/adding-new-route-to-jhipster-using-angular-4">StackOverflow</a>に回答があったので出来ました。結局、0.<code>ng g component Foo</code>でcomponentを作る 1.<code>foo.route.ts</code>を作る(その際<code>Routes</code>で配列にするのではなく<code>Route</code>で単数に?) 2.<code>index.ts</code>を真似して作る(<code>foo.module</code>のimportは記載不要) 3.<code>foo.module.ts</code>を作る 4.<code>app.module.ts</code>に登録(その際Angular CLIが自動登録したcomponentは削除しないとtop pageが表示されず) →そもそもcomponentではなくmoduleをgenerateするべきだったのでしょうか。よくわかりませんが、scaffoldingの後のことはなかなか書いてないので、「こんなのわかんないよー」という感じです。</li>
</ul>
<p>JHipsterは「Java/Angular版Rails」か! とも思ったんですが、
もう出てだいぶ経つみたいですし、
でもまだそこまで洗練されてはいないのかなと。
Angularの難しさ、面倒臭さ、
とnode modules周りの変化が激しいのもあるためか、
使いこなすのはなかなか大変だと思います。</p>
]]></content></entry><entry><title type="html"><![CDATA[RPA and Sikuli]]></title><link href="http://u-ryo.github.io//blog/2018/01/30/rpa-and-sikuli/"/><updated>2018-01-30T20:42:32+09:00</updated><id>/blog/2018/01/30/rpa-and-sikuli/</id><content type="html"><![CDATA[<p>昨日、社内で「事務部門はRPA(Robotics Process Automation)を導入して業務効率化を図る」という発表があったので、どんな凄いことしてるのかと思ったら、要するに<a href="http://www.sikuli.org">Sikuli</a>のパクリなんですね<a href="https://www.asirrera.com/solution/">これ</a>。年間150万近く払ってこんなの使いたいなんて、よくわかんないですタダで出来るのに。</p>
<p>しかし、Sikuliに「ロボ・オペレータ」とかRobotics Process Automationとかご大層な名前を付けて、ITに疎い事務部門に売り付けるという発想は、凄いと思いました。それは思い付かなかったですねー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Unbelievable Coding]]></title><link href="http://u-ryo.github.io//blog/2018/01/16/unbelievable-coding/"/><updated>2018-01-30T20:42:32+09:00</updated><id>/blog/2018/01/16/unbelievable-coding/</id><content type="html"><![CDATA[<p>Androidのお仕事で、あるclassのcodeを読んでいて。</p>
<ul>
<li>onTouchListenerの上にonClickListenerを上書き<br  />
あるbuttonを<code>setOnTouchListener(this);</code>してて。
buttonを<code>onTouchListener</code>っていうのもなんですが、
<code>onTouch(...)</code>で更に<code>setOnClickListener(...);</code>してるという...</li>
<li>timer止めずに新しいinstanceを上書き<br  />
<code>CountDownTimer</code>をinstance fieldとして持ってて、
途中でnewしてるんですが、それが複数箇所あるんですよね...
直前にcancel処理とか特に無いし。大丈夫なのかこれ。</li>
<li>カタカナや"$","/"にtoLowerCase()/toUpperCase()してindexOf()<br  />
<code>"半角カタカナ".toLowerCase()</code>してから<code>indexOf(...)&gt;-1</code>して、
<code>contains(...)</code>と同じことしてました。<code>indexOf</code>はまだしも、
<code>toLowerCase</code>したからって
全角カタカナが半角カタカナになるわけじゃないのに。
え、まさか、とか思ってしまった自分が情けないです。
同様に、記号に対しても<code>"$".toLowerCase()</code>とか謎すぎます。</li>
<li>他の(inflateもincludeもしてない)View上のR.idをfindViewById()<br  />
当然<code>null</code>です<code>findViewById()</code>しても。実質無害なcodeではありますが。
どうやら他から何も考えずにコピペしたから、らしいです。</li>
<li>listの2度回し<br  />
なるべく一度で済むように書きますよねぇ、フツーは。
ちょっと違う処理をするから、なのか、
同じlistを直後に2度回して、って。
まー他でも同じtableのDB accessを3回してたりしますからねーこのcode。</li>
<li>1830秒?<br  />
随分謎なMagic Numberです。</li>
<li>loop回すのに中で値を上書き(結局見てるのは最後の値だけ)<br  />
<code>for(i in list){v = i}</code>みたいな。<code>v=list[lastIndex]</code>でいいじゃん。
そういうことされると意図が読めないんですよね。困ります。</li>
<li>loopの空回し<br  />
waitしたいみたいなんですが、
<code>while(true){if(!flag)break;}</code>ってこれじゃぁCPU無駄遣いでしょ。
改善したっていって<code>do{i=0;}while(!flag);</code>って、あのねー...</li>
<li><code>synchronized wait()</code>で同期
他Activity(dialog)に遷移させ、
その同期に<code>synchronized(this){wait();}</code>って使ってます。
そういうthread jugglingはやめて欲しい、です。
こういうのってホントはRXですよね。</li>
<li>method/field名が大文字で始まっててclass名と区別がつかない、
なんていうのは可愛い方で、もう気にもならなくなってますそういえば。
methodも長いし条件分岐も複雑で、
state patternとかなんて知らないんだろうなぁと。</li>
<li>というか全てがfat ActionでFragmentもなければApplicationもないという
(基本的には。後から「訳も分からずダーッとコピペした部分」にはありますが)。</li>
</ul>
<p>...というように。
こういうcodeと共に仕事するのは、嫌で嫌で仕方ありません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock and JMockit]]></title><link href="http://u-ryo.github.io//blog/2017/12/19/spock-and-jmockit/"/><updated>2017-12-23T00:37:17+09:00</updated><id>/blog/2017/12/19/spock-and-jmockit/</id><content type="html"><![CDATA[<p>バイトのtestで、Spockでさらっとtest書いて、
いざ全pattern cross check! と思ったら、
無限loopになるpatternが多くて。
<code>@Timeout</code>導入でサクッと、と思ったら、
loop回るのが早くて凄いmemoryと時間を食って、
<code>@Timeout</code>では抑えきれません。
うーむ、それじゃぁGroovyのmetaClassでmethodの振る舞いを変更だ!
と思ったら、どうやっても振る舞いが変わりません。
悩んだ末、GroovyのmetaClassでの再定義は、
外側のJava classには及ばない(Groovyの世界の中だけ)、と結論。
仕方無いじゃぁJMockitだ!
って思ったんですが、今度はSpockとJMockitは相容れないようで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Caused by: java.lang.UnsupportedOperationException: Attempted to redefine class loaded from custom class loader
</span></code></pre></td></tr></table></div></figure>
<p>なので<code>JAVA_OPTS=-javaagent:.../jmockit-1.37.jar</code>をつけて実行すると今度は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mockit.internal.ClassFile$NotFoundException: Unable to find class file for Test2$1
</span></code></pre></td></tr></table></div></figure>
<p>spockは諦めました。</p>
<p>ならばせめてJUnit5だ! と思ったんですが、<code>build.gradle</code>で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>junitAnt &#39;org.apache.ant:ant-junit4:1.10.1&#39;
</span></code></pre></td></tr></table></div></figure>
<p>と指定しているので、敢え無く撃沈。
調べるとどうも、JUnit5とAntを組み合わせる動きはないんですよね。
<a href="https://devlog.arksystems.co.jp/2017/12/12/4436/">それでも Ant を使いたい人のための JUnit 5</a>というのもありましたけど、これは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;java</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span> <span class="na">classname=</span><span class="s">&quot;org.junit.platform.console.ConsoleLauncher&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>で無理矢理実行してるだけですから、ちょっと違います。
こちとら、<code>build.gradle</code>から<code>ant.junitAnt(...)</code>で呼んでいるので、
<code>ConsoleLauncher</code>だと困るんです(→どうやって書いたらいいかよくわからない)。</p>
<p>結局、JUnit4 + JMockit で書きました。
<code>Timeout</code>や<code>ExpectedException</code>は<code>@Rule</code>にしてちょこっと今っぽくしましたけど、
そのくらいが関の山でした。</p>
<p><code>ant.junitAnt(...)</code>で<code>fork:true</code>にして、また更に
<code>junit4.jar</code>より<code>jmockit.jar</code>を先に書いておかないと
<code>IllegalStateException</code>が出る(<a href="http://cadeveloper.hatenablog.com/">gradle + jmockitでjava.lang.IllegalStateExceptionって出たので対応</a>)、
というのでそう書いたし<code>gradle --stacktrace</code>してload順確認したんですけど、
それでもException出たので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>jvmarg(line:&quot;-javaagent:${configurations.jmockit.asPath.split(&#39;:&#39;)[0]}&quot;)
</span></code></pre></td></tr></table></div></figure>
<p>を入れて漸く動きました。</p>
<p>けど、折角JMockit入れたのに、
やっぱり別の時には<code>Timeout</code>も必要で。
JUnit4だと<code>@Rule</code>つけて<code>Timeout.millis(200)</code>でいいんですね今。
そしたら、JMockitで振る舞い変えなくても、
GroovyでなくJavaなら<code>Timeout</code>だけで済むじゃーないですかー!
うぁーん。</p>
<p>あとはParameterized Testにしました。
<a href="https://github.com/Pragmatists/JUnitParams">JUnitParams</a>が簡便そうです。
何がいいって、<a href="https://github.com/junit-team/junit4/wiki/parameterized-tests">JUnit4標準の方法</a>だとinstance fieldがparameterになるので、
全methodについて回っちゃいませんか? というのが不安で。
JUnitParamsなら、明示的に単一methodに対してparameter指定できるので安心です。</p>
<p>...ダメです。JUnitParams使うと、Timeout効かないことがわかりました。
悲しい。</p>
]]></content></entry><entry><title type="html"><![CDATA[Dream of deth]]></title><link href="http://u-ryo.github.io//blog/2017/12/05/dream-of-deth/"/><updated>2017-12-10T00:13:19+09:00</updated><id>/blog/2017/12/05/dream-of-deth/</id><content type="html"><![CDATA[<p>自分でもどういうわけかわかりませんが、
殺される夢を見ました。
realな夢です。
おかげで、2時半過ぎに寝たばかりなのに、5時頃起きてしまいました。
確かに今は締切に追われて、というか過ぎちゃってて憔悴してますが、
だからといって...</p>
<p>夢なので整合性は無いでしょうけど。
場所は中東。
ナントカ師がナントカしちゃって、
その辺りは記憶の欠損がありますが、
何かその宗派がナントカ師を自派で殺すことに決めてしまい、
でもナントカ師は一日差で逃れてて、
ぼくはその玄関前にいて、
何だかよくわかんないけど殺し合いは嫌だから、
逃げ延びてくれるといいなぁ、とか少し思ったりしてたら、
右上のちょっとした階段の上から、
迷彩服を着たヒゲむくの若い男、
真田太平記の樋口角兵衛(榎木孝明)に似た感じで、でも外国人で。
なので言葉が通じなくて。
何かライフルのように長い銃口を向けてきたから、
違う! 違うよ! 殺さないで! 撃たないで!
と思って手を上にあげて、顔を覆ってあーとか思ったら、
後頭部から頭頂部へ2〜3発、
音は聞こえなかったけど頭の後ろ上の方が破裂する感じがして。
えー治るかなこれ、とか思いつつ、
急速に意識が低下して行く...
というところで逆に気が付きました。
死を諦観・受容する暇もなく、
何で?! ぼくこんなことで死んでっちゃうの!?
という感じでしたね振り返ってみると。
殺される理由なんて、殺される方にはわかる筈もなく、
何となく間違って、もしくは念の為殺されただけのような。
でも向こうは「いや、向かってきたから」とか「怪しい素振りがあったから」
とか言えば済む程度で。
死の直前のぼくの態度は、生に執着し、命を乞うようなとても情けない感じで、
こういう時でも毅然としているためには、
普段余程達観してないとならないのだな、
というのがわかりました。</p>
<p>何でこんな夢、見たんだろう?
前世? でも自動小銃で撃たれてるから現代ですよ。
輪廻転生なんて信じられないですし。
どこかで見たような景色でもないし、何で??
普段も夢、見てるんでしょうけど、
ぼくはいつも殆ど覚えてないですし、
しかもこれで目が覚めるなんて。
虫の知らせ??</p>
<h3>後日</h3>
<p>元同僚に話したら、<br  />
「ぼくも体調悪い時には見ます。ビルから突き落とされる夢とか」<br  />
なるほど! 確かに、ぼくも朝その時から悪寒はしてた感じなので、
悪寒の説明をつけるために、脳が勝手な物語を紡いだ、のかな。
だから単に体調が悪いというsignだったんでしょう。</p>
]]></content></entry><entry><title type="html"><![CDATA[Rx as Stream API]]></title><link href="http://u-ryo.github.io//blog/2017/12/01/rx-as-stream-api/"/><updated>2017-12-02T22:29:46+09:00</updated><id>/blog/2017/12/01/rx-as-stream-api/</id><content type="html"><![CDATA[<p>周知のように、Androidではlambdaは書けるようになりましたが
Stream APIのようにCollectionsを扱えません。
折角Java8で覚えたのに。
ですが、RxJavaを使うとほぼStream APIのように書けるんですねーへーーー。
<a href="https://qiita.com/disc99/items/1b2e44a1105008ec3ac9">非同期や並列処理にも役立つRxJavaの使い方</a>
おかげでloopを回さず一文になったので、
ifの条件節に直接書けるようになりました。
<code>Optional</code>も出来るんですね。
書いてありますが、キモは<code>toBlocking().single()</code>でしょうか。</p>
]]></content></entry><entry><title type="html"><![CDATA[CheckBox.checked drawable not shown]]></title><link href="http://u-ryo.github.io//blog/2017/12/01/checkbox-checked-drawable-not-shown/"/><updated>2017-12-02T22:29:46+09:00</updated><id>/blog/2017/12/01/checkbox-checked-drawable-not-shown/</id><content type="html"><![CDATA[<p><code>ListView</code>で、各行にcheckboxを表示させるような話があって。
暗い背景なので、defaultのdesignだと見にくいんですね。
なのでcustomの白っぽいのに差し替えようとしたんですが、
なかなかうまく行かなかったのです。
基本的には、<code>res/drawable/</code>に、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;selector</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_enabled=</span><span class="s">&quot;false&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_disabled&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;true&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_on&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;false&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_off&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;true&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_on_pressed&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;false&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/ic_check_off_pressed&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/selector&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>と書いて(状態判定は上の行から順番になされる模様)、layoutで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;CheckBox</span>
</span><span class='line'>  <span class="na">android:id=</span><span class="s">&quot;@+id/historySelected&quot;</span>
</span><span class='line'>  <span class="na">style=</span><span class="s">&quot;@style/historyListCheckBox&quot;</span>
</span><span class='line'>  <span class="na">android:button=</span><span class="s">&quot;@drawable/selector_checkbox&quot;</span>
</span><span class='line'><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>というように参照すればいいんです。
が、それだとcheckしても絵が変わらなかったんですね。
別途<code>OnClickListener</code>に、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>checkbox.setButtonDrawable(checkbox.isChecked() ? R.drawable.ic_check_on : R.drawable.ic_check_off);
</span></code></pre></td></tr></table></div></figure>
<p>が必要でした、というのはまだわかるんですが、
これを書いても<code>ic_check_on</code>の絵にならなかったんですね(<code>ic_check_off</code>の絵のまま)。
なんでだろ～、1日程悩みました。</p>
<p>結局、
stackoverflowの<a href="https://stackoverflow.com/questions/34508164/cant-create-custom-arrayadapter-with-appcompat-elements-inside-of-it">Can't create custom arrayadapter with appcompat elements inside of it</a>に書いてあったんですけど、
<code>ListView</code>のAdapterを作る時の<code>Context</code>が、
<code>getApplicationContext()</code>で得られたものであったこと、
が敗因でした。<code>getApplication()</code>でもダメでした。
<code>this</code>でないと、<code>ic_check_on</code>がdrawされませんでした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>adapter = new SimpleAdapter(this, someList, R.layout.some_listview, new String[]{...}, new int[]{R.id.someId,...});
</span></code></pre></td></tr></table></div></figure>
<p><code>this</code>で引き回すと、使ってるfieldとか色々引きずるから
なるべく<code>getApplicationContext()</code>にしましょうね、
というのを聞いたことがあるのですが、
なるほどと思ってそうすると、
結構色んな箇所で出るべきものが出なくなるんですよね。
気を付けないとなりません。</p>
]]></content></entry><entry><title type="html"><![CDATA[CheckBox on ListView]]></title><link href="http://u-ryo.github.io//blog/2017/11/24/checkbox-on-listview/"/><updated>2017-11-29T20:38:56+09:00</updated><id>/blog/2017/11/24/checkbox-on-listview/</id><content type="html"><![CDATA[<p>Androidでのお話です。
<code>ListView</code>のそれぞれに<code>CheckBox</code>をつけたら、
checkboxはcheck出来るものの、項目選択が出来なくなりました。
どうやら<code>onItemClick</code>が呼ばれてない様子。
調べてみると、<code>CheckBox</code>がfocusを奪ってしまっているそうでした。
(<a href="http://inujirushi123.blog.fc2.com/blog-entry-53.html">カスタマイズしたListViewに設定したCheckBoxのon/offを行全体で行う</a>)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>android:clickable=&quot;false&quot;
</span><span class='line'>android:focusable=&quot;false&quot;
</span></code></pre></td></tr></table></div></figure>
<p>が必要とのこと。</p>
<p>また、
background処理後、<code>Adapter</code>の値を変えただけでは<code>CheckBox</code>の見た目に変化はないんですね。
explicitに<code>setChecked(false)</code>して回らないとなりません。
その際、<code>listView.getChildCount()</code>で取れるcountは、<code>ListView</code>の全てではなく、見える範囲のListのobjectなんですね! 確かにscrollすればredrawかかってadapterの値が反映されるからいいんですけど、何かしない限りredrawされないから自分で描画しないとならないんですねー。</p>
]]></content></entry><entry><title type="html"><![CDATA[OnClickListener with ProgressDialog by RxAndroid]]></title><link href="http://u-ryo.github.io//blog/2017/11/24/onclicklistener-with-progressdialog-by-rxandroid/"/><updated>2017-11-29T20:38:56+09:00</updated><id>/blog/2017/11/24/onclicklistener-with-progressdialog-by-rxandroid/</id><content type="html"><![CDATA[<p>「clickしたらbackgroundで処理して
その間ProgressDialog出して
終わったらProgressDialog消して
終了/失敗dialogを表示する」のを
RxAndroid(AxJava)でやる、
というのは、
<code>using()</code>を使うといいらしいです。
cf. <a href="https://qiita.com/boohbah/items/e8010730725c54f85a3a">RxJavaを使った通信中にProgressダイアログを出す</a></p>
<p>元々がretrofit2を使ってないので、
retrofit2を使うともうちょっと違うかも。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Override
</span><span class='line'>public void onClick(View v) {
</span><span class='line'>    LogUtil.d(&quot;è¨ºæ­åå¾çµæãuploadãã button&quot;);
</span><span class='line'>    uploadButtonEnable(false);
</span><span class='line'>    if (!activity.networkCheck()) {
</span><span class='line'>        activity.genAlertDialog(activity.getString(
</span><span class='line'>                R.string.no_network_connectivity_available_message),
</span><span class='line'>                (dialog, which) -&gt; {});
</span><span class='line'>        uploadButtonEnable(true);
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>    Single.using(this::showProgressDialog,
</span><span class='line'>            dialog -&gt; Single.<span class="nt">&lt;Boolean&gt;</span>create(this::setUploadSubscriber)
</span><span class='line'>                    .subscribeOn(Schedulers.newThread())
</span><span class='line'>                    .observeOn(AndroidSchedulers.mainThread()),
</span><span class='line'>            Dialog::dismiss)
</span><span class='line'>            .subscribe(this::controlUploadButtonWithDialog,
</span><span class='line'>                    this::showUploadFailureDialog);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private ProgressDialog showProgressDialog() {
</span><span class='line'>    ProgressDialog dialog = new ProgressDialog(activity);
</span><span class='line'>    dialog.setMessage(activity.getString(R.string.history_uploading));
</span><span class='line'>    dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
</span><span class='line'>    dialog.show();
</span><span class='line'>    LogUtil.d(dialog.toString());
</span><span class='line'>    return dialog;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void setUploadSubscriber(SingleSubscriber<span class="err">&lt;</span>? super Boolean&gt; subscriber) {
</span><span class='line'>    View historyListView = activity.findViewById(R.id.historyListView);
</span><span class='line'>    List<span class="nt">&lt;String&gt;</span> selectedList = new ArrayList<span class="err">&lt;</span>&gt;();
</span><span class='line'>    Adapter adapter = null;
</span><span class='line'>    if (historyListView != null) {
</span><span class='line'>        adapter = ((ListView) historyListView).getAdapter();
</span><span class='line'>        for (int i = 0; i <span class="nt">&lt; adapter</span><span class="err">.</span><span class="na">getCount</span><span class="err">();</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
</span><span class='line'>            <span class="na">Map</span><span class="err">&lt;</span><span class="na">String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span> historyItems = (Map<span class="nt">&lt;String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span>) adapter.getItem(i);
</span><span class='line'>            if (&quot;true&quot;.equals(historyItems.get(&quot;historySelected&quot;))) {
</span><span class='line'>                selectedList.add(historyItems.get(&quot;historyCatalogID&quot;));
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if (selectedList.isEmpty()) {
</span><span class='line'>            subscriber.onSuccess(false);
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    try {
</span><span class='line'>        ProcessUtil.callReportDataAll(commonBean.toMapFull(), activity, selectedList);
</span><span class='line'>        if ((!selectedList.isEmpty()
</span><span class='line'>                <span class="err">&amp;&amp;</span> !ProcessUtil.uploadSucceeded(selectedList, activity))
</span><span class='line'>                || (selectedList.isEmpty()
</span><span class='line'>                <span class="err">&amp;&amp;</span> !ProcessUtil.lastUploadSucceeded(activity))) {
</span><span class='line'>            subscriber.onError(new RuntimeException(&quot;&quot;));
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>        ProcessUtil.sendTerminalUsageHistory(commonBean.toMap(), activity);
</span><span class='line'>        subscriber.onSuccess(true);
</span><span class='line'>        LogUtil.d(selectedList.toString());
</span><span class='line'>
</span><span class='line'>        if (adapter != null) {
</span><span class='line'>            for (int i = 0; i <span class="nt">&lt; adapter</span><span class="err">.</span><span class="na">getCount</span><span class="err">();</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
</span><span class='line'>                <span class="na">Map</span><span class="err">&lt;</span><span class="na">String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span> historyItems = (Map<span class="nt">&lt;String</span><span class="err">,</span> <span class="na">String</span><span class="nt">&gt;</span>) adapter.getItem(i);
</span><span class='line'>                if (&quot;true&quot;.equals(historyItems.get(&quot;historySelected&quot;))) {
</span><span class='line'>                    historyItems.put(&quot;historySelected&quot;, &quot;false&quot;);
</span><span class='line'>                    historyItems.put(&quot;historySaved&quot;,
</span><span class='line'>                            activity.getString(R.string.history_list_already_saved));
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    } catch (Exception e) {
</span><span class='line'>        LogUtil.e(e);
</span><span class='line'>        subscriber.onError(e);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void controlUploadButtonWithDialog(boolean hasItemSelected) {
</span><span class='line'>    ListView listView = (ListView) activity.findViewById(R.id.historyListView);
</span><span class='line'>    if (hasItemSelected) {
</span><span class='line'>        activity.genAlertDialog(activity.getString(
</span><span class='line'>                R.string.diagnosis_result_upload_success_message),
</span><span class='line'>                (dialog, which) -&gt; {});
</span><span class='line'>        if (listView != null) {
</span><span class='line'>            for (int i = 0; i <span class="nt">&lt; listView</span><span class="err">.</span><span class="na">getChildCount</span><span class="err">();</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
</span><span class='line'>                <span class="na">CheckBox</span> <span class="na">checkBox =</span><span class="err"> </span><span class="s">(CheckBox)</span> <span class="na">listView</span><span class="err">.</span><span class="na">getChildAt</span><span class="err">(</span><span class="na">i</span><span class="err">)</span>
</span><span class='line'>                        <span class="err">.</span><span class="na">findViewById</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">id</span><span class="err">.</span><span class="na">historySelected</span><span class="err">);</span>
</span><span class='line'>                <span class="na">if</span> <span class="err">(</span><span class="na">checkBox</span><span class="err">.</span><span class="na">isChecked</span><span class="err">())</span> <span class="err">{</span>
</span><span class='line'>                    <span class="na">checkBox</span><span class="err">.</span><span class="na">setChecked</span><span class="err">(</span><span class="na">false</span><span class="err">);</span>
</span><span class='line'>                    <span class="na">checkBox</span><span class="err">.</span><span class="na">setEnabled</span><span class="err">(</span><span class="na">false</span><span class="err">);</span>
</span><span class='line'>                    <span class="na">TextView</span> <span class="na">saved =</span><span class="err"> </span><span class="s">(TextView)</span> <span class="na">listView</span><span class="err">.</span><span class="na">getChildAt</span><span class="err">(</span><span class="na">i</span><span class="err">)</span>
</span><span class='line'>                            <span class="err">.</span><span class="na">findViewById</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">id</span><span class="err">.</span><span class="na">historySaved</span><span class="err">);</span>
</span><span class='line'>                    <span class="na">saved</span><span class="err">.</span><span class="na">setText</span><span class="err">(</span><span class="na">activity</span><span class="err">.</span><span class="na">getString</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">string</span><span class="err">.</span><span class="na">history_list_already_saved</span><span class="err">));</span>
</span><span class='line'>                    <span class="na">saved</span><span class="err">.</span><span class="na">setTextColor</span><span class="err">(</span><span class="na">Color</span><span class="err">.</span><span class="na">GRAY</span><span class="err">);</span>
</span><span class='line'>                <span class="err">}</span>
</span><span class='line'>            <span class="err">}</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>    <span class="err">}</span> <span class="na">else</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">activity</span><span class="err">.</span><span class="na">genAlertDialog</span><span class="err">(</span><span class="na">activity</span><span class="err">.</span><span class="na">getString</span><span class="err">(</span><span class="na">R</span><span class="err">.</span><span class="na">string</span><span class="err">.</span><span class="na">history_nothing_checked</span><span class="err">),</span>
</span><span class='line'>                <span class="err">(</span><span class="na">dialog</span><span class="err">,</span> <span class="na">which</span><span class="err">)</span> <span class="na">-</span><span class="nt">&gt;</span> {});
</span><span class='line'>    }
</span><span class='line'>    uploadButtonEnable(false);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void showUploadFailureDialog(Throwable e) {
</span><span class='line'>    uploadButtonEnable(true);
</span><span class='line'>    LogUtil.e(checkStr(e.getMessage()), e);
</span><span class='line'>    activity.genAlertDialog(activity.getString(
</span><span class='line'>            R.string.diagnosis_result_upload_failure_message)
</span><span class='line'>                    + &quot;\n&quot; + e.getMessage(),
</span><span class='line'>            (dialog, which) -&gt; {});
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public void uploadButtonEnable(boolean enable) {
</span><span class='line'>    uploadButton.setEnabled(enable);
</span><span class='line'>    if (enable) {
</span><span class='line'>        uploadButton.getBackground().setColorFilter(null);
</span><span class='line'>    } else {
</span><span class='line'>        uploadButton.getBackground()
</span><span class='line'>                .setColorFilter(Color.GRAY, PorterDuff.Mode.MULTIPLY);
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Security Links]]></title><link href="http://u-ryo.github.io//blog/2017/10/21/security-links/"/><updated>2017-10-22T00:23:38+09:00</updated><id>/blog/2017/10/21/security-links/</id><content type="html"><![CDATA[<p>Security関係のLinkをまとめました。
はてぶにすればいいのに > 自分</p>
<ul>
<li><a href="https://takagi-hiromitsu.jp/diary/">高木浩光＠自宅の日記</a></li>
<li><a href="https://blog.tokumaru.org/">徳丸浩の日記</a></li>
<li><a href="http://masatokinugawa.l0.cm/">Masato Kinugawa Security Blog</a></li>
<li><a href="https://gist.github.com/mala">mala</a> 今LINEにいるんですね</li>
<li><a href="https://blog.ohgaki.net/">yohgaki's blog 書かない日記</a></li>
<li><a href="http://nanashi0x.hatenablog.com/">忙しい人のためのサイバーセキュリティニュース</a></li>
<li><a href="http://n.pentest.ninja/">(n)</a>, <a href="http://csirt.ninja/">(n)inja csirt</a>(個人でCSIRT)</li>
<li><a href="http://blog.macnica.net/">マクニカネットワークスセキュリティ研究センターブログ</a></li>
</ul>
<p>あー、勉強しないと。</p>
]]></content></entry><entry><title type="html"><![CDATA[Knapsack Problem]]></title><link href="http://u-ryo.github.io//blog/2017/10/20/knapsack-problem/"/><updated>2017-10-21T03:07:49+09:00</updated><id>/blog/2017/10/20/knapsack-problem/</id><content type="html"><![CDATA[<p>ここ最近、Knapsack Problemが流行っている感じがしています。</p>
<p><a href="http://www.ap-siken.com/kakomon/29_haru/pm03.html">応用情報技術者過去問題 平成29年春期 午後問3</a>では基本「全探索」、改善提案が「枝刈り」でしたが、それでは全然不十分です。この問題は要するにKnapsack Problemのちょっとした変形で、code量もさしたることなく書けますし、折角FEではなくAPなのだし、日本の若者のためにも、Knapsackで書くよう誘導すべきだったのでは、と「禿げしく」思ったものでした。</p>
<p>すると、今度は<a href="http://www.ap-siken.com/kakomon/29_aki/pm03.html">応用情報技術者過去問題 平成29年秋期 午後問3</a>でKnapsack Problemを正面から出してきましたね。0-1ではなく普通の。ぼくは前回のrevengeではないかと思ってみています。
問題自体は、あまりにも普通のKnapsack Problemなので、ツッコミようがなくてつまんなかったデス。</p>
<p>この他にアジアでも。そっちは0-1でした。</p>
<h3>References</h3>
<ul>
<li>Wikipedia<a href="https://en.wikipedia.org/wiki/Knapsack_problem">En</a>, <a href="https://ja.wikipedia.org/wiki/%E3%83%8A%E3%83%83%E3%83%97%E3%82%B5%E3%83%83%E3%82%AF%E5%95%8F%E9%A1%8C">Ja</a></li>
<li><a href="http://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=DPL_1_B">Aizu Online Judge</a></li>
<li><a href="http://www.itmedia.co.jp/keywords/algorithmer.html">「最強最速アルゴリズマー養成講座」最新記事一覧</a>, <a href="http://www.itmedia.co.jp/enterprise/articles/1005/15/news002.html">病みつきになる「動的計画法」、その深淵に迫る</a>, <a href="http://www.itmedia.co.jp/enterprise/articles/1003/06/news002.html">アルゴリズマーの登竜門、「動的計画法・メモ化再帰」はこんなに簡単だった</a></li>
<li><a href="http://pieceofnostalgy.blogspot.jp/2013/12/01.html">片鱗懐古のブログ 01ナップサック問題を動的計画法で解く場合の考え方</a></li>
<li><a href="http://fantom1x.blog130.fc2.com/blog-entry-174.html">【Java】ナップサック問題(knapsack)[動的計画法]  </a></li>
</ul>
<p>ちなみに日本語では「ナップザック」、登山用語はドイツから入ってきたから、です。</p>
]]></content></entry><entry><title type="html"><![CDATA[Robolectric + PowerMock]]></title><link href="http://u-ryo.github.io//blog/2017/10/17/robolectric-powermock/"/><updated>2017-11-29T20:38:56+09:00</updated><id>/blog/2017/10/17/robolectric-powermock/</id><content type="html"><![CDATA[<p><a href="https://robolectric.org">Robolectric</a>のquick startは、<a href="http://robolectric.org/writing-a-test/">本家</a>が詳しい。</p>
<ul>
<li><code>build.gradle</code>に、以下が必要(Android Studio 2系の場合)。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>testCompile &#39;org.robolectric:robolectric:3.4.2&#39;
</span><span class='line'>testCompile &#39;org.robolectric:shadows-multidex:3.3.2&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-module-junit4:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-module-junit4-rule:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-api-mockito2:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-reflect:1.7.3&#39;
</span><span class='line'>testCompile &#39;org.powermock:powermock-classloading-xstream:1.7.3&#39;
</span></code></pre></td></tr></table></div></figure></li>
<li>Test Classは、Android Studioで開いた実class java fileの<code>public class CLASS名</code>のところで黄色いヒントをclickして<code>Create Test class</code>を選択、<code>JUnit4</code>で作成</li>
<li>既存test classの<code>Whitebox</code>は<code>org.powermock.reflect.Whitebox</code>で置き換え</li>
<li>既存test classの<code>@RunWith</code>の<code>MockitoJUnitRunner</code>は<code>org.mockito.junit.MockitoJUnitRunner</code>で置き換え</li>
<li><code>org.mockito.exceptions.misusing.UnnecessaryStubbingException:</code>というwarningが出るようになったので<code>@RunWith(MockitoJUnitRunner.Silent.class)</code>にすると解消<br  />
cf. <a href="https://stackoverflow.com/questions/42947613/how-to-resolve-unneccessary-stubbing-exception">How to resolve Unneccessary Stubbing exception</a></li>
<li><code>Robolectric</code>なTestは、1.<code>@RunWith(RobolectricTestRunner.class)</code> 2.<code>activity = Robolectric.setupActivity(SomeActivity.class);</code>で<code>Activity</code>を起動</li>
<li><code>RuntimeException: Multi dex installation failed</code>と言われるので<code>shadows-multidex</code>が必要<br  />
cf. <a href="https://qiita.com/kuwapp/items/942f0e44adbd45adff10">Robolectric と Multidex でテストが落ちる問題の対応</a></li>
<li>static methodのmockは<a href="https://github.com/powermock/powermock">PowerMock</a>と。<code>@RunWith</code>がかぶっちゃうよ、どうしよう! → <a href="https://github.com/robolectric/robolectric/wiki/Using-PowerMock">本家に解説</a>あり。要は、<code>@PowerMockIgnore</code>でmockito、robolectric、android標準classesを除外、<code>@PrepareForTest</code>でstatic methodを持つclassを指定し、<code>@Rule</code>を入れ(使わないのによくわからないが必要)、<code>PowerMockito.mockStatic(...)</code>で当該classを指定</li>
<li><code>NoClassDefFoundError: org/powermock/classloading/ClassloaderExecutor</code>と言われるので、<code>powermock-classloading-xstream</code>が必要<br  />
cf. <a href="https://github.com/powermock/powermock/issues/597">version 1.5.5 java.lang.ClassNotFoundException: org.powermock.classloading.DeepCloner #597</a></li>
<li><code>NoClassDefFoundError: org/mockito/cglib/proxy/MethodInterceptor</code>と言われるので、<code>powermock-api-mockito2</code>と<code>2</code>でないとならない<br  />
cf. <a href="https://github.com/powermock/powermock/issues/819">Problem with org.mockito.plugins.MockMaker and loading MethodInterceptor #819</a></li>
<li><code>javax.xml.parsers.FactoryConfigurationError: Provider ...DocumentBuilderFactoryImpl cannot be cast to javax.xml.parsers.DocumentBuilderFactory</code>と言われるので<code>@PowerMockIgnore</code>に<code>"javax.xml.*", "org.xml.sax.*", "org.w3c.dom.*", "org.apache.log4j.*"</code>が必要<br  />
cf. <a href="https://groups.google.com/forum/#!topic/powermock/YJYPgBLpkqk">Powermock + Mockito + Spring = DocumentBuilderFactoryImpl</a></li>
<li><code>org/powermock/default.properties is found in 2 places</code>と言われてerrorにはならないけどwarningが出るので、<code>@PowerMockIgnore</code>に<code>"org.powermock.*"</code>も入れておく(試行錯誤の末なので参照なし)</li>
<li><code>AsyncTask</code>があっても、特段その終了を待たずにtestが終了してしまう。<code>Robolectric.getBackgroundThreadScheduler().pause();</code>で<code>AsyncTask#doInBackground()</code>を止める必要がある(<code>AsyncTask#onPreExecute()</code>は実行される)。</li>
<li><a href="https://github.com/robolectric/robolectric/blob/master/robolectric/src/test/java/org/robolectric/shadows/ShadowAsyncTaskTest.java"><code>ShadowAsyncTaskTest.java</code></a>を見ると、<code>setUp()</code>で<code>Robolectric.getBackgroundThreadScheduler().pause();</code>(と<code>Robolectric.getForegroundThreadScheduler().pause();</code>?)でthread止めて、<code>asyncTask.execute()</code>すると<code>onPreExecute()</code>が動き、次に<code>ShadowApplication.runBackgroundTasks();</code>すると<code>doInBackground()</code>、<code>ShadowLooper.runUiThreadTasks();</code>すると<code>onPostExecute()</code>が動く(ようだが、試してみると<code>ShadowApplication.runBackgroundTasks()</code>で返ってこなくなった。何故?!←これは単に<code>AsyncTask</code>中でdialog出して止まっていたため)</li>
<li>target class内でnewしているもののmockは、
<code>PowerMockito.whennew(XXX.class).thenReturn(mock);</code>
だと、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>org.mockito.exceptions.base.MockitoException: 
</span><span class='line'>ClassCastException occurred while creating the mockito mock :
</span><span class='line'>...
</span><span class='line'>You might experience classloading issues, please ask the mockito mailing-list.
</span></code></pre></td></tr></table></div></figure>
と言われて失敗する。</li>
<li>shadow classでもstatic methodのmockが出来る。PowerMock使わずとも良い様子。いちいちShadow class作って各method毎に<code>@Implements</code>書くのは面倒ではあるが、PowerMockを<code>@Rule</code>して並存させると上述のようにclass loaderがどうのと言われて失敗したので、Robolectric一本で頑張った方がよさ気。PowerMock使わないなら<code>testCompile</code>も<code>robolectric</code>と<code>shadows-multidex</code>の2つで済むし、PowerMock導入に伴って変更したMockito部分も変更不要になる。</li>
<li>Custom Shadow classesの追加でcustom TestRunnerは作成不要、単に<code>@Config</code>に<code>shadows={ShadowXXX.class}</code>と追記していけば良い。</li>
<li>Shadowについて。Android APIのclassesについては、全て<code>ShadowXXX</code>というclassが揃っている(e.g. <code>ShadowActivity</code>)。まるっとmockしたものを返したい場合には、custom shadow methodで<code>return Shadow.newInstanceOf(ShadowBluetoothDevice.class);</code>で良い。</li>
<li><a href="http://robolectric.org/extending/#shadowing-constructors">constructorもshadow出来る</a>。constructorの場合には単に<code>public void __constructor__(...){...}</code>でよく、<code>@Implementation</code> annotationは不要(あっても害はない)。</li>
<li><code>extends</code>してるclassのconstructorの場合には、super classのconstructorのshadowingも必要。さもなくばsuper classの当該constructorが実行されてしまう。また、super classのconstructorもshadowingする場合、当該Shadow classの方も<code>extends</code>しないと<code>ClassCastException</code>に見舞われる。<code>A extends B</code>で<code>A</code>のconstructorをshadowingしたら<code>B</code>のconstructorもshadowingし、<code>ShadowA extends ShadowB</code>にする必要がある。</li>
<li><code>Shadows.shadowOf(myDialog).hasBeenDissmissed()</code>といったようにUIの状態を取得できる。</li>
<li><code>context.getPackageManager().getLaunchIntentForPackage("package name")</code>がRobolectricsでやると<code>null</code>を返しやがるのでヌルポで失敗しくさる。多くの人が困っている模様。cf. <a href="https://github.com/robolectric/robolectric/issues/747">PackageManager#getLaunchIntentForPackage() returns null #747</a> ←これによると2.2の頃から。3.4から<code>PackageManager</code>周りは<code>RobolectricPackageManager</code>がdeprecatedになって他と同じように<code>ShadowPackageManager</code>を使えと<a href="http://robolectric.org/migrating/#migrating-from-33-to-34">Migrating from 3.3 to 3.4</a>にはあるが、<code>shadowOf(RuntimeEnvironment.application.getPackageManager());</code>としても、versionを3.3に落として<code>RuntimeEnvironment.setRobolectricPackageManager(packageManager);</code>としても、testにおける<code>ApplicationPackageManager#getLaunchIntentForPackage</code>は<code>null</code>を返す。仕方なく、<code>ShadowApplicationPackageManager</code>をextendsしてcustom PackageManagerを作ってみても、何を<code>@implements</code>したらいいのか。<code>PackageManager.class</code>では効かないし(抽象クラス?なのでそれは仕方ないのだろう)、<code>android.app.ApplicationPackageManager.class</code>では何故か名前解決に失敗してcompile出来ない。<a href="https://github.com/robolectric/robolectric/commit/5e082743821857f057ab45945e838d5ef6b69e37">RobolectricPackageManagerTest.java</a>を見ると、<code>notNullValue()</code>でassert出来そうなのだが、うまく行かなかった(Step Overしてやってみても、そもそも<code>ShadowApplicationPackageManager</code>ではなく<code>android.app.ApplicationPackageManager#getLaunchIntentForPackage</code>が何かにmethod callを取られて空で返している感じ)。色々探して結局諦めた。ホントは、↓というようにやりたかったのだが。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();
</span><span class='line'>assertThat(shadowOf(activity).getNextStartedActivity().getAction(),
</span><span class='line'>               is(&quot;jp.ideacross.allcardia.main.SplashActivity&quot;));
</span></code></pre></td></tr></table></div></figure></li>
</ul>
<h2>Robospock -> ElectricSpock or Spock for Android</h2>
<p>せめてresourceの場所なりと。</p>
<ul>
<li><a href="http://robospock.github.io/RoboSpock/">RoboSpock</a>ですがちょっと更新が鈍いということで<a href="https://github.com/hkhc/electricspock">ElectricSpock</a>。但し新しい分情報少なし</li>
<li><a href="https://github.com/AndrewReitz/android-spock">Spock for Android</a>もあり</li>
<li>どちらも、directory structureがstandardでないとならない様子(要するに<code>app/src/main/java/...</code>にsourceがあり<code>app/src/test/groovy/...</code>にSpock Testcodeがある)。<code>build.gradle</code>での<code>android.sourceSets.test.setRoot(...)</code>は効かないようだった</li>
<li>要は、<code>buildscript.dependencies</code>で<code>classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:1.2.0'</code>を指定、<code>apply plugin: 'com.android.application'</code>と<code>apply plugin: 'groovyx.android'</code>を指定、<code>dependencies</code>に<code>testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'</code>を指定すれば素のSpock、<code>testCompile 'com.github.hkhc:electricspock:0.6'</code>ならElectricSpock、<code>androidTestCompile 'com.andrewreitz:spock-android:2.0'</code>ならSpock for Android(←これだけ<code>androidTestCompile</code>なのに注意)</li>
</ul>
<p>という感じでしょうか。</p>
<h2>Robolectric3 + RxJava(RxAndroid)1 + Retrofit2</h2>
<p>RxJava + Retrofitなんて鉄板だからRobolectricによるtestなんてすぐ見つかると思ってたんですが、意外に手こずりました。要は、</p>
<ul>
<li>Retrofit2に対しては<a href="https://github.com/square/okhttp/tree/master/mockwebserver">MockWebServer</a>(<a href="https://qiita.com/toastkidjp/items/4986caee5d776a4c9e6c">OkHttp3 の MockWebServer を使う</a>)</li>
<li>RxJavaに対しては<code>RxJavaHooks</code>(<a href="http://hydrakecat.hatenablog.jp/entry/2016/12/14/RxJava_のテスト(2)%3A_RxJavaHooks%2C_RxAndroidPlugins">RxJava のテスト(2): RxJavaHooks, RxAndroidPlugins</a>)</li>
<li><code>MockWebServer</code>は、例にあるように基本<code>new</code>して<code>MockResponse</code>を<code>enqueue</code>して<code>url(...)</code>すればstartしてreturn valueにURL(<code>http://localhost:XXXXX/</code>←random port number)が入っているのでそれをRetrofitに食わせればいいのだけれども、URLをsetする部分はShadowの中なので、test classから直接食わせられず。なので固定port番号を使いたく、その場合<code>server.url("/...");</code>は不要で、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server.start(portNumber);
</span></code></pre></td></tr></table></div></figure>
でおk</li>
<li>↑<code>http</code>になると<code>isCleartextTrafficPermitted()</code>まわりで失敗するようになった。これは、<a href="https://github.com/square/okhttp/issues/2533#issuecomment-223093100"><code>isCleartextTrafficPermitted()</code> fails on OpenJDK 8 + Robolectric #2533</a>にあるように、<code>NetworkSecurityPolicy</code>をShadowしてやればよい。</li>
<li>RxJavaの<code>onNext</code>や<code>onCompleted</code>が実行されない問題は、<code>Robolectric.flushBackgroundThreadScheduler();</code>ではなく、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>RxJavaHooks.setOnNewThreadScheduler(s -&gt; Schedulers.immediate());
</span></code></pre></td></tr></table></div></figure>
によって別threadじゃなくmain threadで実行するようにすればおk</li>
<li>上記の話は、<code>Retrofit2</code>のService interfaceで<code>Observable&lt;...&gt;</code>を返す場合のもの。<code>Call&lt;...&gt;</code>を返す形にして<code>enqueue()</code>して<code>Callback&lt;...&gt;</code>で<code>onResponse()</code>、<code>onFailure()</code>でhandleする場合には、こうは行かなかった(<code>onResponse()</code>も<code>onFailure()</code>も実行されない)。<code>ShadowLooper.runUiThreadTasks()</code>でうまく行くようなことを書いてある情報(<a href="https://stackoverflow.com/questions/37909276/testing-retrofit-2-with-robolectric-callbacks-not-being-called">Testing retrofit 2 with robolectric, callbacks not being called</a>)もあったが、症状変わらず。<a href="https://qiita.com/noboru_i/items/5eeb8b8d5684622aee95">OkHttpのMockWebServerとRobolectricでFragmentの動作をテストする</a>にRetrofit2内で使っている<code>OkHttpClient.Builder#newBuilder</code>をshadowしてうまく行く話があったので、試すと確かに<code>onResponse()</code>が呼ばれた! ただ、今回ぼくは実classの方で<code>new Retrofit().newBuilder().client(new OkHttpClient().newBuilder().build())</code>とかって<code>client</code>methodを使っておらずdefaultで裏でimplicitlyに生成される<code>OkHttpClient</code>そのまま使っており、それだと<code>newBuilder()</code>呼ばれないので、色々辿ってった挙句、<code>okhttp3.Dispatcher#executorService</code>をshadowして、前述のpageにあったようにすぐ<code>command.run()</code>する<code>execute</code>methodを持つ<code>AbstractExecutorService</code>classを返してやると、うまく行った。<code>Dispatcher#executorService</code>って<code>java.util.concurrent.ThreadPoolExecutor</code>をdefaultでは使っており、Androidのthreadとは違うから、uncontrollableだったんですね。考えてみるに、RxAndroidと違いRetrofitはAndroid専用ではないので、<code>java.util.concurrent</code>の<code>Executor</code>使ってるのも当然ですか。</li>
</ul>
<h2>AccountManager with Robolectric(というかMockito)</h2>
<ul>
<li><p>基本的には、<code>AccountManager.get(Context)</code>はJUnit Test内でもtarget class内でも同じobjectを返すので、そのままassertion可能</p>
</li>
<li><p>ただ、例えば<code>manager.blockingGetAuthToken(...)</code>でExceptionを起こさせたい時は、<code>AccountManager manager = spy(AccountManager.get(application));</code>した<code>manager</code>を<code>getSystemService(Context.ACCOUNT_SERVICE)</code>で<code>doReturn</code>するようにした<code>Application</code>を<code>spy</code>して、その<code>application</code>を<code>RuntimeEnvironment.application</code>の代わりにねじ込む必要がある(<a href="https://stackoverflow.com/questions/26937001/using-mockito-to-mock-accountmanager">Using mockito to mock AccountManager</a>)。具体的には、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Rule
</span><span class='line'>public ExpectedException thrown = ExpectedException.none();
</span><span class='line'>  :
</span><span class='line'>Account account = new Account(&quot;any name&quot;, CarCloudAuthUtil.ACCOUNT_TYPE);
</span><span class='line'>Application application = spy(RuntimeEnvironment.application);
</span><span class='line'>util = new CarCloudAuthUtil(application);
</span><span class='line'>AccountManager manager = spy(AccountManager.get(application));
</span><span class='line'>doReturn(manager)
</span><span class='line'>        .when(application)
</span><span class='line'>        .getSystemService(Context.ACCOUNT_SERVICE);
</span><span class='line'>manager.addAccountExplicitly(account, &quot;any key&quot;, new Bundle());
</span><span class='line'>manager.setAuthToken(account, CarCloudAuthUtil.AUTH_TOKEN_TYPE, &quot;any string&quot;);
</span><span class='line'>doThrow(AuthenticationException.class)
</span><span class='line'>        .when(manager)
</span><span class='line'>        .blockingGetAuthToken(eq(account), eq(CarCloudAuthUtil.AUTH_TOKEN_TYPE), eq(true));
</span><span class='line'>thrown.expect(AuthenticationException.class);
</span><span class='line'>thrown.expectMessage(new IsNull());
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p><code>Exception</code>のassertionは、<code>@Test(expected=...)</code>でも良いが、<code>@Rule</code>でも書ける(<a href="https://qiita.com/su-kun1899/items/5c9f0294a7de1986e542#ruleを使った書き方">JUnitでの例外テストの書き方</a>)。その場合、<code>Exception#message</code>が<code>null</code>の場合のassertionは<code>org.hamcrest.core.IsNull</code>を用いて<code>thrown.expectMessage(new IsNull());</code>とする(<a href="https://stackoverflow.com/questions/35199026/expectedexception-expectmessagestring-null-is-not-working">ExpectedException.expectMessage((String) null) is not working</a>)。</p>
</li>
<li><p>mocking method実行時に他のことをしたい時には、<code>when(mock.methodCall()).thenAnswer(m -&gt; {...});</code>とlambdaで書ける(<a href="https://qiita.com/kazurof/items/1171c7e038050453c6c9#mockitoでのサンプル">mockitoとJMockitについてのメモ</a>)。</p>
</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Tomcat vulnerability CVE-2017-12617]]></title><link href="http://u-ryo.github.io//blog/2017/10/13/tomcat-vulnerability-cve-2017-12617/"/><updated>2017-10-16T21:11:35+09:00</updated><id>/blog/2017/10/13/tomcat-vulnerability-cve-2017-12617/</id><content type="html"><![CDATA[<p><a href="https://oss.sios.com/security/tomcat-security-vulnerabiltiy-20170920">Tomcatの複数の脆弱性(CVE-2017-12617, CVE-2017-12615 , CVE-2017-12616)</a>が、範囲が広がって出てました。
<code>readonly initialization parameter</code>を<code>false</code>にして<code>PUT</code>を有効化している時にaffectする(任意のjsp fileを不正に<code>PUT</code>してから好き放題する)、とのことなので、きょうびはRESTで<code>PUT</code>多用するから影響範囲広いんでしょうか? 否、「default servletのinitialization parameter(具体的には<code>web.xml</code>の<code>servlet</code>tagの<code>init-param</code>)で<code>false</code>を明示した時(defaultは<code>true</code>)なので、殆どのところはそんなことしてないから大丈夫なんじゃないでしょうか。
実際、<a href="https://github.com/cyberheartmi9/CVE-2017-12617">POC</a>で試してみたところ、うちのsiteは(version的には範囲内ですが)<code>Not Vulnerable to CVE-2017-12617</code>と出ました。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ python tomcat-cve-2017-12617.py -u http://localhost:8080
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   _______      ________    ___   ___  __ ______     __ ___   __ __ ______ 
</span><span class='line'>  / ____\ \    / /  ____|  |__ \ / _ \/_ |____  |   /_ |__ \ / //_ |____  |
</span><span class='line'> | |     \ \  / /| |__ ______ ) | | | || |   / /_____| |  ) / /_ | |   / /
</span><span class='line'> | |      \ \/ / |  __|______/ /| | | || |  / /______| | / / &#39;_ \| |  / /
</span><span class='line'> | |____   \  /  | |____    / /_| |_| || | / /       | |/ /| (_) | | / /
</span><span class='line'>  \_____|   \/   |______|  |____|\___/ |_|/_/        |_|____\___/|_|/_/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[@intx0x80]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Poc Filename  Poc.jsp
</span><span class='line'>Not Vulnerable to CVE-2017-12617
</span></code></pre></td></tr></table></div></figure></p>
]]></content></entry><entry><title type="html"><![CDATA[Alpaca Algo]]></title><link href="http://u-ryo.github.io//blog/2017/10/08/alpaca-algo/"/><updated>2017-10-09T16:29:39+09:00</updated><id>/blog/2017/10/08/alpaca-algo/</id><content type="html"><![CDATA[<p>こういうの、あったんですねー。すごいすごい。
<a href="https://algo.alpaca.ai">Alpaca Algo</a>、かつてのCapitalicoだそうですが、
自分でindicatorを指定して、勝ちpattern(負例も!)を指定して、
そうすると裏で超高速に事例を学習し、
back testまで速攻でやってくれるとは!
幾つか試してみましたけど、テキトーにやっても、
back testでプラスになったりするので、おぉー!
と思ってはみたものの。
back testの期間をdefaultの3ヶ月ではなく、
1年とか、特に2016年を入れると、
途端に物凄い成績悪くなります。
なんでー!? 2016年って何か違ったんでしょうか。
っていうか、2017年の方がおかしい?
とにかく、何か違うようです。</p>
<p>patternに当てはまったら通知もしてくれるというので、
試してみます。
まだ本番への適用は怖い感じですが。</p>
<p>9日朝、2回通知来ましたけど、以降はさっぱり当たりませんでした。
デモ取引では、10:05にentryして15:48現在まだ売買成立してません。
ドル円上下15pipsなので、day tradeにはちょっと大きめの幅なんでしょう。</p>
<p>色々試してみると、</p>
<ul>
<li>10〜20はpattern入れて、って書いてありますが、あんまり入れると取引回数少なくなる?</li>
<li>負例も入りますが、負例はいくら入れても学習対象としてcountされません。入れた方がいいのかどうなのか、よくわかりません。</li>
<li>back testでは、どのくらいの精度で当てはめてentryして、どのようにexitするかで当然成績は大きく変わってきますが、「全部お任せ!」にしておいた方が一番成績いいみたい、です。「最適な○○を最適化」とかって具体的には何やってんのかさっぱりですけど、グラフではなく数値で見ると、利食い損切りpipsがわかるので何となく。</li>
<li>売り・買い両方揃えないとダメかしらん。</li>
<li>範囲はどこまで指定したらいいのか、よくわからないですが、何となく学習してるのはindicatorがどうのというより値動き(ローソク足)だけっぽい? いやでも確かにindicatorの種類だけ変えると結果変わるのでindicatorも見てるんでしょうけど...</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[EmbodyMe]]></title><link href="http://u-ryo.github.io//blog/2017/10/08/embodyme/"/><updated>2017-10-08T18:00:53+09:00</updated><id>/blog/2017/10/08/embodyme/</id><content type="html"><![CDATA[<p>Paizaのcasual面接ということで、<a href="https://www.facebook.com/issaymk2">吉田一星さん</a>とお会いしました。流石はYahooのsuper engineerだっただけはあり、凄かったです。麻布出身なんだー。頭いいわけですね。<a href="https://embodyme.com/">EmbodyMe</a>、早速体験させてもらえました。こんなのぼくには作れません。ぼくが本格的なVR初めてだった、というのもあるかもしれませんが、それを差っ引いても凄い、これだけでも十分面白いと思います。1000万くらい投資しようか、真剣に悩んでます。過去の<a href="http://www.appbank.net/2013/02/13/iphone-application/546662.php">怪人百面相</a>や<a href="http://nlab.itmedia.co.jp/nl/articles/1504/08/news077.html">なりきりろいど</a>は、競合が出ているしYahooのなので今はやめてしまっているそう。勿体無いです。っていうか、こういうのや吉田さんをちゃんと育てられなかったYahoo Japan、かなり幻滅しています。
VRとかVisual系には疎い経歴なのに、なんでPaizaで声掛けてきたのかな、というのが最大の疑問でした。聞いてみますと、求人者側からは「研究開発」とかしか見えず、何をしていたのかはよくわからないinterfaceのようでした。要するにPaizaのUIがしょぼくてmismatchを誘発していたんですね。
中国とかの方がVR、もっと溶け込んでいるらしいです。街のSC(Shopping Center)とかにVRがあったりとか。へー。日本って遅れてるんですね。日本ではsmart glassesが流行らないっていうのも、その辺にあるんですかね。
日本の半導体工場で、closed intranetじゃないと云々、とか言ってる時点で日本捨てたら? というのは、なるほどそうですね。そもそも日本の半導体なんて、もうピーク終わってますもんねぇ。
吉田さんに比べれば、ぼくの経歴やら技術力なんてつまんないもんです。
Hadoopもやってたというので、GridとかMPIとかcloud前のこと聞かれました。</p>
]]></content></entry><entry><title type="html"><![CDATA[CEATEC 2017]]></title><link href="http://u-ryo.github.io//blog/2017/10/08/ceatec-2017/"/><updated>2017-10-09T16:05:11+09:00</updated><id>/blog/2017/10/08/ceatec-2017/</id><content type="html"><![CDATA[<p>過日、<a href="http://www.ceatec.com/ja/">CEATEC Japan 2017</a>に行って来ました。
見所は色々<a href="http://www.watch.impress.co.jp/headline/extra/2017/ceatec/">報じられている通り</a>ですが、お前はどうだったの? という観点で勝手な印象を。</p>
<ul>
<li><a href="http://kaden.watch.impress.co.jp/docs/news/1084050.html">卓球ロボット(フォルフェウス)</a>はニュースでも取り上げられてましたね。OMRONなんですねこれ。なんでOMRONこんなことやってるんでしょう。smashは無理なんじゃね? と思ってたら、今回から対応したとのこと。最初にuser登録して、そのuserがsmashしそうになったらそれを検知して対応するんだとか。それは凄いですね。でも、打ち返すのがやっとのようでした。</li>
<li><a href="http://www.originwireless.net/125071254012512.html">OW(Origin Wireless)</a>は人が凄かったです。そりゃそうでしょう。コミュニティ・イノベーション部門でGrand-Prix取ってましたし。でも見せ方うまくないなーと。早くmonetizeすればいいのに。変なとこと組んでるから、イケないんじゃないでしょうか。</li>
<li>豆蔵ブースは、<a href="https://nekomoni.com/">ねこもに</a>はまだ許せます、<a href="https://linkdrive.jp/">LINkDrive</a>は百歩譲るとしても、LINkPitはダメでしょうこんなの売っちゃ。あーぁ。でも何か、GMOとオプストになってますね。SenseThingsJapanなんて出て来てません。LINKDriveだとて、こんなの<a href="https://play.google.com/store/apps/details?id=org.prowl.torque">Torque</a>や<a href="https://play.google.com/store/apps/details?id=org.prowl.torquefree&amp;rdid=org.prowl.torquefree">Torque Lite</a>、<a href="http://www.geocities.jp/ganchi_jp/AppObdInfoSan/">OBD Info-san!</a>がありますし、connectorもあんまり安いの買うと危なそうですが<a href="https://www.amazon.co.jp/gp/search?keywords=iOBD2&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;tag=lady-navi.seesaa.net-22">2000円くらいで売ってます</a>よね。それを6000円で売ろうっていうんですから大したもんです。</li>
<li>リニアモーターの実演をしてました。コイルを液体窒素で冷却すると、浮上して走り回ってました。<a href="http://www.fujikura.co.jp/rd/odyssey/vol_05/05.html">Fujikura</a>って、中央リニアにも参加してる超電導ケーブルの会社なんですね。って藤倉電線ですよね。</li>
<li><a href="http://hlds.co.jp/product/">3D LiDAR</a>、ぼくが見たのは「手の位置探知(棚)」ということで、コンビニの棚なんかを監視して、買った商品はPOSでわかるけど手に取っただけの商品もこれでわかります、というconceptでした。説明員の人に聞いてみますと、まだ実例はないそうですが、工場で手の動きを監視して作業漏れを云々というのも話としてはあるそう。実際、手の骨格検出画像も<a href="http://hlds.co.jp/download/Document/HLDS_TOF_Leaflet_JP.pdf">パンフ</a>に載ってました。けど後でよく見るとこれ、手じゃなくて腕ですね。</li>
<li>あと<a href="http://www.forum8.co.jp/">Forum8</a>の<a href="http://sharefl.jp/projects/airshodou/">エア書道</a>、エアドライブ、そしてトレインシュミレータまで! 誰もいなかったのでやってみましたが、やっぱり止まるの難しいですね。エア書道は、腰より前に腕を持って行って、とか慣れるのが難しいです。Kinect使ってるんだって。へー。<a href="https://www.facebook.com/forum8JP/">Forum8</a>って何かVR凄いんですけど、土木のシミュレータから発展したみたいですね。</li>
<li>低照度でも発電する太陽電池と蓄電モジュールがありました。IoTに良さそうです。が、製品化はされてないそう。出してるのどこだったっけ。材料の方で見た大手だったと思うんですけど。</li>
<li>材料の方で、<a href="http://soran.cc.okayama-u.ac.jp/view?l=ja&amp;u=d2433282ec3fd8d074506e4da22f6611">岡山大学五百旗頭健吾助教</a>の講演で暗号化deviceから漏れる電波を計測してdecode出来る可能性について(=<a href="http://www.soumu.go.jp/main_content/000323204.pdf">暗号機器のサイドチャネル攻撃</a>)のお話は衝撃的でした。そっか、ちゃんと考えないとchipから漏れるんですね。Arduinoでは漏れそう、Rasberry Pieでは(基板上色んな雑音があるので)拾えなかった、と言ってました。</li>
<li>SHARPの8K、よ〜く見ると細かいところが滲んでたのは、多分撮影側が追いついてないせいでしょう。それより応用事例として心臓外科手術の映像流してましたがそちらの方が面白かったです。</li>
<li><a href="http://internet.watch.impress.co.jp/docs/event/1084817.html">NTTのVRバッティングマシーン</a>は並ぶのでパス、<a href="http://k-tai.watch.impress.co.jp/docs/event/ceatec2017/1083982.html">KDDIの5G</a>は、遠隔の人の動きと同じ動きをロボットがするというものですけど、動いていなかったし慶応が同じことやってました。<a href="http://av.watch.impress.co.jp/docs/news/1084017.html">VR不動産案内</a>はあんまり魅力を感じず。富士通では量子コンピュータの話はあんまり見ず、コーヒーとクッキーだけ御馳走になりました。</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Pro-do by Ukkyo-san]]></title><link href="http://u-ryo.github.io//blog/2017/10/06/pro-do-by-ukkyo-san/"/><updated>2017-10-09T17:08:19+09:00</updated><id>/blog/2017/10/06/pro-do-by-ukkyo-san/</id><content type="html"><![CDATA[<p>もう閉鎖されるというのに何を今更ですが、
ひょんなことから<a href="http://ukkyo.sakura.ne.jp/">未経験２７歳プログラマーへの道（イバラ）</a>を見付けて、一気に読んでしまいました。
最初の企業の話は、まさに今のぼくのと符合するところが多く。
でもこの人、人類みな京大なんですね頭いいんだ... というより、数学的で要領がいいんですね(ってご自分でも書いてますね)。
ぼくも社長メール、しようかなぁ。オーナー社長じゃないから、効き目は無さそうなんですが。
よく読むと、「君は来月以降は５５万／月の金額で契約延長になりました」で「ようやく年収２４０万円」なので、ピンはね率64%だからぼくと同じくらいですね。</p>
<h3>なるほど</h3>
<ul>
<li>とくに流行らない店によく見られる特徴として「特定の客（常連など）に過剰なサービスを提供する」これをしているところが非常に多い。...流行っている店はこれをほとんどしない。逆に新規客（初めて来た客）ほど大切にしろと教育するところもある。基本的に全てのお客様にできないサービスはどのお客様にもしない。</li>
<li>だから他人とコミュニケーションを取るときには気をつけなければいけない。
相手の気持ちを汲んで些細なことでも一言謝ってから話を続けたほうが円滑に進むことが多いのだ。</li>
<li>そういうプログラムを深く追求してこなかったSEの大多数は口を揃えてこう言う。<br  />
「大事なのは技術力じゃない。」<br  />
そういう方々にオレは問いたい。<br  />
「あなた達が売ってるのは何なのですか？」</li>
<li>さて、このような環境でプログラマとして仕事をしていると<br  />
学ぶべき人がいない<br  />
のだ。</li>
<li>お客様としゃべって仕事をもらって、それをこちらに放り投げる。
きっちりと仕様も確定していないからこちらは四苦八苦しながら作っている。
するとそこに時々やってきてはできたか、できたかと聞いてくる。
少し偏見が入っているかもしれないが実際こんなSEが多いみたいだ。
要するに作る、という部分にまるで踏み込まない。</li>
<li>オレはトラックで運送業のバイトをしていた知り合いがいた。
そいつから聞いた話だが車が接触事故にあったときなどの対処法がマニュアルとしてあったらしい。
その接触の状況がどのような、たとえ完全に自分が悪いのだとしても<br  />
まず切れろ<br  />
というものらしい。</li>
<li>どこかで聞いた話であるが９０歳代の人たちにアンケートをとった。
人生で一番後悔している事はなんですか、と。
圧倒的に多かったのが<br  />
「失敗を恐れて何もしなかったこと」<br  />
という答えらしい。</li>
<li>伸びていく人というのはこれからあげる３つの力において合計得点が高い人ではないか、と。
勝手に選ばせてもらったその力というのは<br  /></li>
<li>能力（先天的な能力＋努力）<br  /></li>
<li>発明力（物事に対する好奇心＋気付く力）<br  /></li>
<li>人間力（人の心の機微がわかる＋性格）</li>
<li>では森君はどうかというと彼ははここがすばらしい。
心の機微に気付くというだけではない。
今だに(ママ)過去のバイト先の上司との付き合いがあったりするらしい。
その人にお世話になったという気持ちを失わず接し続けているからだろう。
人とのつながりを非常に大切にし、常に回りに気を配る。
それに加えて彼の努力家な一面がいい具合にマッチしている。
何人かの森君に対する評価を聞いたが口を揃えたように、彼は教えてあげたくなる人、と言う。</li>
</ul>
<p>あぁ、ぼく性格悪いなぁ、と反省しきりです。
腰低い方がいいんですよ。わかってますよ。営業のTさんとかマネジャーのIさんとか見てるとそう思いますよ、それだけで生きていけるって。
でも、どうしても何か...
これをpride、下らないprideって言うんですかねぇ。
「アルジャーノン」、粗筋しか知りませんが、
やっぱりバカな方がみんなから愛されて幸せなんじゃないかと。
なのになぜ人は頭いい方を目指すんでしょうか。</p>
<ul>
<li>もう一度徹底的に自覚しなくてはならないこと、それは<br  />
人生は有限である。</li>
<li>「現在所持している石炭を使用し、石油を一番効率よく得られる方法を書け。」<br  />
「石炭を売って石油を買う」</li>
<li>よく情報関連のコラムなどを読むと「技術者は技術だけでは生き残れない」という記事を見る。
これはまさしく事実だと思う。
しかしこれらの記事を逆手にとった怠け者が多数存在する。
自分が勉強するのに疲れたもんだから「オレは技術に走らない。」などと言い訳に使うのだ。</li>
<li>ここまで話し合いをしてきて、オレはとうとう本音を。
今まで恐らく誰にも言わなかった（酔ってしゃべったかもしれないが）事を言った。<br  />
オレはあの社長を喜ばせたくないのだ<br  />
どうしてもそんな気になれない。
...
どうもこの辺のやり方が好きではないのだ。
オレが会社に貢献することで結果としてあの社長が喜ぶだろう。<br  />
だからオレは貢献したくないのだ<br  />
自分の会社やその社長を悪く言うのは自分を悪く言うのと同じだ、と教えられてきた。
...
そこで働いている自分の価値をも低くする行為だ、ということだ。
そして自分は裏表のある人間だということを宣伝しているようなものだと。
だから誰にも言わなかった。
しかし心の中にずっと引っかかっていて、もう我慢できずに漏れ出してしまったのだ。</li>
</ul>
<p>ぼくだけじゃなかったんだ! と思った瞬間です。
「社長」じゃなくて「(出向先の)部長」とか「(今いる)会社」とかですけどぼくの場合。</p>
<p>会社の不満だと、最近あったのは、
10月も人売り契約が続くという連絡が9月中に無かったこと。
なので、売られた先に「お世話になりました」メールを敢えて出してやりました。
まー、CTCクビになった時も連絡無かった(偶然他から連絡があって2営業日後に知った)くらいですから。
働いてるのはこっちだっちゅーのに、人売り営業のこっちへの扱いなんてこんなもんです。</p>
<p>あと、自分で環境をcloud上のserverに移した、前のと同じだ、というのに、
動かない、直してくれ、と。
自分でやったのに、ケツをこっちに持ってくるんかい。
環境のcopyも満足に出来ないのに、運用するっていうんかい。
こういうアホな人達の下で働きたくないんですよ。
...あぁ、キリがなくなってきそう。</p>
<p>「プロ道」(プロどう)って言うんですね。
逆境の大阪編の方が面白かったです。
っていうか、大きな外資系入れて凄いなぁ。
人の縁をあんまり大事にして来なかった報いですかねぼくは。
自業自得ですそういう意味では。
徒手空拳で転職するのは難しいですぼくには。</p>
<ul>
<li>かなり難度の高い仕事Ａがある。
ある程度簡単な仕事Ｂがある。
誰でもできるような仕事Ｃもある。
...一般的に言われるいいリーダーはＣを自分で担当する。
そしてＡやＢの仕事は部下に割り振るのだ。</li>
<li>それはプレーステーションを生み出した久夛良木（クタラギ）氏のことだ。
...前社長いわく<br  />
「彼は自分でやってしまうから。」</li>
<li>人は誉めて動かせ<br  />
...まず、長所を誉める。
...誉めるときは本人のいない場所で誉める。
...例えばどうしてもウマが合わない人と上手に付き合う方法。
これはよく言われることだがまず相手を好きになること。</li>
<li>今日の一言<br  />
でも自分でやりたいのが技術者・・・</li>
</ul>
<p>やっぱりそうですよねー。</p>
<ul>
<li>結婚したらいつ家に友人を呼んでも嫁がもてなしてくれる。
そのような幻想を抱いていたとすれば今すぐ生ゴミに出そう。
女性には巣を守るという本能でもあるのだろうか。
家というのは多くの場合、彼女たちにとっての聖域なのである。
決して気配りを怠ってはいけない場所なのである。
間違えても騒ぎすぎてはいけない。
汚してはいけない。
これらをきっちりと肝に命じて(ママ)おくこと。
我々は客人でもあり、侵略者でもあるのだ。。
...具体的に何をすればいいのか？
...答えは至ってシンプル。<br  />
「甘いもの」だ。</li>
<li>金を残す者は三流<br  />
仕事を残す者は二流<br  />
人を残す者は一流</li>
<li>だから時間でなく仕組みを売らなければならないのだ。
仕組みを売ってその金で時間を買う。
そうやってできた時間で新たな仕組みを作る。
うまくこの循環に入ることができればいいのだが・・・・。
これもまた言うは易しというもの。
できるなら誰もがやってる。</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Vulnerability POC site]]></title><link href="http://u-ryo.github.io//blog/2017/10/05/vulnerability-poc-site/"/><updated>2017-10-05T23:10:34+09:00</updated><id>/blog/2017/10/05/vulnerability-poc-site/</id><content type="html"><![CDATA[<p>各種POCがありました。</p>
<ul>
<li><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">各漏洞poc、Exp的收集或写</a></li>
</ul>
<p>特にStruts2については、↓にあります。</p>
<ul>
<li><p>https://github.com/coffeehb/Some-PoC-oR-ExP/tree/master/Struts2</p>
</li>
<li><p><a href="https://www.mbsd.jp/blog/20170904.html">Apache HTTP Serverのバージョンを当てる方法</a>
bannerは信じちゃダメですよね。ぼくも対策を求められて面倒くさかったのでbinaryを偽装した覚えがあります。</p>
</li>
<li><p><a href="https://www.lac.co.jp/lacwatch/alert/20170906_001382.html">Apache Struts 2における脆弱性 (S2-052、CVE-2017-9805)は悪用可能と確認</a> に、「既に攻撃コードが公開されており、中国のWebサイトでは URL を入力するだけで脆弱性の有無をチェックするサイトも登場しています」とあるのですが当該サイトの画像だけでlinkが無かったので、探してもらいました。↓</p>
</li>
<li><p><a href="https://www.seebug.org/monster/">Seebug Vulnerability Scan Online Tomcat代码执行漏洞(CVE-2017-12615)</a><br  />
ただ、↑を試したところ、loginしてないと試せなくて、sign upするには電話番号とSNS codeまで必要なので、諦めました。</p>
</li>
<li><p><a href="http://mkt-eva.hateblo.jp/entry/2017/09/11/020530">Apache Struts 2の脆弱性(S2-052)や(S2-053)についてのまとめてみた。</a> POCへのlinkがありました。</p>
</li>
</ul>
]]></content></entry></feed>