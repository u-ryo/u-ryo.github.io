<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-09-20T01:19:46+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Images in README.md on Github]]></title><link href="http://u-ryo.github.io//blog/2017/09/20/images-in-readme-md-on-github/"/><updated>2017-09-20T01:19:46+09:00</updated><id>/blog/2017/09/20/images-in-readme-md-on-github/</id><content type="html"><![CDATA[<p><a href="https://github.com/">Github</a>の<code>README.md</code>にscreen shotとか画像を貼りたかったんですけど、どうしたものなんでしょう。説明用のimagesをsource codeと一緒に置いておくというのも何か野暮なので。幾つかやり方があるようです。</p>
<ol>
<li>image用の別branchを切る(e.g. https://github.com/cakecatz/garage)</li>
<li>Githubのissueを利用する(<a href="https://www.youtube.com/watch?v=hHbWF1Bvgf4">GitHub Readme Images Tutorial (screenshots in readmes)</a>)</li>
<li>Githubのwikiを利用する(<a href="https://www.pupha.net/archives/1632/">GitHubに画像ファイルを保存してREADME.mdで表示する方法</a>)</li>
</ol>
<p>issueに画像をDrag and Dropすると、https://user-images.githubusercontent.com/... に自動的にuploadしてURLが得られるなんて知りませんでした。でもこれ、いつまで持っててくれるんでしょう、というのと、消したい時に消せるのかな? というのがあって。やっぱり自分でcontrol持っておきたいでしょう。(<a href="https://qiita.com/kotet/items/a2203a400136ba50b41e">GitHubのissueを悪用して画像をホストする</a>)</p>
<p>別branchを切ると、一旦画像以外全部消さないとならなくて、
何となくそれがちょっと嫌だったので、結局wikiを利用しました。
一度何でもいいのでWikiのpageを保存しないとならないみたいです。
一度保存しちゃえば、上記ページに書いてあるように<code>git clone https://github.com/.../XXX.wiki</code>で取ってこられて、images作って置けちゃうんですね。へー。</p>
]]></content></entry><entry><title type="html"><![CDATA[gitignore]]></title><link href="http://u-ryo.github.io//blog/2017/09/20/gitignore/"/><updated>2017-09-20T00:57:10+09:00</updated><id>/blog/2017/09/20/gitignore/</id><content type="html"><![CDATA[<p>前も書いたような気がしますけど、<code>.gitignore</code>は<a href="https://gitignore.io/">gitignore.io</a>で。ここでgenerateしたものに置き換えてみたんですが、<code>git status</code>はあんまり変わりませんでした。記述量は確かに増えていたので、良くはなっているんでしょう...</p>
]]></content></entry><entry><title type="html"><![CDATA[Personal Information Leak Incident]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/personal-information-leak-incident/"/><updated>2017-09-17T17:12:32+09:00</updated><id>/blog/2017/09/16/personal-information-leak-incident/</id><content type="html"><![CDATA[<p>先日派遣先で、5万数千件にのぼる個人情報漏洩を見付けてしまいました。</p>
<p>その会社ではチンケなECサイトをやってるんですけど、
といっても再販の再販までされてて何百人にも使われちゃってますが、
中身は2000年代前半〜中盤のcode。未だにJSP(一部Java)。
今やもうJavaEEから外れたっていうのに。
OSやlibrary、middlewareもsupport切れで無いものは無いという。
http/https混在、userのpasswordもDBに平文で保存してるくらい、
設計思想からして古いままのものです。WAFも入ってないといいますし。
早晩、こんなことが起こるだろうと傍で見ていて思っていましたが、
現実になり、しかも発見者がぼくだとは。
ぼく一応これ、部外者なんですけど。
同じように派遣されててそっちも手伝っている同僚から、
こんなaccessが沢山来てるってattack patternを見せられて。
不覚にも最初は一般的な定期巡回sql injectionかと思ってました。
Googleで調べると、<a href="https://serverfault.com/questions/541401/mysql-injection-attacks-random-urls-causing-errors">そういうのが載ってた</a>んです。</p>
<p>(<a href="https://github.com/ron190/jsql-injection">jsql-injection</a>
かとも思ったんですが、試してみるとちょっと違うかも。
Havij ProはWindowsだしちょっと怖いので入れてません)</p>
<p>ともあれ、だから単なる下調べ的なattackかと思ってました当初は。
しかし、</p>
<ol>
<li>IP遮断してもIP変えてやって来るくらいしつこい(IP元はHK,US,JP,CN,UK等々)</li>
<li>しかも同じようだが微妙に違うrequestを大量にする</li>
</ol>
<p>というところからすぐにピンとくるべきでした。
翌週になって、そういえば見せられたqueryに
このサイト固有の名前が入っていたな、
というところから、ちょっと実際に叩いてみたんですね。
そしたら...</p>
<p>あらま。</p>
<p>確かによく見たらqueryの中に「MAIL、PASSWD、TEL」の文字が。
見事に抜かれてました。
各queryの違いは、<code>lImIt</code>の数。
これを変えて、順々に取って行ってたんですね。
後でわかったことですが、固有名が無くても<code>information_schema</code>から
table名1個ずつ抜けるんですね。</p>
<p>attackがあったのが木曜、ぼくが気付いたのが翌週月曜、
log解析依頼されて、調べてみるとMAIL AddressとかPASSWDが5万数千件は
抜かれてました。
その他、抜かれてたのはショップ運営者の方のID、MAIL、PASSWDも。
それは6月19日に起きてました。
今までずっと気付いてなかったという。
再販先と連絡取って、すぐサイト全体落としたんですけど、
全体をこれまでのオンプレミスサーバ群からクラウドに移行したということで、
また再開したそうです(WAFは入れると言ってはいましたが)
(しかも移行したといってもミスがあるらしくすぐにはうまく行っていないとかで、
自分でやっといて直せないなんてアホの極みだと。
その不具合修正をぼくに求めてくるという。
確かにぼくはJava expertなので、
なんで見当違いのところで騒いでるのかくらいの指摘はしてあげましたけど、
自分の尻くらい自分で拭ったらどうですか?と)。</p>
<p>色々信じられません。</p>
<p>元々彼らの思考には付いていけてなくて。
今自分がやらされているprojectの方でも、
serverのlogic追ってったら「これ認証無いですよ」
って言っても改善せずそのまま、
他人の電話番号とか情報を抜けるPOC作って示しても、
「そのPOC書くのにどのくらい時間かけた?」とか聞いてくる始末。
もう匙投げてました。
っていうか、こんな人もいるんだ、と勉強になりました。
更に言えば、日本のsecurity意識って一般的にはこんなもんなんでしょうか。</p>
<p>本当は、この実態を再販先等に告発した方が社会正義のためだと
思うんですけれども、
西宮冷蔵社長の例を鑑みても告発者が報われない社会なのは明らかなので、
黙っているしか無いのかと悲しい思いをしています。</p>
<p>早くこんなとこから抜け出さないと、イケマセン。</p>
]]></content></entry><entry><title type="html"><![CDATA[Getting Prize S Level Programmer at Paiza]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/getting-prize-s-level-programmer-at-paiza/"/><updated>2017-09-17T17:26:07+09:00</updated><id>/blog/2017/09/16/getting-prize-s-level-programmer-at-paiza/</id><content type="html"><![CDATA[<p>先日、<a href="https://paiza.jp/challenges">Paizaのスキルチェック</a>で
<a href="https://paiza.jp/challenges/share/0njRogbXZnuXG_Dt_noi_u1lW1Bl4R262Je2koUAjNA?source=social">時間切れ0点</a>を取ってしまったので、
癪だからランクS、本気で取りに行きました。
<a href="https://paiza.jp/challenges/share/BpVEE0xUqzek-gFkhWaalVEwoIv7rpTSXnDL6cOC4eo?source=social">ひとりすごろく</a>は第一次制限時間の40分を超えてしまったので、
全ケース通ったんですけど95点でSではなくA判定。
やっぱり時間が大事なんですね。
Javaで「早く」書くのは確かにキツイです。
ので、次は50点の制限時間が2時間の<a href="https://paiza.jp/challenges/share/Ku6dnsSr8gw5zINY0ItXIQ1UXOOdmh6Xl_0akPz7zwo?source=social">ビリヤードの玉突き</a>に挑戦しました。
こちらは、問題中にヒントを書いていてくれていることもあり、
60分で解答を提出、ようやっとSランクをゲットできました。
今までAランクでいっか、とか思ってて、S問題はゆっくりやって、
再チャレンジでcodeをbrush upして100点を取ってたんですけど、
それより時間が大事、なんですかね。
いや、実務では分を争う程、そこまでsevereではないので...
それに、paizaでいくら頑張っても、
小さいとこばっかりであんまり行きたい先が無いので、虚しいんです。</p>
]]></content></entry><entry><title type="html"><![CDATA[Challenging Paiza TSP]]></title><link href="http://u-ryo.github.io//blog/2017/09/13/challenging-paiza-tsp/"/><updated>2017-09-17T17:27:16+09:00</updated><id>/blog/2017/09/13/challenging-paiza-tsp/</id><content type="html"><![CDATA[<p>8/13はPaizaの日、ということで、巡回セールスマン問題を出題していました。
<a href="https://paiza.jp/works/algorithm/primer/algorithm3">Paizaラーニングでも巡回セールスマン問題のさわり(貪欲法)を取り上げていて</a>、
2-OptやSimulatedAnnealing(焼きなまし法)を<a href="https://github.com/eugenp/tutorials/blob/3abb98e9e8acc7efe3f9f8423fcf0f8934655be7/algorithms/src/main/java/com/baeldung/algorithms/ga/annealing/SimulatedAnnealing.java">学んで</a>、
いざ書いてみたんですが、なかなかうまく行きません。
テストデータは<a href="http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/tsp/">有名ドコロ</a>があります。
まずはatt48で2-Optでやってみたものの、
交差線が多く、全然それっぽい経路が得られません。
なんでーーー!?
<a href="http://ist.ksc.kwansei.ac.jp/~tutimura/GraphApplication/">Javaによるまんまのコード</a>があったので、
読み解いていったんですけど時間かかっちゃって、
結局Paizaの締切9/12に間に合いませんでした...
何たること。</p>
<p>どうも、キモはswapにあるようで、
点を交換すると総延長が短くなる場合、
当然点を交換するんですが、
当該点だけを交換するだけじゃなく、
そこから真ん中へ向かってずっと点を交換していくんですね。
そうかー。</p>
<p>悔しいから、久し振りにPaizaのS問題やってみました。
最も簡単そうな最小辞書順列にしてみました。
けれど、問題の意味を理解するのと、JavaのStreamで書ききったために、
制限の2時間、あっという間に過ぎてしまいました。<a href="https://paiza.jp/challenges/share/0njRogbXZnuXG_Dt_noi_u1lW1Bl4R262Je2koUAjNA?source=social">0点確定</a>です。トホホ。
しかも、提出したコードは、2つの場合だけ通らずに、80点。
どうしてコケる時があるのか、思い当たるフシもなく、未だにわかっていません。
テストデータ、見せて欲しいです。</p>
]]></content></entry><entry><title type="html"><![CDATA[hostapd after that...]]></title><link href="http://u-ryo.github.io//blog/2017/09/06/hostapd-after-that/"/><updated>2017-09-06T22:22:29+09:00</updated><id>/blog/2017/09/06/hostapd-after-that/</id><content type="html"><![CDATA[<p>何か、不安定ですhostapd。
昨夜は、何故か出勤後の9:58に勝手に謎のrebootしてたし、
今日も帰宅後、NotePCがWiFiで繋がらないから試行錯誤すると、
一旦USB WiFiドングル抜き差ししてhostapdをstop/startしたら、漸く。
でも、1秒毎にreconnectしたりして、もう何だか。
やっぱり、何かWiFi station買ってこないとダメなのかなー。</p>
]]></content></entry><entry><title type="html"><![CDATA[Grain on CodeAnywhere]]></title><link href="http://u-ryo.github.io//blog/2017/09/06/grain-on-codeanywhere/"/><updated>2017-09-06T22:03:32+09:00</updated><id>/blog/2017/09/06/grain-on-codeanywhere/</id><content type="html"><![CDATA[<p>ちょっと、やっぱりダメですね。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>java.lang.RuntimeException: While executing class com.sysgears.grain.registry.Registry.compile
</span><span class='line'>        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
</span><span class='line'>        :
</span><span class='line'>        :
</span><span class='line'>Caused by: java.net.SocketTimeoutException: Accept timed out
</span><span class='line'>        at java.net.PlainSocketImpl.socketAccept(Native Method)
</span></code></pre></td></tr></table></div></figure>
<p>といわれて、<code>./grainw generate</code>も<code>./grainw gendeploy</code>も出来ません。
あーあ、なぁんだ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Current Project I'm working in]]></title><link href="http://u-ryo.github.io//blog/2017/09/06/current-project-i-m-working-in/"/><updated>2017-09-06T22:03:07+09:00</updated><id>/blog/2017/09/06/current-project-i-m-working-in/</id><content type="html"><![CDATA[<p>今、グループ内会社のAndroidアプリ開発に売られてるんですけど、そこのソフトの作りがひどくてひどくて泣けてきます。</p>
<ol>
<li>「結果が表示されなくなった」というので見てみたら、<code>toString()</code>が変わっていたのが原因。より根本的な原因は、<code>toString()</code>というdebug用途のmethodをoverrideしてmainのlogicに使っていること。まぁ、Activity跨ぐstructured dataを<code>Parcelable</code>にする時間が無かった、という事情は分かるんですけど、<code>StringBuilder#toString</code>ですら使わず<code>new String(StringBuilder)</code>とするくらいなのでぼくは。</li>
<li>「途中で落ちる」というので見てみると、ヌルポが出てました。どうしてかなー、と見ていくと、途中でnullを代入しているmethodが呼ばれています。どうしてこれを呼ぶよう変えたのか聞いてみると、終了処理をちゃんとするようしてる時に、comment outしてあったこのfinishっぽいmethodをcomment inしたんだそう。それがどういう効果を持つのかわからぬまま、そうしたんだって。えーーーっ!?</li>
<li>極めつけは、今日わかったんですが、<code>HashMap</code>を<code>List</code>にしてその0番目を使ってるんですね。えーーーっ! どうしてAndroid 4.4.2ではうまく動かないの? というのを探っていったら、そこに行き着きました。逆に、これまでよく動いていましたねぇ。素晴らしい!! 先月までいた派遣のフリー技術者が書いたcodeの一部でしたけど、わざと書いたならいざ知らず、もし意識せず書いたのなら、恐ろしいです。</li>
</ol>
]]></content></entry><entry><title type="html"><![CDATA[Illegal keysize]]></title><link href="http://u-ryo.github.io//blog/2017/09/04/illegal-keysize/"/><updated>2017-09-04T02:32:48+09:00</updated><id>/blog/2017/09/04/illegal-keysize/</id><content type="html"><![CDATA[<p>Androidで<a href="https://github.com/NanoHttpd/nanohttpd">NanoHTTPD</a>を
動かすprogramを開発しているんですが、
WebRTCにするのに、TLSが必要じゃないですか。
そのserver certを普通に作ると、<code>Illegal keysize</code>と言われて
key load時に落ちるのでハマりました。
<a href="https://github.com/NanoHttpd/nanohttpd#generating-an-self-signed-ssl-certificate">NanoHTTPDの解説</a>にあるように、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 360 -keysize 2048 -ext SAN=DNS:localhost,IP:127.0.0.1  -validity 9999
</span></code></pre></td></tr></table></div></figure>
<p>と作ってもダメでした。
色々調べると、AndroidにはBouncyCastle(BKS)でないとならないらしく、
証明書は面倒なのでsnakeoilを流用して、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo openssl pkcs12 -export -in /etc/ssl/certs/ssl-cert-snakeoil.pem -inkey /etc/ssl/private/ssl-cert-snakeoil.key -out ~/AndroidStudioProjects/SharedEye/ssl-cert-snakeoil.p12 -name ssl-cert-snakeoil
</span><span class='line'>$ /usr/lib/jvm/java-8-oracle/bin/keytool -importkeystore -deststorepass password -destkeypass password -destkeystore snakeoil.jks -srckeystore ssl-cert-snakeoil.p12 -srcstoretype PKCS12 -srcstorepass password -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk15-1.46.jar
</span></code></pre></td></tr></table></div></figure>
<p>とすると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Problem importing entry for alias java.security.KeyStoreException: java.io.IOException: Error initialising store of key store: java.security.InvalidKeyException: Illegal key size.
</span></code></pre></td></tr></table></div></figure>
<p>と言われてimport出来ませんでした(→jksが作れませんでした)。
かなり悩んだのですが、結局<a href="http://qiita.com/mizuki_takahashi/items/cc26a7fd51aa04396e92">JavaでAES256を使用できるようにする</a>にあるように、
JCE(Java Cryptography Extension)を落としてきて
<code>local_policy.jar</code>を上書きしたら、
jksも出来て、Android側でも何事もなくloadしてくれました。</p>
]]></content></entry><entry><title type="html"><![CDATA[revive hostapd]]></title><link href="http://u-ryo.github.io//blog/2017/09/03/revive-hostapd/"/><updated>2017-09-04T02:35:32+09:00</updated><id>/blog/2017/09/03/revive-hostapd/</id><content type="html"><![CDATA[<p>家のオンプレミスサーバが最近五月蝿く、
何か常に3.4GHz近くまでいっていて電気食ってるようなので、
1年弱ぶりに止めてみました。
すると、次、立ち上げた時、
繋げていたPlanexの11/n/g/b Real Portable Wi-Fi Router
<a href="www.planex.co.jp/product/router/mzk-rp150n/point.shtml">MZK-RP150N</a>
が死にました。
通電はしているようなのですが、
Wi-Fiは繋がらず(ランプも消灯)、resetかけようとマニュアル探して、
その通りにボタン10秒以上長押ししてもPowerランプがつかず。
USB刺してすぐはPowerランプとWirelessランプが暫時点灯するので、
ランプの故障ではない模様。
また、ケーブルがInternet側でもLAN側でも、設定したIP、
defaultのIP、どんなIPでも繋がらず(ping不通)。
ノートPCと直接LANで繋いでpacket captureしても、
packetは漏れてこず。
どうしようもないので、家庭内LANから取り外しました。
けどWi-Fiがないのは不便すぎます。
そこで、余っていたUSB WiFiドングルをオンプレミスサーバに挿し、
実に久し振りにhostapdにしてみました。
21世紀初頭、hostapdで頑張っていたんですが、
設定が面倒臭かったから、MZK-RP150N買ってきたのに、
今はhostapd、凄い簡単になったんですね。
かつてはhostapdが出来るchipから気にしなきゃいけなかったのに、
今やその辺のドングル刺しても大丈夫なんですか。隔世の感。
こういうのは時に応じて調べなきゃならないと思うので、
ここで設定の覚書を書いといても無駄な気がしますけど、一応。</p>
<ul>
<li><code>apt install hostapd</code></li>
<li><code>/etc/hostapd/hostapd.conf</code>を編集</li>
<li>bridgeは必要(ウチの場合)→<code>/etc/network/interfaces</code>に<code>br0</code>の設定要</li>
</ul>
<h1>hostapd.conf</h1>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>interface=wlan0
</span><span class='line'># automatically register wlan0 to br0
</span><span class='line'>bridge=br0
</span><span class='line'># Wireless LAN adapter driver(fixed value)
</span><span class='line'>driver=nl80211
</span><span class='line'># SSID name
</span><span class='line'>ssid=...
</span><span class='line'># 802.11g/a/...
</span><span class='line'>hw_mode=g
</span><span class='line'># Enable 802.11n
</span><span class='line'>ieee80211n=1
</span><span class='line'># channel=60 when 802.11a
</span><span class='line'>channel=7
</span><span class='line'>wpa=2 # WPA2
</span><span class='line'># passphrase for WPA2
</span><span class='line'>wpa_passphrase=...
</span><span class='line'># stealth
</span><span class='line'>ignore_broadcast_ssid=1
</span><span class='line'># Mac Address ACL
</span><span class='line'>macaddr_acl=1
</span><span class='line'># file for Mac Address ACL (permission should be 600)
</span><span class='line'>accept_mac_file=/etc/hostapd/hostapd.accept
</span><span class='line'>wpa_key_mgmt=WPA-PSK
</span><span class='line'>rsn_pairwise=CCMP
</span></code></pre></td></tr></table></div></figure>
<p>あと前やったのに書き方忘れてたのが、
<code>/etc/network/interfaces</code>の<code>br0</code>設定。</p>
<h1>interfaces</h1>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>iface br0 inet static
</span><span class='line'>	bridge_ports eth1
</span><span class='line'>	bridge_stp off
</span><span class='line'>	bridge_maxwait 0
</span><span class='line'>	address 192.168.X.X
</span><span class='line'>	netmask 255.255.255.0
</span></code></pre></td></tr></table></div></figure>
<p>iptalesの設定も変更忘れないように。</p>
<p>Planex MZK-RP150NではMac Address制限が出来なかったので、
ちょっぴり安心に。</p>
<p>ですが、<code>hostapd.accept</code>書き換えても
<code>sudo service hostapd restart</code>しないと反映されず、
restartすると<code>br0</code>消えるっぽいので、注意です。
<code>hostapd stop</code>して<code>ifup br0</code>、
<code>hostapd start</code>するのが正しい手順でしょうか。
その間ノートPCからは接続切れるので、これも気を付けませんと。</p>
<p>それと、
<a href="http://qiita.com/KuwabataK/items/5903c7584657151d576a">コマンド一発でLinuxマシンを即席無線LANルーターにできる「create_ap」がすごい便利だった</a>は、
別件で使ってみましたが、ホントにすぐにhostapからbridge、
dhcpまで出来て感動モノでした。
今読んで、<code>haveged</code>というのを初めて知りました。
オンプレミスサーバにはentropyが足りなかったので入れてみて、
確かにentropyは上がりましたが、
Wireless LANがホントに早くなるのかどうか...
(確かに遅い感じはしてました)。</p>
]]></content></entry><entry><title type="html"><![CDATA[information products]]></title><link href="http://u-ryo.github.io//blog/2017/08/30/information-products/"/><updated>2017-08-30T23:20:41+09:00</updated><id>/blog/2017/08/30/information-products/</id><content type="html"><![CDATA[<p>転職活動用の書類をなかなか書けなくて、
現実逃避にFXとか調べてるうちに、
情報商材に行き着きました。
真面目によさ気なのは、</p>
<ul>
<li>FXだと<a href="www.w-crew.com/fxvictory/">佐野裕氏『ビクトリーメソッドアドバンス(VMA)』</a></li>
<li>株だと<a href="http://best-pln.com/">投資顧問ベストプランナー</a></li>
</ul>
<p>の評価が高いです。
やっぱ、こういうのやらないとダメなのかなー。</p>
]]></content></entry><entry><title type="html"><![CDATA[learning ruby and python3]]></title><link href="http://u-ryo.github.io//blog/2017/08/29/learning-ruby-and-python3/"/><updated>2017-08-30T07:06:14+09:00</updated><id>/blog/2017/08/29/learning-ruby-and-python3/</id><content type="html"><![CDATA[<p>paiza learningの<a href="https://paiza.jp/works/ruby/primerfemale">Ruby入門編</a>のコース、一部が期間限定無料だったので、やってみました。
女の子の声、何かいいですね。
内容は「入門編」だけにifやloopやarray等ホントに基本的なことで、ぼくには易しすぎですけど、演習問題で学習内容を確認出来るのがいい感じです。ただ、まだ有料部分もあり、そういう所は動画が見られないのは当然としても、演習問題も出来ないとは。
物足りないので、<a href="https://paiza.jp/works/python3/primer">python3の入門編</a>もやっちゃいました。こちらは全編無料ですし。でも、やっぱりホント基本的なことですね。あと、rubyとpython、同時にやるもんじゃないです。<code>puts</code>とか<code>print</code>は勿論、<code>gets</code>と<code>input()</code>、<code>elsif</code>と<code>elif</code>等、色々ごっちゃになっちゃいます。rubyの方が後発のいいとこ取りなだけに、配列範囲外アクセスでもエラーにしない等洗練されてる印象。ただ、<code>puts</code>や<code>gets</code>は英語がヘン、というか独特な気が。日本人だから? 紹介されてたrubyのfor loop(<code>each do |x| ... end</code>)は、<code>do</code>と書かないで<code>each{|x|...}</code>と書けばJava8のStreamingと同じなんですね。<code>each</code>って<code>map</code>とかと同じ。なるほど、最初からそうなってるんだ、と納得です。</p>
]]></content></entry><entry><title type="html"><![CDATA[a-q-f points by games]]></title><link href="http://u-ryo.github.io//blog/2017/08/29/a-q-f-points-by-games/"/><updated>2017-08-29T07:54:08+09:00</updated><id>/blog/2017/08/29/a-q-f-points-by-games/</id><content type="html"><![CDATA[<p>最近、永久不滅ポイント稼ぎのために<a href="https://www.a-q-f.com/saison/gaingame/">ゲームサイト</a>でゲームやってました。
アンケートはウザそうだったので。
でも、よくよく冷静になって計算してみると、アクションポイント20稼ぐのに小一時間、それで0.2永久不滅ポイント、Amazonで1円です。
時給1円かぁ。もっと時間を有効に使わないと、と思い直して、止めました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Gomix: JavaScript(Node.js) Editor and Server]]></title><link href="http://u-ryo.github.io//blog/2017/08/28/gomix-javascript-node-js-editor-and-server/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/28/gomix-javascript-node-js-editor-and-server/</id><content type="html"><![CDATA[<p>paizaの記事<a href="http://paiza.hatenablog.com/entry/2017/03/13/JavaScript開発はこれ1つでOK！超お手軽にWebアプリを作れる">JavaScript開発はこれ1つでOK！超お手軽にWebアプリを作れる</a>で紹介されてたのですが、<a href="https://glitch.com/edit/">Gomix</a>、とてもいいですね。取り敢えず記事にあったcodeを写経してみました。これでREST serverタダで作れますかね??</p>
]]></content></entry><entry><title type="html"><![CDATA[Easy AI APIs]]></title><link href="http://u-ryo.github.io//blog/2017/08/23/easy-ai-apis/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/23/easy-ai-apis/</id><content type="html"><![CDATA[<p><a href="http://programming-study.com/trouble/ai5/">誰でも簡単に人工知能を使えるサービスがヤバすぎる！</a></p>
<p>この辺の技術は、変化が激しいのでその時々で十分に調査する必要がありますね。
それにしても、随分簡単に使えそうになっていますね。
自分でやってみないと、何とも言えませんが...</p>
]]></content></entry><entry><title type="html"><![CDATA[glassfish small tips]]></title><link href="http://u-ryo.github.io//blog/2017/08/22/glassfish-small-tips/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/22/glassfish-small-tips/</id><content type="html"><![CDATA[<p>ちょっとハマったところを。</p>
<ul>
<li><code>WEB-INF/glassfish-web.xml</code>の<code>context-root</code>の最後が<code>/</code>だと、
ログイン後、トップページに(<code>http://...//</code>という形で)飛ばされる</li>
<li>Glassfish管理GUIにおいて、<code>glassfish-web.xml</code>の<code>context-root</code>と違うcontext名でdeployした場合、
CUIでrestart(=disable/enable)すると、
<code>glassfish-web.xml</code>の<code>context-root</code>のcontext名になってしまい、
当該web applicationにaccess出来ないように見えてしまう</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[codeanywhere]]></title><link href="http://u-ryo.github.io//blog/2017/08/22/codeanywhere/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/22/codeanywhere/</id><content type="html"><![CDATA[<h2>ちょっとした注意点</h2>
<ul>
<li>Javaは入ってないので自分で入れる。<code>apt-cache</code>で見ると普通に<code>apt install</code>で入れられるのはJava7までっぽいが7で十分みたい。</li>
<li>previewは、<code>./grainw</code>でcompile後、<code>http://...URL...:4000</code>で行けますね。→うーん、失敗する時の方が多いかも。</li>
<li><code>timezone</code>の変更をしておかないと。何故か<code>dpkg-reconfigure</code>が無いので、<code>sudo ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime</code>で。</li>
<li><code>./grainw create-post '...'</code>の後、directory treeで<code>blog</code>を右click後Refreshしないと新しいfileが出て来ない。</li>
<li><code>screen</code>は<code>apt install</code>すればおk。</li>
<li>ssh accessも、<code>id_rsa.pub</code>を<code>authorized_keys</code>に登録後、<code>ssh -p 21808 cabox@host9.codeanyhost.com</code>でおk。</li>
<li><code>./grainw gendeploy</code>は、<code>~/.ssh/id_rsa.pub</code>をgithubに登録しておかないと失敗する。</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[keep ssh connection]]></title><link href="http://u-ryo.github.io//blog/2017/08/22/keep-ssh-connection/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/22/keep-ssh-connection/</id><content type="html"><![CDATA[<p>sshがよく切れるサイトが多いのですが、基本的には諦めてました。
でも、こうすればよかったんですね。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ssh -L 8888:localhost:8080 -o &#39;TCPKeepAlive yes&#39; -o &#39;ServerAliveInterval 10&#39; r.umetsu@219.101.192.235
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[non buffered grep]]></title><link href="http://u-ryo.github.io//blog/2017/08/22/non-buffered-grep/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/22/non-buffered-grep/</id><content type="html"><![CDATA[<p>grepをpipeで繋いでlogcatをscreeningした時、
なかなかlogが出て来なかったので、
もしやと思って調べたら、bufferingしてるようでした。
それを避けて、出て来たらすぐgrepして出すようにするには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>~/Android/Sdk/platform-tools/adb logcat -v time|grep --line-buffered -e send_code1 -e doOnNext -e &#39;D/After   ([ 1-9][0-9]*): [0-9]&#39;|tee remote_diagnosis.log
</span></code></pre></td></tr></table></div></figure>
<p>のように<code>--line-buffered</code>が必要でした。</p>
]]></content></entry><entry><title type="html"><![CDATA[changing koding to codeanywhere]]></title><link href="http://u-ryo.github.io//blog/2017/08/21/changing-koding-to-codeanywhere/"/><updated>2017-08-28T21:21:17+09:00</updated><id>/blog/2017/08/21/changing-koding-to-codeanywhere/</id><content type="html"><![CDATA[<p>2016年10月に<a href="https://koding.com">Koding</a>の無料提供が終わってしまったので、
以後blogを書くのをサボってしまっていたんですが、
再開します。
どこで再開したらいいか迷っていましたけれども、
<a href="https://blog.htmlhifive.com/2016/06/20/web-ide-six-elections/">インストール不要で使えるWeb IDE×6選</a>を見て、
<a href="https://codeanywhere.com/">Codeanywhere · Cross Platform Cloud IDE</a>にしました。
Javaが入ってないので自分で入れなきゃならないことや、
ssh command lineで^Rとか使えないのでちょっと不便ですが仕方ないです。
ここでcompile出来るだけで御の字でしょう。</p>
]]></content></entry></feed>