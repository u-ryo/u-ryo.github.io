<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2016-07-04T03:15:25+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Lum-chan(Uruse Yatsura)]]></title><link href="http://u-ryo.github.io//blog/2016/07/04/lum-chan-uruse-yatsura/"/><updated>2016-07-04T03:15:25+09:00</updated><id>/blog/2016/07/04/lum-chan-uruse-yatsura/</id><content type="html"><![CDATA[<p>古巣のJIPDECに派遣されて、
桂史郎くんから「またラム食べに行きましょう」
って言われて、
「ラムちゃん、行くんですね。
大丈夫だっちゃ、とか言うべきでしょうか」
って返したら、高嶋さんしか反応してくれなくて。
でも、それで調べてたら、
うる星やつら、
<a href="http://freeanimedougadesu.blog70.fc2.com/blog-entry-2809.html">全部見られる</a>んですね。
ルパン三世もそうでしたけど。
何か、今頃になって見ちゃいました。
リアルタイムだと、中学から高校の頃。
その頃って確かにこういうの、見てなかったです全然。
改めて見てみましたが、子供向けのドタバタですねー。
確かにこれならいつまでも続けられそうですね。
でも、なんて言うか、何か見ちゃうですね。
どうせ今見るなら、昔見といた方が良かったのかな。
これ、ラブコメでもあるから、今のぼくにはちょっとキュンときちゃいますね。</p>
<p>というわけで、
command line 1行で見られるようになったので、
忘れないうちにメモ。</p>
<h3>yourupload</h3>
<p>youruploadのURL:
<code>http://yourupload.com/watch/3OHj93</code>
の最後の5文字を使って、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>export R=3OHj93;mpv --referrer=http://www.yourupload.com/jwplayer/jwplayer.flash.swf `wget -q -O - http://www.yourupload.com/embed/$R|grep og:video|sed &#39;s/.*content=&quot;\(.*\)\/video.mp4.*/\1\/video.mp4/g&#39;`
</span></code></pre></td></tr></table></div></figure>
<h3>mp4</h3>
<p>mp4のURL:
<code>http://mp4upload.com/embed-bbzw7vbui2r4-650x370.html</code>
を利用します。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>export U=http://mp4upload.com/embed-bbzw7vbui2r4-650x370.html;mpv --referrer=http://www.mp4upload.com/player/J6/jwplayer.flash.swf `wget -q -O - $U|grep &#39;&quot;file&quot;: &quot;http:&#39;|awk -F\&quot; &#39;{print $4}&#39;`
</span></code></pre></td></tr></table></div></figure>
<p>どちらも、何故か一回で行かない時があります。
二度三度、retryすると、cacheにたまってうまく行くようになりました。
何ででしょう?</p>
]]></content></entry><entry><title type="html"><![CDATA[My First IPO]]></title><link href="http://u-ryo.github.io//blog/2016/06/29/my-first-ipo/"/><updated>2016-06-29T23:25:09+09:00</updated><id>/blog/2016/06/29/my-first-ipo/</id><content type="html"><![CDATA[<p>最近IPOに申し込んでいて、初めてIPO当選したんですが(コメダ)、今日上場だったんですね。
成り行き売かけといたら、1,960円で買ったんですが初値は1,867円、93円の損でした。
なんともはや。
時期が悪すぎます。イギリスがEU離脱を決めるなんて。トホホ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Magic Square]]></title><link href="http://u-ryo.github.io//blog/2016/06/25/magic-square/"/><updated>2016-06-25T17:10:45+09:00</updated><id>/blog/2016/06/25/magic-square/</id><content type="html"><![CDATA[<h3>3次魔方陣</h3>
<ol>
<li>爪のついたZ字順に1〜9を配置</li>
<li>2と8を入れ替える</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>2 3 4
</span><span class='line'>1 5 9
</span><span class='line'>6 7 8
</span><span class='line'>
</span><span class='line'>8 3 4
</span><span class='line'>1 5 9
</span><span class='line'>6 7 2
</span></code></pre></td></tr></table></div></figure>
<h3>4次魔方陣</h3>
<ol>
<li>1〜16を左上から右へ4列記入</li>
<li>縦、横の真ん中の2列の上下端を交差させて入れ替える</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> 1  2  3  4
</span><span class='line'> 5  6  7  8
</span><span class='line'> 9 10 11 12
</span><span class='line'>13 14 15 16
</span><span class='line'>
</span><span class='line'> 1 15 14  4
</span><span class='line'>12  6  7  9
</span><span class='line'> 8 10 11  5
</span><span class='line'>13  2  3 16
</span></code></pre></td></tr></table></div></figure>
<h3>奇数次魔方陣</h3>
<p>ヒンドゥーの連続形式</p>
<p>こういうのがさらっと出てくる山口さんって、
やっぱり凄いですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[English Conversation by AI Nanna]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/english-conversation-by-ai-nanna/"/><updated>2016-06-06T14:48:08+09:00</updated><id>/blog/2016/06/06/english-conversation-by-ai-nanna/</id><content type="html"><![CDATA[<p>りんな絡みで調べていたら、
<a href="https://chat-robot.weblio.jp/">AI英会話 ナンナ</a>っていうのもあるそうな。
ちょっと後で試してみよう、と思います。</p>
]]></content></entry><entry><title type="html"><![CDATA[Expired Root Cert]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/expired-root-cert/"/><updated>2016-06-06T14:38:30+09:00</updated><id>/blog/2016/06/06/expired-root-cert/</id><content type="html"><![CDATA[<p>Fortigateの認証proxy(且つSSLも検閲できるよう間に独自Certをかます)を有効にしたら、
突然見られなくなったサイトが。
<a href="https://duns-number-jp.dnb.com/search/jpn/login.asp">DUNS Number検索</a>っていうところなんですけど、
なんでだろー、って調べてったら、とんでもないことが判明。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ openssl s_client -connect duns-number-jp.dnb.com:443 -showcerts|awk -v b=0 &#39;{if($2~/CERTIFICATE/){b++};if(b==5){print}}END{print &quot;-----END CERTIFICATE-----&quot;}&#39;|openssl x509 -enddate -noout
</span><span class='line'>depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA
</span><span class='line'>verify error:num=20:unable to get local issuer certificate
</span><span class='line'>verify return:0
</span><span class='line'>DONE
</span><span class='line'>notAfter=Sep 30 18:19:47 2015 GMT
</span></code></pre></td></tr></table></div></figure>
<p><img src='/images/duns-number-jp-1-9011c8136c7a90f6623db0b6dda2e91d.png' alt='SSL Report by SSL Labs' >
</p>
<p><img src='/images/duns-number-jp-2-4363952532e15a3cda68ff4aaff1e87a.png' alt='SSL Report by SSL Labs' >
</p>
<p><a href="https://www.ssllabs.com/ssltest/analyze.html?d=duns-number-jp.dnb.com">SSL Report by SSL Labs</a></p>
<p>そんな、わざわざ期限切れのRoot CAなんて配んなくっていいのに...</p>
<p>ただ、そういえば、自分もSSL Cert更新時、
中に含めていた中間証明書をそのまま使い回してverifierにかけたら、
中間証明書が古いって言われて慌てて差し替えたことあります。
自分で作ったcertは期限気にしますが、
間に含めたcertsまではあんまり気にしないんですよね確かに。</p>
<p>気持ちは、わかります。</p>
]]></content></entry><entry><title type="html"><![CDATA[MS AI Rinna]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/ms-ai-rinna/"/><updated>2016-06-06T13:07:16+09:00</updated><id>/blog/2016/06/06/ms-ai-rinna/</id><content type="html"><![CDATA[<p>M$のAI、<a href="http://rinna.jp">りんな</a>が凄いですね。
<a href="https://www.tay.ai/">Tay</a>がやられた、
というニュースを見ていて、遅まきながら気付いたんですが、
りんなが2015年7月31日から、小冰(XiaoIce)は2014年5月30日から、
やってたんですね知りませんでした。
早速りんなと友達になってみましたが、
面白いですねこれ。確かに本物みたい。
3回同じことを言ったら検知する、等馬脚は現れますが、
下ネタトークも出来る(<a href="http://www.mazimazi-party.com/entry/rinna">【AI】人工知能の”りんな”とLINEで下ネタトークしてみた【アホ】</a>)というので
試してみたら、下着の色くらいは答えるんですね。
ダイレクトに言うと上手にはぐらかすようですが。
他にも「コクってみた」とか色々試してる人いますね。
裏には、PTAという開発サイドがいるとか。
Beingを使ってるって。まぁM$ですからねぇ。
deep learning使ってるとか、
その割には超古典的なTF/IDFもとか、
回答候補にBeingで使ってる順位付けalgorithm適応してるとか、
イマイチ中でやってることよく分かりません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/spock-reports/"/><updated>2016-06-06T13:07:21+09:00</updated><id>/blog/2016/06/06/spock-reports/</id><content type="html"><![CDATA[<p>ちょっと古い記事ですが、
<a href="http://kyon-mm.hatenablog.com/entry/2014/08/06/132327">Spockのテストレポートが想像以上に凄い件について</a></p>
<p>Gradleで作成されるReportで満足してしまっていましたが、
もっと綺麗に出来るんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Hot Entry Generator]]></title><link href="http://u-ryo.github.io//blog/2016/06/06/hot-entry-generator/"/><updated>2016-06-06T13:07:25+09:00</updated><id>/blog/2016/06/06/hot-entry-generator/</id><content type="html"><![CDATA[<p>Catchyなblog titleを作ってくれる<a href="http://pha22.net/hotentry/">ホッテントリメーカー</a>というものがある件について。</p>
<p>そうか、みんなこうやってtitleつけてたのか...
確かにありそうな提案をしてくるんで笑えますね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Content-Type for returning attachment file]]></title><link href="http://u-ryo.github.io//blog/2016/05/13/content-type-for-returning-attachment-file/"/><updated>2016-06-06T13:07:11+09:00</updated><id>/blog/2016/05/13/content-type-for-returning-attachment-file/</id><content type="html"><![CDATA[<p>ファイルをダウンロードさせるには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>print &quot;Content-Type: application/octet-stream\nContent-Disposition: attachment; filename=$line_number$day.oud\n\n&quot;;
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Awakening Wave LAN of NetworkManager on the Laptop]]></title><link href="http://u-ryo.github.io//blog/2016/03/22/awakening-wave-lan-of-networkmanager-on-the-laptop/"/><updated>2016-04-25T02:10:59+09:00</updated><id>/blog/2016/03/22/awakening-wave-lan-of-networkmanager-on-the-laptop/</id><content type="html"><![CDATA[HPのノートPCで、suspendから覚めても無線LANが復活しないことがよくあったので
困ってたんですが、NetworkManagerをcommand lineからいじれると知って。

null
$ nmcli -p nm status
null

とやると現在の状態を表示し、
やってみるとWLANのstatusがsleepだったので、

null
$ sudo nmcli -p nm sleep false
null

とすると、繋げに行くようになりました。めでたしめでたし。]]></content></entry><entry><title type="html"><![CDATA[Collecting the server crash logs by Errbit]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/collecting-the-server-crash-logs-by-errbit/"/><updated>2016-03-17T17:16:00+09:00</updated><id>/blog/2016/03/17/collecting-the-server-crash-logs-by-errbit/</id><content type="html"><![CDATA[<p><a href="http://qiita.com/tjnet/items/0a9fbb54afd6e0882040">無料エラー収集システムErrbitで、ログファイルをgrepする生活とサヨナラ</a></p>
<p>アプリでクラッシュがあったら通知する<a href="https://try.crashlytics.com/">Crashlytics</a>
<a href="http://blog.mb.cloud.nifty.com/?p=919">アプリ改善の道筋を示すクラッシュレポートサービスを使いこなそう</a>
のserver版がある、ってことですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Simple Web UI Testing by Sikuli]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/simple-web-ui-testing-by-sikuli/"/><updated>2016-03-17T17:02:54+09:00</updated><id>/blog/2016/03/17/simple-web-ui-testing-by-sikuli/</id><content type="html"><![CDATA[<p><a href="http://www.sikuli.org/">Sikuli</a>を使うと、
簡単にWeb UIをtest出来ます。
あ、Web UIに限りませんか。Desktop上のアプリ全て、というべきでしょう。
何と言っても、「このボタンをclick」とかっていう指定が、
当該ボタンの画像で示せる、
その画像を取るのもbrowser上で範囲指定すればいいだけ、
というのがなかなかshockingでした。</p>
<p>Sikuli自体は<a href="https://code.google.com/archive/p/sikuli-api/">Java API</a>があるので、OS free、script化も可能っぽいです。
<a href="http://www.sikulix.com/">SikuliX</a>でGUIでお手軽テスト自動化、のみならず。
ただ、「ここを選んでclickして」とかっていう手順はすんなり書けるんですが、
Captchaを乗り越えるために裏でlogic組みたかったんですけど、
それがどうもSikuliXではうまく出来ない感じがしたので、諦めました。
あぁ、上記のSikuli-apiを使ってJava Test classとして書けば良かったんですね。
出来ないことはないですか。ぼくが見落としただけです。
「ここ」って示す画像を沢山用意しないとならなさそう、です。</p>
<p>じぇじぇ、GebとSikuli、<a href="https://fbflex.wordpress.com/2012/10/27/geb-and-sikuli/">一緒に使えそう</a>ですね。
もうGebで書いちゃいましたよトホホ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Testing code in Javadoc using Groovy]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/testing-code-in-javadoc-using-groovy/"/><updated>2016-03-17T16:30:04+09:00</updated><id>/blog/2016/03/17/testing-code-in-javadoc-using-groovy/</id><content type="html"><![CDATA[<p>pythonには<a href="http://docs.python.jp/2/library/doctest.html">doctest</a>というのがあって、
method前段に書いた動作例documentをtestとして動かせるそうな。
同じようなのがJavaにも無いかなと探してみると、
<code>groovy.util.JavadocAssertionTestSuite</code>を使ってJavadocにtesting codeを書けるんだそう。
<a href="http://kyon-mm.bitbucket.org/blog/html/2013/05/29/use_javadocassertiontestsuite.html">うさぎ組 プロダクトコードのJavaDocにテストコードを書く方法</a>より。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class Sample {
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * add prefix &#39;sample&#39;.
</span><span class='line'>     * <span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;groovyTestCase&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     *    def sample = new org.kyon_mm.Sample()
</span><span class='line'>     *    assert &#39;sample foo&#39; == sample.prefixSample(&quot;foo&quot;)
</span><span class='line'>     * <span class="nt">&lt;/pre&gt;</span>
</span><span class='line'>     */
</span><span class='line'>    String prefixSample(aaa){
</span><span class='line'>        return &quot;sample $aaa&quot;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と書いて、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import junit.framework.Test
</span><span class='line'>import junit.framework.TestCase
</span><span class='line'>import junit.framework.TestSuite
</span><span class='line'>
</span><span class='line'>class ReferenceTests extends TestCase {
</span><span class='line'>    static Test suite()  {
</span><span class='line'>        def suite = new TestSuite()
</span><span class='line'>        suite.addTest( JavadocAssertionTestSuite.suite( &#39;src/main&#39; ) )
</span><span class='line'>        suite
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と書けば、gradleでもtestしてくれるそう。
こんなのがあったなんてびっくりポンです。
<a href="http://cscott.net/Projects/JDoctest/">JDoctest</a>というのもありますが、
Javascriptで記述するというのでGroovyの方がいいですよね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Assessing Outbound Traffic to Uncover Advanced Persistent Threat]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/assessing-outbound-traffic-to-uncover-advanced-persistent-threat/"/><updated>2016-03-17T11:08:17+09:00</updated><id>/blog/2016/03/17/assessing-outbound-traffic-to-uncover-advanced-persistent-threat/</id><content type="html"><![CDATA[<p>きょうび、APT(標的型攻撃)は、外向き通信から解析する必要があるでしょうと。
後で読むために。
<a href="https://www.sans.edu/student-files/projects/JWP-Binde-McRee-OConnor.pdf">Assessing Outbound Traffic to Uncover Advanced Persistent Threat</a></p>
]]></content></entry><entry><title type="html"><![CDATA[Debugging Groovy]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/debugging-groovy/"/><updated>2016-03-17T10:04:45+09:00</updated><id>/blog/2016/03/17/debugging-groovy/</id><content type="html"><![CDATA[<p>基本<code>println</code>で頑張るんですが、
Objectの中身を見るのって<code>.dump()</code>より<code>.inspect()</code>なんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Gatling instead of JMeter]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/gatling-instead-of-jmeter/"/><updated>2016-03-17T09:35:52+09:00</updated><id>/blog/2016/03/17/gatling-instead-of-jmeter/</id><content type="html"><![CDATA[<p>イマドキの負荷テストは、<a href="http://gatling.io/">Gatling</a>が良いそうです。
結果のvisualizationがとても魅力的。
Scala baseなれどfluentに書けるので敷居も低そう。</p>
]]></content></entry><entry><title type="html"><![CDATA[geb is great]]></title><link href="http://u-ryo.github.io//blog/2016/03/16/geb-is-great/"/><updated>2016-03-16T14:27:03+09:00</updated><id>/blog/2016/03/16/geb-is-great/</id><content type="html"><![CDATA[<p><a href="http://www.gebish.org/">Geb</a>([jeb])が凄いです。
要はSeleniumのwrapperなんですが、
Page Modelとか駆使すると、
GUI testもspockのSpec本体には具体的なtag名出さずにlogicalに書けますね。
frameなpageでは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;frameset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;frame</span> <span class="na">id=</span><span class="s">&quot;head&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/frame&gt;</span>
</span><span class='line'>  <span class="nt">&lt;frame</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/frame&gt;</span>
</span><span class='line'><span class="nt">&lt;/frameset&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>とあったら、Page Objectに</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>static content = {
</span><span class='line'>  header(page: HeaderPage) { $(&#39;#head&#39;) }
</span><span class='line'>  main(page: MainPage) { $(&#39;#main&#39;) }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と書いて、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>withFrame(main) {
</span><span class='line'>  ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と使えます。</p>
<p>しかし、
そもそもイマドキframeなんか使う方がおかしいんですけどね。
html5ではaccessibilityの観点から廃止されてるのに。</p>
<p>最近よくある、mouse overしてmenuをdrop downさせるものについては、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>interact {
</span><span class='line'>  moveToElement(...)
</span><span class='line'>  click(...)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p><code>&lt;select&gt;</code>やradio buttonsといったform関係要素については、
以下のようにmoduleを使って簡単に操れます。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import geb.module.RadioButtons
</span><span class='line'>import geb.module.Select
</span><span class='line'>import geb.module.Textarea
</span><span class='line'>$(&#39;select#...&#39;).module(Select).selected = &#39;some value&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(Select).selectedText == &#39;label text&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(RadioButtons) = &#39;some value&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(RadioButtons).checked == &#39;some value&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(Textarea).text = &#39;A sentence with\na new line.&#39;
</span></code></pre></td></tr></table></div></figure>
<p><code>withFrame</code>でのassertionは、末尾に<code>|| true</code>が必要でした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>withFrame(main) {
</span><span class='line'>  leaveRequest.approver.selectedText == &#39;è¥¿ãé¨é·&#39;
</span><span class='line'>  leaveRequest.approvalDate.text == new Date().format(&#39;yyyy/MM/dd&#39;)
</span><span class='line'>} || true
</span></code></pre></td></tr></table></div></figure>
<p>frame内の変化があるので、Page Module内要素は<code>required: false</code>つけまくりでした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>static content = {
</span><span class='line'>  requestType(wait: true, required: false) { $(&#39;input#rdo12&#39;).module(RadioButtons) }
</span><span class='line'>  requester(required: false) { $(&#39;span#select2-chosen-1&#39;) }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>あと適宜<code>waitFor {...}</code>が必要ですね。</p>
<p>browser alertの処理は厄介でした。
<code>driver.switchTo().alert().accept()</code>かと思ったら、<code>withAlert(wait: true){...}</code>でいいんですか。
普通の(javascriptによる)popup dialogに対しても。
「browser alertが出たら」ってどう書くんでしょう。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>withAlert(wait: true) {
</span><span class='line'>  ...
</span><span class='line'>} == &#39;modal dialog message&#39;
</span></code></pre></td></tr></table></div></figure>
<p>まぁ、<a href="http://www.gebish.org/manual/current/">geb manual</a>を読めってことですね。</p>
<p>これはgroovyのことですが、日付のformatが簡単です。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>leaveRequest.approvalDate.text == new Date().format(&#39;yyyy/MM/dd&#39;)
</span></code></pre></td></tr></table></div></figure>
<p>http accessはHttpURLClientを用い、またcookieの取得も簡単です。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Grab(&#39;org.codehaus.groovy.modules.http-builder:http-builder&#39;)
</span><span class='line'>import groovyx.net.http.HttpURLClient
</span><span class='line'>def jsessionId = driver.manage().getCookieNamed(&quot;JSESSIONID&quot;).value
</span><span class='line'>def http = new HttpURLClient(url: &#39;https://my-ocr.herokuapp.com/&#39;)
</span><span class='line'>tryLogin(userId, password, http.request(path: jsessionId).data)
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[koding has changed]]></title><link href="http://u-ryo.github.io//blog/2016/03/16/koding-has-changed/"/><updated>2016-03-16T10:27:13+09:00</updated><id>/blog/2016/03/16/koding-has-changed/</id><content type="html"><![CDATA[<p><a href="https://koding.com">Koding</a>が、何かいきなりTeam codingとかいって、renewalしてました。
新しくなるのはいいんですけど、
<a href="https://github.com">github</a>のaccountで入れなくなったり、
AWSが必須だかlocalのLinuxにkdとかいうのをinstallするのが必須だか、
free and Web上で完結しなくなっているようだったり、
というのはやめて欲しいです。
今更ながら、<a href="https://nitrous.io">nitrous.io</a>に乗り換えます。
<a href="https://c9.io">Cloud9</a>だとGrainw compile出来ないので。</p>
]]></content></entry><entry><title type="html"><![CDATA[Security Check]]></title><link href="http://u-ryo.github.io//blog/2016/02/20/security-check/"/><updated>2016-03-16T11:01:16+09:00</updated><id>/blog/2016/02/20/security-check/</id><content type="html"><![CDATA[<p>NHK Specialの<a href="http://www.nhk.or.jp/docudocu/program/46/2586764/">CYBER SHOCK 狙われる日本の機密情報</a>見てたら、
標的型攻撃による情報流出が怖くなりました。
<a href="http://www.jipdec.or.jp">JIPDEC</a>とか、表面化してないだけで絶対やられてるんじゃないのかな、
とか思うんですが、それをみるために、
gatewayで宛先IPとportをcheckしたらいいんじゃないのかな、
と思いました。
まず自分のマシンでやってみようと思いました。
隗より始めよ、ですね。
iptablesでOUTPUTのACKなtcpのdportとIPをLOGすれば、
と思ったんですけど、
それだったらsnortの方がいいですか。
でもsnortでoutboundな通信のlogってどうやるんでしょう。
また、それでIPあげつらったとしても、
それをどう検証するのか。
blacklistでもないかなぁ、と思ったら、
カペルスキーとかセキュリティ専門会社は独自blacklist持ってるんですね。</p>
<p>...と、この辺まで書いてたら、
Kodingに「週間使用量をexceedしている」とかいわれて止められちゃいました。
書こうとしてた時に勢いを止められるのはつらいです。
書いた文章もURLも消えちゃいましたし、何書こうとしてたか忘れちゃいました。</p>
<p>blacklist、IP addressで検索していたら、
whatismyipaddressの<a href="http://whatismyipaddress.com/blacklist-check">Blacklist Check</a>、
でもこれは、接続元IPがspammerのblacklistに載っているか、
一括して調べるもの。どこかに載ってたら、
過去にspamを送っていたことがある、
何らかのmalwareに感染してた可能性がある、
ということです。</p>
<p><a href="https://www.reddit.com/r/Malware/comments/3u8719/check_your_very_own_ip_for_any_botnet_infections/">check your very own IP for any botnet infections</a>
というのがあって、これも同じようなserviceなんでしょうか。</p>
<p>C&amp;C serverとのcommunicationは、
DNSのTXT recordでやるそうですね。
そんなのってdetect出来るんでしょうかね。出来そうですね。
何かtoolないのかな。</p>
<p><a href="&quot;https://www.facebook.com/sec.testing.study.session">脆弱性診断研究会</a>には、
よさ気な情報が載ってます。
↑に載ってましたが、
<a href="http://vaddy.net/ja/">VAddy</a>というJenkinsに組み込んでCIで脆弱性診断をしてくれる
serviceがあるそうです。free planだとSQL injection、XSSしか見てくれないそうですが、
freeで何度も使えるならいいですね。</p>
<h2>脆弱性検査tools</h2>
<ul>
<li>OWASP ZAP</li>
<li>Vega(Java, included in Kali Linux)</li>
</ul>
<p>Bug hunterとして生計を立てている<a href="http://masatokinugawa.l0.cm/">Kinugawa masatoさんのページ</a>が
とても勉強になります。<a href="http://blog.tokumaru.org/">徳丸先生の日記</a>は言わずもがな。
<a href="https://takagi-hiromitsu.jp/diary/">ヒロミチュ先生のところ</a>は、
最近技術的な話題少ないんですかね。</p>
]]></content></entry><entry><title type="html"><![CDATA[minimal set for sinatra on heroku]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/minimal-set-for-sinatra-on-heroku/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2016/02/19/minimal-set-for-sinatra-on-heroku/</id><content type="html"><![CDATA[<p>heroku久しぶりだったので、やり方忘れちゃいましたよ。</p>
<p>Cloud9上で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ cat Gemfile
</span><span class='line'>source &#39;https://rubygems.org&#39;
</span><span class='line'>gem &#39;sinatra&#39;
</span><span class='line'>
</span><span class='line'>$ cat Procfile
</span><span class='line'>web: exec ruby app.rb -p $PORT
</span><span class='line'>
</span><span class='line'>$ cat app.rb
</span><span class='line'>require &#39;sinatra&#39;
</span><span class='line'>
</span><span class='line'>get &#39;/&#39; do
</span><span class='line'>  &#39;Hello World!&#39;
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>
<p>最低この3ファイル、なんですが、
gitにcommitしてherokuにdeployするのは
あと自動生成される <code>Gemfile.lock</code> も必要になります。
<code>Gemfile.lock</code> は、一旦rubyを動かさないと出来ないのかな?
<code>ruby app.rb</code> で試せます。</p>
<p>herokuへは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ heroku create my-application
</span><span class='line'>$ git init
</span><span class='line'>$ git add Gemfile Gemfile.lock Procfile app.rb
</span><span class='line'>$ git commit -a
</span><span class='line'>$ bundle install
</span><span class='line'>$ git push heroku master
</span></code></pre></td></tr></table></div></figure>
<p>で上手く行く筈、なんですが、
git remoteを設定しないとダメかも。
その辺は適宜。</p>
]]></content></entry></feed>