<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2016-03-17T17:16:00+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Collecting the server crash logs by Errbit]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/collecting-the-server-crash-logs-by-errbit/"/><updated>2016-03-17T17:16:00+09:00</updated><id>/blog/2016/03/17/collecting-the-server-crash-logs-by-errbit/</id><content type="html"><![CDATA[<p><a href="http://qiita.com/tjnet/items/0a9fbb54afd6e0882040">無料エラー収集システムErrbitで、ログファイルをgrepする生活とサヨナラ</a></p>
<p>アプリでクラッシュがあったら通知する<a href="https://try.crashlytics.com/">Crashlytics</a>
<a href="http://blog.mb.cloud.nifty.com/?p=919">アプリ改善の道筋を示すクラッシュレポートサービスを使いこなそう</a>
のserver版がある、ってことですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Simple Web UI Testing by Sikuli]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/simple-web-ui-testing-by-sikuli/"/><updated>2016-03-17T17:02:54+09:00</updated><id>/blog/2016/03/17/simple-web-ui-testing-by-sikuli/</id><content type="html"><![CDATA[<p><a href="http://www.sikuli.org/">Sikuli</a>を使うと、
簡単にWeb UIをtest出来ます。
あ、Web UIに限りませんか。Desktop上のアプリ全て、というべきでしょう。
何と言っても、「このボタンをclick」とかっていう指定が、
当該ボタンの画像で示せる、
その画像を取るのもbrowser上で範囲指定すればいいだけ、
というのがなかなかshockingでした。</p>
<p>Sikuli自体は<a href="https://code.google.com/archive/p/sikuli-api/">Java API</a>があるので、OS free、script化も可能っぽいです。
<a href="http://www.sikulix.com/">SikuliX</a>でGUIでお手軽テスト自動化、のみならず。
ただ、「ここを選んでclickして」とかっていう手順はすんなり書けるんですが、
Captchaを乗り越えるために裏でlogic組みたかったんですけど、
それがどうもSikuliXではうまく出来ない感じがしたので、諦めました。
あぁ、上記のSikuli-apiを使ってJava Test classとして書けば良かったんですね。
出来ないことはないですか。ぼくが見落としただけです。
「ここ」って示す画像を沢山用意しないとならなさそう、です。</p>
<p>じぇじぇ、GebとSikuli、<a href="https://fbflex.wordpress.com/2012/10/27/geb-and-sikuli/">一緒に使えそう</a>ですね。
もうGebで書いちゃいましたよトホホ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Testing code in Javadoc using Groovy]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/testing-code-in-javadoc-using-groovy/"/><updated>2016-03-17T16:30:04+09:00</updated><id>/blog/2016/03/17/testing-code-in-javadoc-using-groovy/</id><content type="html"><![CDATA[<p>pythonには<a href="http://docs.python.jp/2/library/doctest.html">doctest</a>というのがあって、
method前段に書いた動作例documentをtestとして動かせるそうな。
同じようなのがJavaにも無いかなと探してみると、
<code>groovy.util.JavadocAssertionTestSuite</code>を使ってJavadocにtesting codeを書けるんだそう。
<a href="http://kyon-mm.bitbucket.org/blog/html/2013/05/29/use_javadocassertiontestsuite.html">うさぎ組 プロダクトコードのJavaDocにテストコードを書く方法</a>より。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class Sample {
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * add prefix &#39;sample&#39;.
</span><span class='line'>     * <span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;groovyTestCase&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     *    def sample = new org.kyon_mm.Sample()
</span><span class='line'>     *    assert &#39;sample foo&#39; == sample.prefixSample(&quot;foo&quot;)
</span><span class='line'>     * <span class="nt">&lt;/pre&gt;</span>
</span><span class='line'>     */
</span><span class='line'>    String prefixSample(aaa){
</span><span class='line'>        return &quot;sample $aaa&quot;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と書いて、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import junit.framework.Test
</span><span class='line'>import junit.framework.TestCase
</span><span class='line'>import junit.framework.TestSuite
</span><span class='line'>
</span><span class='line'>class ReferenceTests extends TestCase {
</span><span class='line'>    static Test suite()  {
</span><span class='line'>        def suite = new TestSuite()
</span><span class='line'>        suite.addTest( JavadocAssertionTestSuite.suite( &#39;src/main&#39; ) )
</span><span class='line'>        suite
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と書けば、gradleでもtestしてくれるそう。
こんなのがあったなんてびっくりポンです。
<a href="http://cscott.net/Projects/JDoctest/">JDoctest</a>というのもありますが、
Javascriptで記述するというのでGroovyの方がいいですよね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Assessing Outbound Traffic to Uncover Advanced Persistent Threat]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/assessing-outbound-traffic-to-uncover-advanced-persistent-threat/"/><updated>2016-03-17T11:08:17+09:00</updated><id>/blog/2016/03/17/assessing-outbound-traffic-to-uncover-advanced-persistent-threat/</id><content type="html"><![CDATA[<p>きょうび、APT(標的型攻撃)は、外向き通信から解析する必要があるでしょうと。
後で読むために。
<a href="https://www.sans.edu/student-files/projects/JWP-Binde-McRee-OConnor.pdf">Assessing Outbound Traffic to Uncover Advanced Persistent Threat</a></p>
]]></content></entry><entry><title type="html"><![CDATA[Debugging Groovy]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/debugging-groovy/"/><updated>2016-03-17T10:04:45+09:00</updated><id>/blog/2016/03/17/debugging-groovy/</id><content type="html"><![CDATA[<p>基本<code>println</code>で頑張るんですが、
Objectの中身を見るのって<code>.dump()</code>より<code>.inspect()</code>なんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[Gatling instead of JMeter]]></title><link href="http://u-ryo.github.io//blog/2016/03/17/gatling-instead-of-jmeter/"/><updated>2016-03-17T09:35:52+09:00</updated><id>/blog/2016/03/17/gatling-instead-of-jmeter/</id><content type="html"><![CDATA[<p>イマドキの負荷テストは、<a href="http://gatling.io/">Gatling</a>が良いそうです。
結果のvisualizationがとても魅力的。
Scala baseなれどfluentに書けるので敷居も低そう。</p>
]]></content></entry><entry><title type="html"><![CDATA[geb is great]]></title><link href="http://u-ryo.github.io//blog/2016/03/16/geb-is-great/"/><updated>2016-03-16T14:27:03+09:00</updated><id>/blog/2016/03/16/geb-is-great/</id><content type="html"><![CDATA[<p><a href="http://www.gebish.org/">Geb</a>([jeb])が凄いです。
要はSeleniumのwrapperなんですが、
Page Modelとか駆使すると、
GUI testもspockのSpec本体には具体的なtag名出さずにlogicalに書けますね。
frameなpageでは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;frameset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;frame</span> <span class="na">id=</span><span class="s">&quot;head&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/frame&gt;</span>
</span><span class='line'>  <span class="nt">&lt;frame</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/frame&gt;</span>
</span><span class='line'><span class="nt">&lt;/frameset&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>とあったら、Page Objectに</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>static content = {
</span><span class='line'>  header(page: HeaderPage) { $(&#39;#head&#39;) }
</span><span class='line'>  main(page: MainPage) { $(&#39;#main&#39;) }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と書いて、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>withFrame(main) {
</span><span class='line'>  ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>と使えます。</p>
<p>しかし、
そもそもイマドキframeなんか使う方がおかしいんですけどね。
html5ではaccessibilityの観点から廃止されてるのに。</p>
<p>最近よくある、mouse overしてmenuをdrop downさせるものについては、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>interact {
</span><span class='line'>  moveToElement(...)
</span><span class='line'>  click(...)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p><code>&lt;select&gt;</code>やradio buttonsといったform関係要素については、
以下のようにmoduleを使って簡単に操れます。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import geb.module.RadioButtons
</span><span class='line'>import geb.module.Select
</span><span class='line'>import geb.module.Textarea
</span><span class='line'>$(&#39;select#...&#39;).module(Select).selected = &#39;some value&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(Select).selectedText == &#39;label text&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(RadioButtons) = &#39;some value&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(RadioButtons).checked == &#39;some value&#39;
</span><span class='line'>$(&#39;select#...&#39;).module(Textarea).text = &#39;A sentence with\na new line.&#39;
</span></code></pre></td></tr></table></div></figure>
<p><code>withFrame</code>でのassertionは、末尾に<code>|| true</code>が必要でした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>withFrame(main) {
</span><span class='line'>  leaveRequest.approver.selectedText == &#39;è¥¿ãé¨é·&#39;
</span><span class='line'>  leaveRequest.approvalDate.text == new Date().format(&#39;yyyy/MM/dd&#39;)
</span><span class='line'>} || true
</span></code></pre></td></tr></table></div></figure>
<p>frame内の変化があるので、Page Module内要素は<code>required: false</code>つけまくりでした。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>static content = {
</span><span class='line'>  requestType(wait: true, required: false) { $(&#39;input#rdo12&#39;).module(RadioButtons) }
</span><span class='line'>  requester(required: false) { $(&#39;span#select2-chosen-1&#39;) }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>あと適宜<code>waitFor {...}</code>が必要ですね。</p>
<p>browser alertの処理は厄介でした。
<code>driver.switchTo().alert().accept()</code>かと思ったら、<code>withAlert(wait: true){...}</code>でいいんですか。
普通の(javascriptによる)popup dialogに対しても。
「browser alertが出たら」ってどう書くんでしょう。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>withAlert(wait: true) {
</span><span class='line'>  ...
</span><span class='line'>} == &#39;modal dialog message&#39;
</span></code></pre></td></tr></table></div></figure>
<p>まぁ、<a href="http://www.gebish.org/manual/current/">geb manual</a>を読めってことですね。</p>
<p>これはgroovyのことですが、日付のformatが簡単です。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>leaveRequest.approvalDate.text == new Date().format(&#39;yyyy/MM/dd&#39;)
</span></code></pre></td></tr></table></div></figure>
<p>http accessはHttpURLClientを用い、またcookieの取得も簡単です。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@Grab(&#39;org.codehaus.groovy.modules.http-builder:http-builder&#39;)
</span><span class='line'>import groovyx.net.http.HttpURLClient
</span><span class='line'>def jsessionId = driver.manage().getCookieNamed(&quot;JSESSIONID&quot;).value
</span><span class='line'>def http = new HttpURLClient(url: &#39;https://my-ocr.herokuapp.com/&#39;)
</span><span class='line'>tryLogin(userId, password, http.request(path: jsessionId).data)
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[koding has changed]]></title><link href="http://u-ryo.github.io//blog/2016/03/16/koding-has-changed/"/><updated>2016-03-16T10:27:13+09:00</updated><id>/blog/2016/03/16/koding-has-changed/</id><content type="html"><![CDATA[<p><a href="https://koding.com">Koding</a>が、何かいきなりTeam codingとかいって、renewalしてました。
新しくなるのはいいんですけど、
<a href="https://github.com">github</a>のaccountで入れなくなったり、
AWSが必須だかlocalのLinuxにkdとかいうのをinstallするのが必須だか、
free and Web上で完結しなくなっているようだったり、
というのはやめて欲しいです。
今更ながら、<a href="https://nitrous.io">nitrous.io</a>に乗り換えます。
<a href="https://c9.io">Cloud9</a>だとGrainw compile出来ないので。</p>
]]></content></entry><entry><title type="html"><![CDATA[Security Check]]></title><link href="http://u-ryo.github.io//blog/2016/02/20/security-check/"/><updated>2016-03-16T11:01:16+09:00</updated><id>/blog/2016/02/20/security-check/</id><content type="html"><![CDATA[<p>NHK Specialの<a href="http://www.nhk.or.jp/docudocu/program/46/2586764/">CYBER SHOCK 狙われる日本の機密情報</a>見てたら、
標的型攻撃による情報流出が怖くなりました。
<a href="http://www.jipdec.or.jp">JIPDEC</a>とか、表面化してないだけで絶対やられてるんじゃないのかな、
とか思うんですが、それをみるために、
gatewayで宛先IPとportをcheckしたらいいんじゃないのかな、
と思いました。
まず自分のマシンでやってみようと思いました。
隗より始めよ、ですね。
iptablesでOUTPUTのACKなtcpのdportとIPをLOGすれば、
と思ったんですけど、
それだったらsnortの方がいいですか。
でもsnortでoutboundな通信のlogってどうやるんでしょう。
また、それでIPあげつらったとしても、
それをどう検証するのか。
blacklistでもないかなぁ、と思ったら、
カペルスキーとかセキュリティ専門会社は独自blacklist持ってるんですね。</p>
<p>...と、この辺まで書いてたら、
Kodingに「週間使用量をexceedしている」とかいわれて止められちゃいました。
書こうとしてた時に勢いを止められるのはつらいです。
書いた文章もURLも消えちゃいましたし、何書こうとしてたか忘れちゃいました。</p>
<p>blacklist、IP addressで検索していたら、
whatismyipaddressの<a href="http://whatismyipaddress.com/blacklist-check">Blacklist Check</a>、
でもこれは、接続元IPがspammerのblacklistに載っているか、
一括して調べるもの。どこかに載ってたら、
過去にspamを送っていたことがある、
何らかのmalwareに感染してた可能性がある、
ということです。</p>
<p><a href="https://www.reddit.com/r/Malware/comments/3u8719/check_your_very_own_ip_for_any_botnet_infections/">check your very own IP for any botnet infections</a>
というのがあって、これも同じようなserviceなんでしょうか。</p>
<p>C&amp;C serverとのcommunicationは、
DNSのTXT recordでやるそうですね。
そんなのってdetect出来るんでしょうかね。出来そうですね。
何かtoolないのかな。</p>
<p><a href="&quot;https://www.facebook.com/sec.testing.study.session">脆弱性診断研究会</a>には、
よさ気な情報が載ってます。
↑に載ってましたが、
<a href="http://vaddy.net/ja/">VAddy</a>というJenkinsに組み込んでCIで脆弱性診断をしてくれる
serviceがあるそうです。free planだとSQL injection、XSSしか見てくれないそうですが、
freeで何度も使えるならいいですね。</p>
<h2>脆弱性検査tools</h2>
<ul>
<li>OWASP ZAP</li>
<li>Vega(Java, included in Kali Linux)</li>
</ul>
<p>Bug hunterとして生計を立てている<a href="http://masatokinugawa.l0.cm/">Kinugawa masatoさんのページ</a>が
とても勉強になります。<a href="http://blog.tokumaru.org/">徳丸先生の日記</a>は言わずもがな。
<a href="https://takagi-hiromitsu.jp/diary/">ヒロミチュ先生のところ</a>は、
最近技術的な話題少ないんですかね。</p>
]]></content></entry><entry><title type="html"><![CDATA[minimal set for sinatra on heroku]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/minimal-set-for-sinatra-on-heroku/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2016/02/19/minimal-set-for-sinatra-on-heroku/</id><content type="html"><![CDATA[<p>heroku久しぶりだったので、やり方忘れちゃいましたよ。</p>
<p>Cloud9上で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ cat Gemfile
</span><span class='line'>source &#39;https://rubygems.org&#39;
</span><span class='line'>gem &#39;sinatra&#39;
</span><span class='line'>
</span><span class='line'>$ cat Procfile
</span><span class='line'>web: exec ruby app.rb -p $PORT
</span><span class='line'>
</span><span class='line'>$ cat app.rb
</span><span class='line'>require &#39;sinatra&#39;
</span><span class='line'>
</span><span class='line'>get &#39;/&#39; do
</span><span class='line'>  &#39;Hello World!&#39;
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>
<p>最低この3ファイル、なんですが、
gitにcommitしてherokuにdeployするのは
あと自動生成される <code>Gemfile.lock</code> も必要になります。
<code>Gemfile.lock</code> は、一旦rubyを動かさないと出来ないのかな?
<code>ruby app.rb</code> で試せます。</p>
<p>herokuへは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ heroku create my-application
</span><span class='line'>$ git init
</span><span class='line'>$ git add Gemfile Gemfile.lock Procfile app.rb
</span><span class='line'>$ git commit -a
</span><span class='line'>$ bundle install
</span><span class='line'>$ git push heroku master
</span></code></pre></td></tr></table></div></figure>
<p>で上手く行く筈、なんですが、
git remoteを設定しないとダメかも。
その辺は適宜。</p>
]]></content></entry><entry><title type="html"><![CDATA[how to build my web application product]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/how-to-build-my-web-application-product/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2016/02/19/how-to-build-my-web-application-product/</id><content type="html"><![CDATA[<h2>Private memo</h2>
<p>To build hondaPortal,
<code>cd</code> to hondaPortalView,
<code>bower install</code> and <code>npm install</code> first to set up javascript libraries.
And return to the parent directory and try <code>gradlew</code>.
If the build process encounters an error on imagemin in hondaPortalView,
I found a workaround at <a href="https://github.com/gruntjs/grunt-contrib-imagemin/issues/330">Fatal error: Cannot read property 'contents' of undefined #330</a>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>cd node_modules/grunt-contrib-imagemin
</span><span class='line'>npm install imagemin@4.0.0
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Java Decompiler]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/java-decompiler/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2016/02/19/java-decompiler/</id><content type="html"><![CDATA[<p>Javaのdecompilerといえばjadが昔から有名ですが、jadってとうに開発止まってるんですね。
知りませんでした。1.5くらいから解析不能というのでは、
もうちょっと使えませんか。
今は<a href="http://jd.benow.ca/">JD-GUI</a>が簡便そうですが、
これとてJava8のlambda expressionや、そもそもLocal Method Classes(method内inner class?)に非対応とな。
Java8の昨今ではう～ん、です。
と思ったら、<a href="http://www.benf.org/other/cfr/">CFR</a>というのが使えるそうです。
実際試して、使えました。
<a href="http://www.javadecompilers.com/">online decompiler</a>もあるので、色々気軽に試せます。
良かった、今でもjava decompileは気軽に出来るわけですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[scp on emacs dired]]></title><link href="http://u-ryo.github.io//blog/2016/01/06/scp-on-emacs-dired/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2016/01/06/scp-on-emacs-dired/</id><content type="html"><![CDATA[<h3>emacs上でのscp with tramp</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/scp:mickey:/mnt/u-ryo/photo/20151227/
</span></code></pre></td></tr></table></div></figure>
<p>というように、<code>scp</code>とした方が良いらしい。</p>
]]></content></entry><entry><title type="html"><![CDATA[rename files]]></title><link href="http://u-ryo.github.io//blog/2016/01/05/rename-files/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2016/01/05/rename-files/</id><content type="html"><![CDATA[<h3>ファイル名一括置換</h3>
<p>「rename」を使えばよいとのことだったので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ rename &#39;IMG_&#39; &#39;img_0&#39; ~/photo/20151227/*.JPG
</span></code></pre></td></tr></table></div></figure>
<p>しかし、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Bareword &quot;IMG_&quot; not allowed while &quot;strict subs&quot; in use at (eval 1) line 1.
</span></code></pre></td></tr></table></div></figure>
<p>と言われて動かなかったので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>find /home/u-ryo/photo/20151227/ -name &quot;IMG_*.JPG&quot;|sed &#39;p;s|IMG_\([0-9][0-9][0-9][0-9]\).JPG|img_0\1.jpg|g&#39;|xargs -n2 mv
</span></code></pre></td></tr></table></div></figure>
<p>とすれば動いた。</p>
]]></content></entry><entry><title type="html"><![CDATA[ruby on heroku]]></title><link href="http://u-ryo.github.io//blog/2015/12/17/ruby-on-heroku/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2015/12/17/ruby-on-heroku/</id><content type="html"><![CDATA[<p>11月から駒沢大学のCTCに派遣されて、
某A空輸の次期予約サイトのMonkey Testをやらされているんですが、
screen shotとかuploadするのに、何故か20kbという制限があります。
そんなの、Gimpとかフリーソフト使えば簡単なんですが、
入れさせてくれないんですよね。
なので、screen shotと撮るにはALT + PrintScreen、
編集はMicro$oft謹製のペイント、
pngでsave出来るようになっただけマシではありますが、
64bit colorでしか保存できないので、
sizeが無駄に大きくなっちゃって、
20kbなんてすぐ超えちゃうんですよね。
ImageMagick使えばそんなの、
<code>convert infile.png -colors 256 outfile.png</code>
で済むのに。</p>
<p>仕方無いので、縮小したりしていたんですが、
縮小すると何が書いてあるかわからないし。
そうだ、Web Applicationならinstallしなくてもいい、
と気付いたんですけど、
巷間のserviceに外部秘の画像を上げるのは気が引けたので、
なら自分で作ろうと。</p>
<p>オンプレミスなserverも持ってますが、
イマドキじゃないのと、
よく見たらオンプレミスserverにはImageMagickも入ってないですし。
まぁそれは<code>apt-get install</code>一発で行けるからいいんですけど、
shell scriptでconvertすればいいから、
cgiでちゃちゃっと書いちゃおう、と思ったんですが。
POSTされたfile dataをparseするのが面倒かな、
と思ったのと、あと443が開いてないんですね。
なので、herokuに上げよう、と。
そうなるとrubyかな、と思ったので、調べてやってみました。</p>
<p>herokuの公式ruby用sampleを元に作れそう、だったので、
調べて、sinatra使ってるってわかって、
あとImageMagickはherokuに元々入ってて、
rubyはrmagicを使えるらしいということで、やりました。</p>
<p>cf.</p>
<ol>
<li><a href="https://gist.github.com/konitter/5370904">Heroku導入メモ</a></li>
<li><a href="git://github.com/heroku/ruby-sample.git">ruby sample</a></li>
<li>あと<code>$ build</code>?</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ git commit -a
</span><span class='line'>$ git push heroku master
</span></code></pre></td></tr></table></div></figure>
<p>rmagicを使うには、以下の作業が必要でした。</p>
<ol>
<li>Gemfileに<code>gem 'rmagick', '~&gt;2.15.4', :require =&gt; 'RMagick'</code></li>
<li>c9上で<code>sudo apt-get install imagemagick libmagick++-dev</code></li>
</ol>
<p>POSTされたfile dataの取得は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image_filename = &quot;./#{params[:file][:filename]}&quot;
</span><span class='line'>imagedata = params[:file][:tempfile].read
</span></code></pre></td></tr></table></div></figure>
<p>image dataの取得は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image = Magick::Image.from_blob(imagedata).first
</span></code></pre></td></tr></table></div></figure>
<p>fileとしてのreturnは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>content_type = &#39;image/png&#39;
</span><span class='line'>attachment image_filename
</span></code></pre></td></tr></table></div></figure>
<p>image dataのbinary data取り出しは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image.to_blob
</span></code></pre></td></tr></table></div></figure>
<p>256色への減色は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mage.format = &quot;PNG8&quot;
</span></code></pre></td></tr></table></div></figure>
<p>とするだけで8bit colorで保存されます。</p>
<p>最終的には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>require &#39;sinatra&#39;
</span><span class='line'>require &quot;rmagick&quot;
</span><span class='line'>
</span><span class='line'>get &#39;/&#39; do
</span><span class='line'>  erb :index
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>post &#39;/&#39; do
</span><span class='line'>	if params[:file]
</span><span class='line'>	   image_filename = &quot;./#{params[:file][:filename]}&quot;
</span><span class='line'>	   imagedata = params[:file][:tempfile].read
</span><span class='line'>	   image = Magick::Image.from_blob(imagedata).first
</span><span class='line'>	   image.format = &quot;PNG8&quot;
</span><span class='line'>        content_type = &#39;image/png&#39;
</span><span class='line'>        attachment image_filename
</span><span class='line'>        image.to_blob
</span><span class='line'>	end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>
<p>あぁ、erbってのも初めて使いました。
ここへpostするためのplain htmlが書いてあります。</p>
]]></content></entry><entry><title type="html"><![CDATA[Beethoven Comic]]></title><link href="http://u-ryo.github.io//blog/2015/12/17/beethoven-comic/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2015/12/17/beethoven-comic/</id><content type="html"><![CDATA[<p>昨日のDoodleがBeethovenのmini gameだったので、
ついそのまま検索していたら、
<a href="http://naxos.jp/special/no_unmei">ベートーヴェン4コマ劇場「運命と呼ばないで」</a>
というのを見付けました。
これ面白い! デス。
部屋汚い、(時々間違える?など)演奏が雑、でも情熱的、
ってのだめじゃーん。
でも天才ってそうなんでしょうね。
オヤジギャグとかいいなー。貧乏は嫌ですが。</p>
]]></content></entry><entry><title type="html"><![CDATA[Deploying to GAE]]></title><link href="http://u-ryo.github.io//blog/2015/11/17/deploying-to-gae/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2015/11/17/deploying-to-gae/</id><content type="html"><![CDATA[<p>いやぁ、こんなに大変だとは。
web applicationをGAEにdeployするのって。
既に何度も過去にはやっているんですが、
久し振りにやると、なかなか上手く行かないです。</p>
<p>最初、<a href="https://c9.io">Cloud9</a>でやってみたら、
何度やってもresource(memory?)不足でappengine:updateが途中でkillされます。
仕方無いので、GAE連携がウリの<a href="https://codenvy.com">Codenvy</a>でやってみたんですが、
original jarにdependsしているんですけど、
それが上手く行かないんです。
<a href="http://docs.codenvy.com/user/technology-specific-features/#upload-local-libs">official manual</a>
見てrepository追加して、
directoryもgroupId、artifactId、versionと掘って配置して、
buildかけると読んではくれてるんですが、
何故か「jar; error in opening zip file」と言われてこけます。
改めてjar fileをuploadしたんですけど、
何度やってもダメ、同じerrorでした。
何故?</p>
<p>もう仕方無く、localでbuild、updateしようとすると、
今度は「Either the access code is invalid or the OAuth token is revoked.Details: invalid_grant」と言われて。
<a href="https://heroku.com">heroku</a>はCloud9でサクッとdeploy出来るのに。
やっぱりGAEはもう時代遅れでしょうか。
Java8未対応ですし無料分では。</p>
<p>結局、<code>~/.appcfg_oauth2_tokens_java</code>を消したら上手くOAuth再取得してくれました。
やれやれ、です。</p>
]]></content></entry><entry><title type="html"><![CDATA[Angular2 Tutorial]]></title><link href="http://u-ryo.github.io//blog/2015/11/15/angular2-tutorial/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2015/11/15/angular2-tutorial/</id><content type="html"><![CDATA[<p>Angular2の<a href="https://angular.io/docs/ts/latest/quickstart.html">Tutorial</a>が凄いです。
すぐ使えて面白いです。
英語も平易ですし。
そこから<a href="https://angular.io/docs/ts/latest/guide/">Developer Guides</a>へも、
割と繋がってますし。完全に、ではないのが残念ですけど。
特にroutingの解説は、欲しいところです。
netで探せばAngular2の解説が幾つか日本語でも出て来ますが、
2015年3月4月くらいのものだと、
もうかなり大分違うので(<code>@Teplate</code>とかもうないでしょう?)、
気を付けないとなりません。
でも今からAngularやるなら、
もう来年からAngular2になることが分かっているので、
今更<code>$scope</code>とかやりたくないですよ。
まだまだα版なので、これからも大きく変わりそうですけど...</p>
]]></content></entry><entry><title type="html"><![CDATA[set my postfix able to send over OP25B(Outbound Port 25 Blocking) using Mailgun]]></title><link href="http://u-ryo.github.io//blog/2015/11/15/set-my-postfix-able-to-send-over-op25b-outbound-port-25-blocking-using-mailgun/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2015/11/15/set-my-postfix-able-to-send-over-op25b-outbound-port-25-blocking-using-mailgun/</id><content type="html"><![CDATA[<p>OP25Bが始まってから、ってもう大分前のことですが、
自前でmailを送るのは諦めて、
GMailを経由して送ってました。
でも、GMailを経由すると、
Fromが強制的に自分のaccountになっちゃうんですよね。
だから、例えば自前serverで定義したMLも、
上手く機能しなくなっちゃいました。
もうそういうのは自前でやる時代じゃないのかな、
と諦観してたんですけど、
<a href="http://mailgun.com">Mailgun</a>を使えばspfとかcleanにして外に出してくれるんですね。
今頃になって知ったので、試してみました。</p>
<h3>cf.</h3>
<ul>
<li><a href="http://mjhd.hatenablog.com/entry/defeat-ob25p-with-mailgun">Mailgunを使ってOB25P対策(postfix)</a></li>
<li><a href="https://community.rackspace.com/products/f/28/t/63">Postfix SMTP relay setup for Sendgrid/Mailgun</a></li>
<li><a href="https://documentation.mailgun.com/quickstart-receiving.html#how-to-start-receiving-inbound-email">How to start receiving inbound email</a></li>
</ul>
<h3>自分でちょっとハマったところ</h3>
<ol>
<li>postfixのmain.cfで、<code>relayhost = [smtp.mailgun.net]:587</code>
と[]で囲う必要があった事(でも囲わなくても行けるみたいですよ
<code>/etc/postfix/password</code>の方でも囲わなければ)</li>
<li>MyDNSにおいて、spfを指定する場合には、Hostに<code>_spf</code>と入れなければならないこと
(MyDNSのlocal ruleでした)</li>
<li>DKIM(domainkey)の指定がなかなか反映されなかったようであること
(その他の項目は全て反映されてたし、
<code>$ host -t txt ...</code>で引くと見えてたので、大丈夫だろうと思ってたんですが、
そうでもなかったようです。
小一時間待ったら、認識されました。
ここが通らないとVerifiedにならず、使えないので、途方に暮れかけました)</li>
<li>受信の設定はroutesなるものを設定しないとならないこと
(MXを直接自前serverに向ければいいんですが、
mailgunで受信するにはどうしたらいいんだろう?
と思っていると、そういうこと[=routesを設定する必要がある]だったんですね)
自分は、GMailにforwardするようにしました。
そうすればGMail見てるだけで済みますので。</li>
</ol>
<p>久し振りに自前serverのmail logを見たら、
中国からのbrute force attackがずっと続いていたことがわかりました。
嫌なので、mail serverは落として、
GMailへのforwardingにすることにしました。</p>
]]></content></entry><entry><title type="html"><![CDATA[more package-list in emacs on ubuntu]]></title><link href="http://u-ryo.github.io//blog/2015/11/12/more-package-list-in-emacs-on-ubuntu/"/><updated>2016-03-16T10:13:51+09:00</updated><id>/blog/2015/11/12/more-package-list-in-emacs-on-ubuntu/</id><content type="html"><![CDATA[<p>emacsでmarkdownを書く時に、
markdown-modeが欲しいと思ったので、
<code>list-package</code>したら、
なかったんですね選択肢に。
調べると、<code>.emacs</code>に、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(require &#39;package)
</span><span class='line'>(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;http://melpa.milkbox.net/packages/&quot;))
</span><span class='line'>(add-to-list &#39;package-archives &#39;(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))
</span><span class='line'>(package-initialize)
</span></code></pre></td></tr></table></div></figure>
<p>が必要でした。</p>
<p>cf.<a href="http://qiita.com/catatsuy/items/5f1cd86e2522fd3384a0">init-loader.el と package.el を導入して快適 Emacs ライフ</a></p>
<h3>Preview</h3>
<p>あと、emacsで書いてpreviewだけ別にしたいな、
と思ったぼくには、
Chromeの<a href="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl">Markdown Preview Plus</a>
extentionが便利でした。
install後、
Manage extentionsで「Allow access to file URLs」にチェックを入れないとならない、
というのがハマりポイントでした。</p>
<h3>PDFへの変換</h3>
<p><a href="https://gist.github.com/bouzuya/5989695">Pandoc で Markdown から PDF へ変換</a>にある通り、
apt-getで入るpandocを使えば楽かなぁと。
header.texが必要というのがtrickyですね。
これもLuaLaTeXで変換出来ました。</p>
<p>header.tex</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>\usepackage{luatexja}
</span><span class='line'>\setmainfont{TakaoPMincho}
</span><span class='line'>\setsansfont{TakaoPGothic}
</span><span class='line'>\setmonofont{TakaoGothic}
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ pandoc --latex-engine=lualatex -o /tmp/test.pdf -H ~/header.tex /tmp/test.md
</span></code></pre></td></tr></table></div></figure>
<h3>Table</h3>
<p><a href="http://www.tablesgenerator.com/markdown_tables">Table Generator</a>というのがあります。
orgtbl-modeは、よくわからないので使ってません。</p>
<h3>online editor</h3>
<p>ってうか、既にbrowser上でedit/preview出来るもの、あるじゃないですか。
もう古い記事ですが、
<a href="http://yoshimov.com/list/markdown-online-editor-list/#wripe">Webブラウザで使えるMarkdownエディタの比較</a>を見ますと、
今はもっとあるんでしょうね...
2015年の記事もありますね。<a href="http://shgam.hatenadiary.jp/entry/2015/01/11/032651">ブラウザ上で使えるMarkdownエディタ</a></p>
<ul>
<li><a href="https://wri.pe/">wri.pe</a></li>
<li><a href="http://dillinger.io/">Online Markdown Editor - Dillinger, the Last Markdown Editor ever.</a></li>
<li><a href="http://www.ctrlshift.net/project/markdowneditor/">Online Markdown Editor</a></li>
</ul>
<p>wri.pe凄いですね。
GitHub accountで入れますし、
スッと使えるinterfaceを感じます。</p>
]]></content></entry></feed>