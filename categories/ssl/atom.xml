<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/ssl/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Illegal keysize]]></title><link href="http://u-ryo.github.io//blog/2017/09/04/illegal-keysize/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/04/illegal-keysize/</id><content type="html"><![CDATA[<p>Androidで<a href="https://github.com/NanoHttpd/nanohttpd">NanoHTTPD</a>を
動かすprogramを開発しているんですが、
WebRTCにするのに、TLSが必要じゃないですか。
そのserver certを普通に作ると、<code>Illegal keysize</code>と言われて
key load時に落ちるのでハマりました。
<a href="https://github.com/NanoHttpd/nanohttpd#generating-an-self-signed-ssl-certificate">NanoHTTPDの解説</a>にあるように、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 360 -keysize 2048 -ext SAN=DNS:localhost,IP:127.0.0.1  -validity 9999
</span></code></pre></td></tr></table></div></figure>
<p>と作ってもダメでした。
色々調べると、AndroidにはBouncyCastle(BKS)でないとならないらしく、
証明書は面倒なのでsnakeoilを流用して、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo openssl pkcs12 -export -in /etc/ssl/certs/ssl-cert-snakeoil.pem -inkey /etc/ssl/private/ssl-cert-snakeoil.key -out ~/AndroidStudioProjects/SharedEye/ssl-cert-snakeoil.p12 -name ssl-cert-snakeoil
</span><span class='line'>$ /usr/lib/jvm/java-8-oracle/bin/keytool -importkeystore -deststorepass password -destkeypass password -destkeystore snakeoil.jks -srckeystore ssl-cert-snakeoil.p12 -srcstoretype PKCS12 -srcstorepass password -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk15-1.46.jar
</span></code></pre></td></tr></table></div></figure>
<p>とすると、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Problem importing entry for alias java.security.KeyStoreException: java.io.IOException: Error initialising store of key store: java.security.InvalidKeyException: Illegal key size.
</span></code></pre></td></tr></table></div></figure>
<p>と言われてimport出来ませんでした(→jksが作れませんでした)。
かなり悩んだのですが、結局<a href="http://qiita.com/mizuki_takahashi/items/cc26a7fd51aa04396e92">JavaでAES256を使用できるようにする</a>にあるように、
JCE(Java Cryptography Extension)を落としてきて
<code>local_policy.jar</code>を上書きしたら、
jksも出来て、Android側でも何事もなくloadしてくれました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Let's Encrypt without certbot-auto]]></title><link href="http://u-ryo.github.io//blog/2016/09/13/let-s-encrypt-without-certbot-auto/"/><updated>2017-08-22T10:04:50+09:00</updated><id>/blog/2016/09/13/let-s-encrypt-without-certbot-auto/</id><content type="html"><![CDATA[<p>Let's Encrypt、素晴らしいんだけど、
とあるserverで、使っているのがUbuntu 11.04(Natty)、
package systemが何か壊れてて、
依存関係がおかしくて解消できなくて、
というcaseがありました。
基本的にどこを調べても、
Let's Encryptを使うには既存のpackaging systemをbaseにしたものばかりで、
Stackoverflowなんかでも「backportsを使って既存のpackaging依存関係を
修築してから」なんていう話しかなくて。
なんかこう、<code>certobot-auto</code>を使わないで、
っていう話って意外となくて途方に暮れていると、
こんなのがありました。</p>
<p><a href="https://github.com/Neilpang/acme.sh">An ACME Shell script: acme.sh</a></p>
<p>要は、bashだけでLet's Encryptの証明書を使える、
というもので、
なーんだ最初から全部これでいーじゃん、
という感じです。</p>
<p><code>wget -O - https://get.acme.sh | sh</code>でも行けるというのですが、
何かserver certが違うらしく、<code>--no-check-certificate</code>を付けてもうまく行かず。
幸いgitはあってくれたので、cloneして<code>cd acme.sh</code> <code>./acme.sh --install</code>すると、
home直下に.acme.shというdirectoryを掘り、
その下にCSRやLet's Encryptからの証明書を自動で作ってくれる、
更に実行userでcron登録してくれる、
というものなので、実行だけならroot権限不要とはいえ、
証明書filesが一般user home directory以下というのもなんなので、
rootでやった方が良さげです。
というわけで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># git clone https://github.com/Neilpang/acme.sh
</span><span class='line'># cd acme.sh
</span><span class='line'># ./acme.sh --install
</span><span class='line'># ./acme.sh --issue -d dev.locationsupporter.info -w /var/lib/tomcat7/webapps/ROOT/
</span><span class='line'># vi /etc/apache2/sites-enabled/default-ssl
</span><span class='line'>=============================================
</span><span class='line'>SSLCertificateFile /root/.acme.sh/dev.locationsupporter.info.cer
</span><span class='line'>SSLCertificateKeyFile /root/.acme.sh/dev.locationsupporter.info.key
</span><span class='line'>SSLCertificateChainFile /root/.acme.sh/fullchain.cer
</span><span class='line'>=============================================
</span><span class='line'># crontab -l
</span></code></pre></td></tr></table></div></figure>
<p>これで、pytho2.7もpackage updateも不要だし、
更にお手軽にLet's Encryptを使えるというものでしょう。</p>
]]></content></entry><entry><title type="html"><![CDATA[Let's Encrypt]]></title><link href="http://u-ryo.github.io//blog/2016/08/02/let-s-encrypt/"/><updated>2017-08-22T10:04:50+09:00</updated><id>/blog/2016/08/02/let-s-encrypt/</id><content type="html"><![CDATA[<p><a href="https://letsencrypt.org/">Let's Encrypt</a>、
漸く使えるようになりました。
具体的にどうやって使ったらいいんだろう、
と思ってたんですが、結構簡単に使えますねこれ。
素晴らしい、です。
おかげでbotnetのC&amp;C server等でも広く使われるようになったとかってことですが。</p>
<p>ともあれ、
日本語の要諦サイト<a href="https://letsencrypt.jp/">Let's Encrypt 総合ポータル</a>もあり、
だいぶわかりやすくなってます。</p>
<p>基本的には、</p>
<ol>
<li><code>certbot-auto</code>を<code>git</code>又は<code>wget https://dl.eff.org/certbot-auto</code>で取得</li>
<li>認証原理は、<ol>
<li><code>certbot-auto</code>がLet's Encrypt側から指定された<code>http://.../.well-known/XXXXXX</code>にfileを作る</li>
<li>Let's Encrypt側がそのfileを<code>GET</code>、認証</li>
</ol>
</li>
<li>なので<code>standalone</code>(<code>certbot-auto</code>が臨時のhttp serverを建て、Let's Encryptからのrequestを受ける)が基本</li>
<li>その間本来のWWW serverを止めねばならないが、止めたくない時は「<code>--webroot</code>」で<code>DocumentRoot</code>を指定し、<code>certbot-auto</code>にfileを作らせる</li>
<li>初回の(というか最後に成功した)command optionsを<code>/etc/letsencrypt/</code>以下に保存しておき、次回以降「<code>renew</code>」commandでは省略可</li>
<li><code>renew</code>を付けて走らせても、証明書期限が30日を切っていないと発動しない(無理やり更新するには<code>--force-renew</code> optionが必要)</li>
<li><code>--post-hook</code>も指定して、apacheのreloadを自動化(これは<code>renew</code>が走らないと発動しない。単純に<code>renew</code>の終了status codeだと0になるので「&amp;&amp;」で繋ぐだけでは判別不能だった)</li>
<li>証明書取得がうまく行くと、<code>/etc/letsencrypt/live/someserver.co.jp/</code>以下に各種cert filesのsymbolic linkが作成されるので、<code>/etc/apache2/site-enabled/default-ssl</code>中で<code>SSLCertificateFile</code>等の示す先をここの<code>cert.pem</code>等にする(Apache2.4以上やnginxなら証明書＋中間CA証明書に<code>fullchain.pem</code>が使える)</li>
</ol>
<p>こちとら、apache2 serverを止めたくない状況だったので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ sudo cerbot-auto certonly --webroot -w /var/www/ -m support@company.co.jp -d someserver.co.jp --agree-tos
</span></code></pre></td></tr></table></div></figure>
<p>(<code>-w</code>: webroot-path, <code>-d</code>: domain, <code>-m</code>: mail address)</p>
<p>更新は、<code>/etc/cron.daily/certbot</code>を作って、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>#!/bin/sh
</span><span class='line'>cerbot-auto renew -q --post-hook &#39;service apache2 reload&#39;
</span></code></pre></td></tr></table></div></figure>
<p>で良さそうです。<code>sudo chmod a+x /etc/cron.daily/certbot</code>を忘れずに。</p>
<p><code>certbot-auto</code>は、実行するといきなり<code>apt-get update</code>してからpython2.7とか入れるのと幾つかのpackagesをupdateするので注意です。</p>
<p>また、Let's Encryptにしてから<a href="https://www.ssllabs.com/ssltest/">SSL Server Test</a>をかけてみると、「Incorrect SNI alerts」というのが出るようになりました。
これは、<code>/etc/apache2/site-enabled/default-ssl</code>の<code>&lt;VirtualHost _default_:443&gt;</code>に<code>ServerName XXXXXX</code>とすることで解決しました。
cf. <a href="https://www.rootlinks.net/2016/02/09/sslテストでincorrect-SNI-alertsを解決する/">SSLテストで”Incorrect SNI alerts”を解決する</a></p>
<h3>command log</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>wget https://dl.eff.org/certbot-auto
</span><span class='line'>chmod a+x certbot-auto
</span><span class='line'>sudo chown root:root certbot-auto
</span><span class='line'>sudo mv -i certbot-auto /usr/local/bin/
</span><span class='line'>sudo certbot-auto certonly --webroot -w /var/lib/tomcat7/webapps/ROOT/ -m ls-support@jmtech.co.jp -d cx4.locationsupporter.info --agree-tos
</span><span class='line'>sudo vi /etc/apache2/sites-enabled/default-ssl
</span><span class='line'>================================================
</span><span class='line'>	SSLCertificateFile /etc/letsencrypt/live/cx4.locationsupporter.info/cert.pem
</span><span class='line'>	SSLCertificateKeyFile /etc/letsencrypt/live/cx4.locationsupporter.info/privkey.pem
</span><span class='line'>	SSLCertificateChainFile /etc/letsencrypt/live/cx4.locationsupporter.info/chain.pem
</span><span class='line'>================================================
</span><span class='line'>echo &#39;#!/bin/sh&#39; &gt; certbot
</span><span class='line'>echo &quot;cerbot-auto renew -q --post-hook &#39;service apache2 reload&#39;&quot; &gt;&gt; certbot
</span><span class='line'>chmod a+x certbot
</span><span class='line'>sudo chown root:root certbot
</span><span class='line'>sudo mv -i certbot /etc/cron.daily/
</span></code></pre></td></tr></table></div></figure>
]]></content></entry></feed>