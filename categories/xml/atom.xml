<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/xml/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Returning XML from Spring Boot REST]]></title><link href="http://u-ryo.github.io//blog/2018/08/24/returning-xml-from-spring-boot-rest/"/><updated>2018-08-24T11:13:28+09:00</updated><id>/blog/2018/08/24/returning-xml-from-spring-boot-rest/</id><content type="html"><![CDATA[<p>Spring BootでRESTやってて、XMLでdataを返したいと。
<a href="http://blog.rakugakibox.net/entry/2014/11/23/java_spring_boot_rest">Java: Spring Boot で REST なアプリを作ってみる</a>を見てみて、
<code>@XmlRootElement</code>を付ければいい?
ついでにtag名がclass名と違うので、
<code>@XmlRootElement(name="annotation")</code>としました。</p>
<p>あと、<a href="https://projectlombok.org">Lombok</a>を使ったせいなのか、
各fieldに<code>@XmlElement</code>を付けないと、出て来ませんでした。
そういうもの?!</p>
]]></content></entry><entry><title type="html"><![CDATA[XML marshaling in Spring Boot]]></title><link href="http://u-ryo.github.io//blog/2018/08/17/xml-marshaling-in-spring-boot/"/><updated>2018-08-22T15:57:11+09:00</updated><id>/blog/2018/08/17/xml-marshaling-in-spring-boot/</id><content type="html"><![CDATA[<p>Spring Boot applicationで単一xml fileを返すREST作ってあって、
そこではxmlと同じ構造のJava bean作って返すだけで、
marshalingについてはframework側がよしなにやってくれました。
client側がHTTP Request Headerに<code>Accept: application/xml</code>とすれば。
そうでないとjsonになります。まぁそれはそれでいいんです。いいと思いました。</p>
<p>その後、複数xmlをまとめてZIPにして返すRESTを求められました。
そうすると、自分でXMLにmarshalingしなければなりません。
と、Gson?
でも<code>build.gradle</code>見ると折角jackson読み込んでいるようなので、
jacksonでmarshalしました。<code>new ObjectMapper()</code>して、
<code>mapper.write(ZipOutputStream)</code>みたいなことすると、
一回(=one file)書いただけでstreamを勝手に? closeするようなので、
一旦<code>String</code>にしてから<code>zos.write()</code>しました。
また、<code>build.gradle</code>に<code>compile "...jackson-dataformat-xml"</code>も必要でした。</p>
<p>しかしそうすると、今度はXMLを返すRESTの方で、
返されるXMLの形が微妙に違っていました。具体的には、</p>
<ol>
<li><code>@XmlRootElement(name=...)</code>で指定した名前が効かない</li>
<li>XML Object中で<code>List</code>要素がnestされる
(<code>&lt;object&gt;&lt;/object&gt;&lt;object&gt;&lt;/object&gt;...</code>だったのが
<code>&lt;object&gt;&lt;object&gt;&lt;/object&gt;&lt;object&gt;&lt;/object&gt;...&lt;/object&gt;</code>に)</li>
</ol>
<p><code>@XmlRootElement</code>はJAXBのannotation
(<code>javax.xml.bind.annotation.XmlRootElement</code>)で、
これが効かないというのだからJAXBが効いてないのだろうと思い、
そういえば<code>build.gradle</code>に<code>jackson-dataformat-xml</code>って書いたな、
というのを思い出し、
ZIP中でのXMLのmarshallingをJAXBのものでやるようにして
<code>build.gradle</code>から<code>jackson-dataformat-xml</code>を追い出したら、
元に戻りました。</p>
<p>JAXBでのmarshalling、ちょこっと面倒ですが、
<code>context = JAXBContext.newInstance(Bean.class)</code>して
<code>marshaller = context.createMarshaller()</code>作って、
<code>marshaller.marshal(bean, zipOutputStream)</code>すればいいんですね。</p>
]]></content></entry></feed>