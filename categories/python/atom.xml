<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/python/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2018-07-18T07:36:11+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Get Refresh Token for Google API]]></title><link href="http://u-ryo.github.io//blog/2023/09/10/get-refresh-token-for-google-api/"/><updated>2023-09-10T17:20:45+09:00</updated><id>/blog/2023/09/10/get-refresh-token-for-google-api/</id><content type="html"><![CDATA[<p>何かいつの間にかGoogle APIの認証方法が変わってて、security上の理由からというので仕方ないんでしょうけど。
<code>AUTHORIZATION_CODE</code>を得ようと、以前のように↓のURLにaccessすると、
https://accounts.google.com/o/oauth2/v2/auth?response<em>type=code&amp;client</em>id=...apps.googleusercontent.com&amp;redirect<em>uri=urn:ietf:wg:oauth:2.0:oob&amp;scope=https://www.googleapis.com/auth/photoslibrary&amp;access</em>type=offline
<code>アクセスをブロック: ... のリクエストは無効です</code>
と出て、あれ?!と。</p>
<blockquote><p>エラー 400: invalid_request
The out-of-band (OOB) flow has been blocked in order to keep users secure. Follow the Out-of-Band (OOB) flow migration guide linked in the developer docs below to migrate your app to an alternative method.
で、<a href="https://developers.google.com/identity/protocols/oauth2/resources/oob-migration?hl=ja">帯域外（OOB）フロー移行ガイド</a>へ誘導され。
このoobフローはなくなったと!? んじゃどうせぃっていうんじゃねん。
「デスクトップクライアント」に相当するから、<a href="https://developers.google.com/identity/protocols/oauth2/native-app?hl=ja#redirect-uri_loopback">ループバック IP アドレス（localhost または 127.0.0.1）フロー</a>に飛ばされたものの、こっちもなくなってて、<a href="https://developers.google.com/identity/protocols/oauth2/resources/loopback-migration?hl=ja">ループバック IP アドレスフローの移行ガイド</a>に飛ばされて、結局library使う方法しか書いてなくて。こちとら、shell scriptで使いたいんですけど。<code>refresh_token</code>欲しいだけなのに、なんでこんなに苦労せなかんの??🤔
...って嘆いても仕方ないので、library使って<code>refresh_token</code>取得だけします。
ちょっとめんどくさいんですけど、local環境を汚染しない形で。
参考:
- <a href="https://qiita.com/sey323/items/4c7140efaed750e690eb">PythonからGooglePhotoに画像や動画をアップロード</a>
- <a href="https://qiita.com/sey323/items/875c0ab1585044772ab2#%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BD%9C%E6%88%90">PythonからGoogleDriveにファイルをアップロード</a></p>
</blockquote>
<p>Google APIの<a href="https://console.cloud.google.com/apis/credentials">認証情報のpage</a>から「OAuthクライアントをダウンロード」して<code>client_secret.json</code>として保存。
``<code>
ここで</code>w3m<code>が開くので、</code>Q<code>を押して閉じるとURLが表示され、そこをChromeなりで開いて、突き進んで承認します。
そうすると、http://localhost:8080/?state=.... へ回されて止まるので、</code>C-a<code>で別screenを開いて、そこで</code>w3m 'http://localhost:8080/?state=...'<code>とすると、</code>The authentication flow has completed. You may close this window.<code>と言われます。徐に元のscreenに戻ると</code>credential<code>objectができているので、</code>credential.refresh<em>token<code>とすると、漸く</code>REFRESH</em>TOKEN<code>を得られます。1時間有効な</code>ACCESS_TOKEN<code>は</code>credentail.token`で得られます。
これらを使うと、やっと以前のようにshell scriptで回せるようになります。ふぅ。</p>
]]></content></entry><entry><title type="html"><![CDATA[Learn Python 3 the Hard Way]]></title><link href="http://u-ryo.github.io//blog/2019/01/24/learn-python-3-the-hard-way/"/><updated>2019-01-24T04:34:38+09:00</updated><id>/blog/2019/01/24/learn-python-3-the-hard-way/</id><content type="html"><![CDATA[<p>知人が<a href="https://www.amazon.co.jp/Learn-Python-Hard-Way-Introduction-ebook/dp/B07378P8W6">Learn Python 3 the Hard Way</a>を<a href="https://www.amazon.co.jp/Learn-Python-Hard-Way-%E6%9B%B8%E3%81%84%E3%81%A6%E8%A6%9A%E3%81%88%E3%82%8BPython%E5%85%A5%E9%96%80/dp/4621303287">翻訳しました</a>。
凄いなぁと思うと同時に、
見てみると既に<a href="https://learnpythonthehardway.org/">英語版</a>で<a href="http://blog.sayajewels.com/posts/janiota-python-practice/">勉強した人がいる</a>というので、
その人がやったという初心者用練習問題を、
ジャニヲタじゃないので、
というか初心者ではないので「一行で」やってみました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&gt;&gt;&gt; def average_age(members):
</span><span class='line'>...  return sum([x[2] for x in members])/len(members)
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; average_age([(&#39;s&#39;,&#39;s&#39;,35),(&#39;a&#39;,&#39;a&#39;,34),(&#39;n&#39;,&#39;n&#39;,34),(&#39;d&#39;,&#39;o&#39;,36),(&#39;j&#39;,&#39;j&#39;,34)])
</span><span class='line'>34.6
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def oldest_member(members):
</span><span class='line'>...  return max(members, key=(lambda x:x[2]))[0]
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; oldest_member([(&#39;s&#39;,&#39;s&#39;,35),(&#39;a&#39;,&#39;a&#39;,34),(&#39;n&#39;,&#39;n&#39;,34),(&#39;d&#39;,&#39;o&#39;,36),(&#39;j&#39;,&#39;j&#39;,34)])
</span><span class='line'>&#39;d&#39;
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def second_oldest_member(members):
</span><span class='line'>...  return sorted(members, key=(lambda x:x[2]))[1][0]
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; second_oldest_member([(&#39;s&#39;,&#39;s&#39;,35),(&#39;a&#39;,&#39;a&#39;,34),(&#39;n&#39;,&#39;n&#39;,34),(&#39;d&#39;,&#39;o&#39;,36),(&#39;j&#39;,&#39;j&#39;,34)])
</span><span class='line'>&#39;n&#39;
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def next_older_member(members, nickname):
</span><span class='line'>...  return min([a for a in members if a[2] &gt; [b for b in members if b[0]==nickname][0][2]],key=(lambda x:x[2]))[0]
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; next_older_member([(&#39;st&#39;,&#39;ms&#39;,19),(&#39;m&#39;,&#39;my&#39;,17),(&#39;k&#39;,&#39;nk&#39;,23),(&#39;f&#39;,&#39;kf&#39;,22),(&#39;sh&#39;,&#39;ss&#39;,20)],&#39;f&#39;)
</span><span class='line'>&#39;k&#39;
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; def check_future_age(current_members, future_members):
</span><span class='line'>...  return len({i[2]-j[2] for i,j in zip(current_members,future_members)}) == 1
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; check_future_age([(&#39;st&#39;,&#39;ms&#39;,19),(&#39;m&#39;,&#39;my&#39;,17),(&#39;k&#39;,&#39;nk&#39;,23),(&#39;f&#39;,&#39;kf&#39;,22),(&#39;sh&#39;,&#39;ss&#39;,20)],[(&#39;st&#39;,&#39;ms&#39;,22),(&#39;m&#39;,&#39;my&#39;,20),(&#39;k&#39;,&#39;nk&#39;,26),(&#39;f&#39;,&#39;kf&#39;,25),(&#39;sh&#39;,&#39;ss&#39;,23)])
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; check_future_age([(&#39;st&#39;,&#39;ms&#39;,19),(&#39;m&#39;,&#39;my&#39;,17),(&#39;k&#39;,&#39;nk&#39;,23),(&#39;f&#39;,&#39;kf&#39;,22),(&#39;sh&#39;,&#39;ss&#39;,20)],[(&#39;st&#39;,&#39;ms&#39;,22),(&#39;m&#39;,&#39;my&#39;,20),(&#39;k&#39;,&#39;nk&#39;,26),(&#39;f&#39;,&#39;kf&#39;,25),(&#39;sh&#39;,&#39;ss&#39;,24)])
</span><span class='line'>False
</span></code></pre></td></tr></table></div></figure>
<p>あぁ、なんてアホなことに時間と頭を使ってしまった...</p>
<p><code>min</code>、<code>max</code>、<code>sorted</code>ってリスト内包表記で出来ないんですか?</p>
<p>印税は初版で20〜30万、あとは増刷でガッポガッポ、だそうです。
1年半かかったって。お疲れさまでした。
ぼくも販促に協力しましょうかね。
そしておこぼれにあずかれれば!</p>
]]></content></entry><entry><title type="html"><![CDATA[Python Basic Web Server for Applying keras Model]]></title><link href="http://u-ryo.github.io//blog/2018/09/14/python-basic-web-server-for-applying-keras-model/"/><updated>2018-09-15T17:34:45+09:00</updated><id>/blog/2018/09/14/python-basic-web-server-for-applying-keras-model/</id><content type="html"><![CDATA[<p>VGG16をfine tuningしたmodelを簡単にapply(predict)するsystemが
NotePC程度で動くことを証明したく、
PythonのBaseHTTPServerで1日でちゃちゃっと作りました。</p>
<p>といっても「PythonのBaseHTTPServer」なんて触るの初めてです。
<a href="https://gist.github.com/bradmontgomery/2219997">bradmontgomery/dummy-web-server.py</a>を参考にしました。
なるほど、classを定義して、<code>BaseHTTPRequestHandler</code>を引数にして、
<code>do_GET</code>や<code>do_POST</code>を書くわけですね。
routingは自分でやれと。面倒なのでmethodで分けました。
このsystem自体をone fileで済ませたかったので、
<code>GET</code>で<code>index.html</code>を返したいと思い、
そのためにはhere documentを書きたいな、
と思ったので、
<a href="https://qiita.com/ykhirao/items/c7cba73a3a563be5eac6">Pythonのヒアドキュメント</a>を参考に、
あぁ、普通に<code>'''</code>(single quote 3つ)でいいのね、とわかりました。
single quoteでも中で変数展開されるんですね。へー。
<a href="http://d.hatena.ne.jp/matasaburou/20151003/1443882557">PythonでJSONを受けて処理をする</a>を参考に、
<code>POST</code>時のparameter(=request body)の受け取り方を。
HTTP Request Headerの<code>Content-Length</code>を<code>int</code>として記憶し、
<code>self.rfile.read()</code>でそのbyte分読んで、
<code>decode()</code>でstringにすると。
parameterizedされるわけではなく、bodyがまるっと読まれるので、
parameterで分けるのは自分でやれということですね。</p>
<p>あと、base64として来た文字列をdecodeして<code>Image</code>化するには、
先頭の<code>image/jpeg;base64,</code>を除去し(<code>replace()</code>)て純粋にBase64文字列だけにし、
<code>base64.b64decode(content)</code>したものを<code>io.BytesIO()</code>し、
それを<code>Image.open()</code>すると。</p>
<p><code>predict()</code>したものは2次元配列になっているので、
0番目の<code>argmax()</code>したものが答えの添字、なのですね。</p>
<p>ともあれ、このpython predict server script 1つと
keras model fileの2 filesだけでサクッと動くものを、
<a href="https://github.com/u-ryo/python_prediction_server">github</a>に置きました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Push Notification from command line by ntfy]]></title><link href="http://u-ryo.github.io//blog/2018/08/24/push-notification-from-command-line-by-ntfy/"/><updated>2018-08-24T21:29:23+09:00</updated><id>/blog/2018/08/24/push-notification-from-command-line-by-ntfy/</id><content type="html"><![CDATA[<p>コマンドラインからPush通知が出来るというのでやってみました。
(<a href="https://qiita.com/kjtanaka/items/8b0c90d28909e50e4a6d">Linuxのコマンドラインやスクリプトからスマホにプッシュ通知する。（ntfyというツールの紹介）</a>)
<a href="https://www.pushbullet.com/">PushBullet</a>を使ってみました。
ChromeやFirefoxだとextension、
スマホだとアプリを入れます。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo apt install python-pip
</span><span class='line'>pip install ntfy
</span></code></pre></td></tr></table></div></figure>
<p>で<code>ntfy</code>を入れ、<code>~/.ntfy.yml</code>にPushBulletのaccess_tokenを入れ、
<code>~/.local/bin/ntfy -t 'Title' send 'notification contents'</code>
とすると、送れました。
スマホ側の音とか振動は、アプリでの設定にて調整可能です。</p>
<p>最初よくわかってなかったのですが、
PushBulletのアプリを入れると、
電話帳やSMS(Short Message Service)もぶっこ抜いてくるんですね。
それと知らずにSMS送ってしまい、相手に不審がられてしまいました。</p>
]]></content></entry><entry><title type="html"><![CDATA[learning ruby and python3]]></title><link href="http://u-ryo.github.io//blog/2017/08/29/learning-ruby-and-python3/"/><updated>2018-07-18T07:36:11+09:00</updated><id>/blog/2017/08/29/learning-ruby-and-python3/</id><content type="html"><![CDATA[<p>paiza learningの<a href="https://paiza.jp/works/ruby/primerfemale">Ruby入門編</a>のコース、一部が期間限定無料だったので、やってみました。
女の子の声、何かいいですね。
内容は「入門編」だけにifやloopやarray等ホントに基本的なことで、ぼくには易しすぎですけど、演習問題で学習内容を確認出来るのがいい感じです。ただ、まだ有料部分もあり、そういう所は動画が見られないのは当然としても、演習問題も出来ないとは。
物足りないので、<a href="https://paiza.jp/works/python3/primer">python3の入門編</a>もやっちゃいました。こちらは全編無料ですし。でも、やっぱりホント基本的なことですね。あと、rubyとpython、同時にやるもんじゃないです。<code>puts</code>とか<code>print</code>は勿論、<code>gets</code>と<code>input()</code>、<code>elsif</code>と<code>elif</code>等、色々ごっちゃになっちゃいます。rubyの方が後発のいいとこ取りなだけに、配列範囲外アクセスでもエラーにしない等洗練されてる印象。ただ、<code>puts</code>や<code>gets</code>は英語がヘン、というか独特な気が。日本人だから? 紹介されてたrubyのfor loop(<code>each do |x| ... end</code>)は、<code>do</code>と書かないで<code>each{|x|...}</code>と書けばJava8のStreamingと同じなんですね。<code>each</code>って<code>map</code>とかと同じ。なるほど、最初からそうなってるんだ、と納得です。</p>
]]></content></entry></feed>