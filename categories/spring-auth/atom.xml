<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/spring-auth/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Spring Auth and JWT behind the reverse proxy]]></title><link href="http://u-ryo.github.io//blog/2018/08/27/spring-auth-and-jwt-behind-the-reverse-proxy/"/><updated>2018-08-27T18:08:50+09:00</updated><id>/blog/2018/08/27/spring-auth-and-jwt-behind-the-reverse-proxy/</id><content type="html"><![CDATA[<p>JHipsterのSpring Authなapplicationを
httpsのreverse proxy(nginx)の後ろに置いて、
GoogleのOAuth2でJWTな認証をしようとしました。
当然、backend serverからはGoogle APIに自分のhost名でaccessするような
URLを返してしまい、Google APIから戻ってきたところでJWT認証は弾かれます。
backend serverはfrontend serverの名前を知らないんですから、
そりゃあ当然です。
こういうreverse proxyの後ろにbackend server置いてOAuth2 + JWTなんて
そもそもダメなの? 何とかならないの?
と調べてみると、
<a href="https://stackoverflow.com/questions/31834278/spring-boot-and-oauth2-redirect-url-over-reverse-proxy">Spring Boot and OAuth2: redirect url over reverse proxy</a>に、
reverse proxy側で<code>X-Forwarded-Port</code>とかのproxy用HTTP Response Headerを設定し、
Spring application側で<code>server.use-forward-headers=true</code>にすればいいよ、
とあったので、
じゃぁnginxではどうやるのだろうと調べると、
<a href="https://qiita.com/HeRo/items/7063b86b5e8a2efde0f4">Nginx のリバースプロキシ設定のメモ</a>にありました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server {
</span><span class='line'>  listen 80;
</span><span class='line'>  server_name hoge.com;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>    index index.html index.htm;
</span><span class='line'>    proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>    proxy_set_header Host $http_host;
</span><span class='line'>    proxy_redirect off;
</span><span class='line'>    proxy_pass http://127.0.0.1:3000;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>この通りやってみると、
何故かGoogle APIには<code>http://proxy-server/...</code>で渡っており、
じゃぁっていうんで<code>proxy_set_header X-Forwarded-Proto https;</code>
とベタ書きしてみてもダメで、
うーんとか思っていると、
<a href="https://blog.akagi.jp/archives/3883.html">nginx でリバースプロキシするときの Tips</a>に<code>off</code>じゃなくて<code>proxy_redirect http:// https://;</code>という記述があったので、
試してみると、上手く行きました。
あーちなみに、<code>proxy_set_header X-Forwarded-Proto https;</code>も
ベタ書きじゃないとダメでした。
結局うちの場合は、以下の通りになりました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server {
</span><span class='line'>        listen 80 default_server;
</span><span class='line'>        listen [::]:80 default_server;
</span><span class='line'>
</span><span class='line'>        # Everything is a 404
</span><span class='line'>        location / {
</span><span class='line'>                proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>                proxy_set_header X-Forwarded-Proto https;  
</span><span class='line'>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>                proxy_set_header Host $http_host;
</span><span class='line'>                proxy_redirect http:// https://;
</span><span class='line'>                proxy_pass http://walt.mydns.bz:10022/;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        # You may need this to prevent return 404 recursion.
</span><span class='line'>        location = /404.html {
</span><span class='line'>                internal;
</span><span class='line'>        }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>でも、これでGoogle APIから無事戻ってくるようにはなったものの、
その後「No-providerで登録」になってしまい、
まだ完成しません。
ただ、その問題は別のもののようで、一歩は進んだと思うので、記事にしました。</p>
]]></content></entry></feed>