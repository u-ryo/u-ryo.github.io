<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/vulnerability/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Tomcat vulnerability CVE-2017-12617]]></title><link href="http://u-ryo.github.io//blog/2017/10/13/tomcat-vulnerability-cve-2017-12617/"/><updated>2017-10-13T12:13:30+09:00</updated><id>/blog/2017/10/13/tomcat-vulnerability-cve-2017-12617/</id><content type="html"><![CDATA[<p><a href="https://oss.sios.com/security/tomcat-security-vulnerabiltiy-20170920">Tomcatの複数の脆弱性(CVE-2017-12617, CVE-2017-12615 , CVE-2017-12616)</a>が、範囲が広がって出てました。
<code>readonly initialization parameter</code>を<code>false</code>にして<code>PUT</code>を有効化している時にaffectする(任意のjsp fileを不正に<code>PUT</code>してから好き放題する)、とのことなので、きょうびはRESTで<code>PUT</code>多用するから影響範囲広いんでしょうか? 否、「default servletのinitialization parameter(具体的には<code>web.xml</code>の<code>servlet</code>tagの<code>init-param</code>)で<code>false</code>を明示した時(defaultは<code>true</code>)なので、殆どのところはそんなことしてないから大丈夫なんじゃないでしょうか。
実際、<a href="https://github.com/cyberheartmi9/CVE-2017-12617">POC</a>で試してみたところ、うちのsiteは(version的には範囲内ですが)<code>Not Vulnerable to CVE-2017-12617</code>と出ました。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ python tomcat-cve-2017-12617.py -u http://localhost:8080
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   _______      ________    ___   ___  __ ______     __ ___   __ __ ______ 
</span><span class='line'>  / ____\ \    / /  ____|  |__ \ / _ \/_ |____  |   /_ |__ \ / //_ |____  |
</span><span class='line'> | |     \ \  / /| |__ ______ ) | | | || |   / /_____| |  ) / /_ | |   / /
</span><span class='line'> | |      \ \/ / |  __|______/ /| | | || |  / /______| | / / &#39;_ \| |  / /
</span><span class='line'> | |____   \  /  | |____    / /_| |_| || | / /       | |/ /| (_) | | / /
</span><span class='line'>  \_____|   \/   |______|  |____|\___/ |_|/_/        |_|____\___/|_|/_/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[@intx0x80]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Poc Filename  Poc.jsp
</span><span class='line'>Not Vulnerable to CVE-2017-12617
</span></code></pre></td></tr></table></div></figure></p>
]]></content></entry><entry><title type="html"><![CDATA[Vulnerability POC site]]></title><link href="http://u-ryo.github.io//blog/2017/10/05/vulnerability-poc-site/"/><updated>2017-10-13T11:58:21+09:00</updated><id>/blog/2017/10/05/vulnerability-poc-site/</id><content type="html"><![CDATA[<p>各種POCがありました。</p>
<ul>
<li><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">各漏洞poc、Exp的收集或写</a></li>
</ul>
<p>特にStruts2については、↓にあります。</p>
<ul>
<li><p>https://github.com/coffeehb/Some-PoC-oR-ExP/tree/master/Struts2</p>
</li>
<li><p><a href="https://www.mbsd.jp/blog/20170904.html">Apache HTTP Serverのバージョンを当てる方法</a>
bannerは信じちゃダメですよね。ぼくも対策を求められて面倒くさかったのでbinaryを偽装した覚えがあります。</p>
</li>
<li><p><a href="https://www.lac.co.jp/lacwatch/alert/20170906_001382.html">Apache Struts 2における脆弱性 (S2-052、CVE-2017-9805)は悪用可能と確認</a> に、「既に攻撃コードが公開されており、中国のWebサイトでは URL を入力するだけで脆弱性の有無をチェックするサイトも登場しています」とあるのですが当該サイトの画像だけでlinkが無かったので、探してもらいました。↓</p>
</li>
<li><p><a href="https://www.seebug.org/monster/">Seebug Vulnerability Scan Online Tomcat代码执行漏洞(CVE-2017-12615)</a><br  />
ただ、↑を試したところ、loginしてないと試せなくて、sign upするには電話番号とSNS codeまで必要なので、諦めました。</p>
</li>
<li><p><a href="http://mkt-eva.hateblo.jp/entry/2017/09/11/020530">Apache Struts 2の脆弱性(S2-052)や(S2-053)についてのまとめてみた。</a> POCへのlinkがありました。</p>
</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Personal Information Leak Incident]]></title><link href="http://u-ryo.github.io//blog/2017/09/16/personal-information-leak-incident/"/><updated>2017-09-28T14:11:37+09:00</updated><id>/blog/2017/09/16/personal-information-leak-incident/</id><content type="html"><![CDATA[<p>先日派遣先で、5万数千件にのぼる個人情報漏洩を見付けてしまいました。</p>
<p>その会社ではチンケなECサイトをやってるんですけど、
といっても再販の再販までされてて何百人にも使われちゃってますが、
中身は2000年代前半〜中盤のcode。未だにJSP(一部Java)。
今やもうJavaEEから外れたっていうのに。
OSやlibrary、middlewareもsupport切れで無いものは無いという。
http/https混在、userのpasswordもDBに平文で保存してるくらい、
設計思想からして古いままのものです。WAFも入ってないといいますし。
早晩、こんなことが起こるだろうと傍で見ていて思っていましたが、
現実になり、しかも発見者がぼくだとは。
ぼく一応これ、部外者なんですけど。
同じように派遣されててそっちも手伝っている同僚から、
こんなaccessが沢山来てるってattack patternを見せられて。
不覚にも最初は一般的な定期巡回sql injectionかと思ってました。
Googleで調べると、<a href="https://serverfault.com/questions/541401/mysql-injection-attacks-random-urls-causing-errors">そういうのが載ってた</a>んです。</p>
<p>(<a href="https://github.com/ron190/jsql-injection">jsql-injection</a>
かとも思ったんですが、試してみるとちょっと違うかも。
Havij ProはWindowsだしちょっと怖いので入れてません)</p>
<p>ともあれ、だから単なる下調べ的なattackかと思ってました当初は。
しかし、</p>
<ol>
<li>IP遮断してもIP変えてやって来るくらいしつこい(IP元はHK,US,JP,CN,UK等々)</li>
<li>しかも同じようだが微妙に違うrequestを大量にする</li>
</ol>
<p>というところからすぐにピンとくるべきでした。
翌週になって、そういえば見せられたqueryに
このサイト固有の名前が入っていたな、
というところから、ちょっと実際に叩いてみたんですね。
そしたら...</p>
<p>あらま。</p>
<p>確かによく見たらqueryの中に「MAIL、PASSWD、TEL」の文字が。
見事に抜かれてました。
各queryの違いは、<code>lImIt</code>の数。
これを変えて、順々に取って行ってたんですね。
後でわかったことですが、固有名が無くても<code>information_schema</code>から
table名1個ずつ抜けるんですね。</p>
<p>attackがあったのが木曜、ぼくが気付いたのが翌週月曜、
log解析依頼されて、調べてみるとMAIL AddressとかPASSWDが5万数千件は
抜かれてました。
その他、抜かれてたのはショップ運営者の方のID、MAIL、PASSWDも。
それは6月19日に起きてました。
今までずっと気付いてなかったという。
再販先と連絡取って、すぐサイト全体落としたんですけど、
全体をこれまでのオンプレミスサーバ群からクラウドに移行したということで、
また再開したそうです(WAFは入れると言ってはいましたが)
(しかも移行したといってもミスがあるらしくすぐにはうまく行っていないとかで、
自分でやっといて直せないなんてアホの極みだと。
その不具合修正をぼくに求めてくるという。
確かにぼくはJava expertなので、
なんで見当違いのところで騒いでるのかくらいの指摘はしてあげましたけど、
自分の尻くらい自分で拭ったらどうですか?と)。</p>
<p>色々信じられません。</p>
<p>元々彼らの思考には付いていけてなくて。
今自分がやらされているprojectの方でも、
serverのlogic追ってったら「これ認証無いですよ」
って言っても改善せずそのまま、
他人の電話番号とか情報を抜けるPOC作って示しても、
「そのPOC書くのにどのくらい時間かけた?」とか聞いてくる始末。
もう匙投げてました。
っていうか、こんな人もいるんだ、と勉強になりました。
更に言えば、日本のsecurity意識って一般的にはこんなもんなんでしょうか。</p>
<p>本当は、この実態を再販先等に告発した方が社会正義のためだと
思うんですけれども、
西宮冷蔵社長の例を鑑みても告発者が報われない社会なのは明らかなので、
黙っているしか無いのかと悲しい思いをしています。</p>
<p>早くこんなとこから抜け出さないと、イケマセン。</p>
]]></content></entry></feed>