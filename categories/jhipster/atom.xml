<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/jhipster/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-28T21:21:17+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[unit test on jhipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/23/unit-test-on-jhipster/"/><updated>2018-03-23T23:24:05+09:00</updated><id>/blog/2018/03/23/unit-test-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでのunit testでいくつかハマったのでメモ。</p>
<ul>
<li><p>unit test実行は<code>gradle test</code></p>
</li>
<li><p>単一test classを指定するには<code>gradle test --tests FQDN.class.name</code></p>
</li>
<li><p>test class内の<code>log.debug(...)</code>を出力するには、<code>build.gradle</code>に<code>test.testLogging.showStandardStreams = true</code>を記述し、また<code>src/test/resources/application.yml</code>に以下を記述(<code>src/main/resources/application-dev.yml</code>には記述あり)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>logging:
</span><span class='line'>    level:
</span><span class='line'>        ROOT: DEBUG
</span><span class='line'>        bz.mydns.walt.canmatch: DEBUG
</span><span class='line'>        io.github.jhipster: DEBUG
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>test classにおいてRESTで認証したuserを表したい時には<code>@WithMockUser</code>(<code>import org.springframework.security.test.context.support.WithMockUser;</code>)</p>
</li>
<li><p>testされる側のREST methodでは、<code>java.security.Principal</code>を勝手に引数に加えることでlogin userを取得出来、それをtestする場合にはtest classの<code>MockMvc</code>で<code>restUserInfoMockMvc.perform(post("/api/user-infos")...)</code>などとする時に<code>org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user</code>を使って<code>.user("foo")</code>とすると、認証された"foo"というuserでのaccessをmock出来るが、<code>org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication()</code>というstatic methodで<code>java.security.Principal</code>が取れ、それに<code>.getName()</code>で名前を取得可能。その方がspringっぽいのかな。test class側では、認証accessが必要なmethodに上記の<code>@WithMockUser</code>をつければ良い。<code>@WithMockUser(username="foo", password="pw", roles={"USER"})</code>などとすれば色々指定可能だが基本的には不要</p>
</li>
</ul>
<h3>参照</h3>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/4.2.5.BUILD-SNAPSHOT/apidocs/org/springframework/security/test/context/support/WithMockUser.html">WithMockUser</a></li>
<li><a href="https://qiita.com/opengl-8080/items/eaa8f4eb9286a3df7986">Spring Security 使い方メモ　テスト</a>(2017-08-02)</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html">11. Testing Method Security</a>(Spring公式doc)</li>
<li><a href="https://ishiis.net/2016/11/12/spring-boot-security-unit-test/">Spring Securityを使っているWebアプリのUnitテスト</a>(2016/11/12)</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/01/30/jhipster/"/><updated>2018-01-31T21:52:58+09:00</updated><id>/blog/2018/01/30/jhipster/</id><content type="html"><![CDATA[<p>ここんとこPWA(Progressive Web Application)作ろうとしていて、
ずっとJEEかなぁって思ってたんですけどSpringの勢いが凄くて、
それと今ならSPAでぼくはAngular派なので、
それに今時認証は自分でやりたくないよねとOAuth2で、
連動させるの大変だなぁとかって思ってたら、
そういうの全部ひっくるめた<a href="http://www.jhipster.tech/">JHipster</a>というのがあるんだ!
というのが衝撃でした。
かなり前からあったんですね。</p>
<p>ただこれ難しいですね。
scaffoldingまでは簡単ですけど、
そこからどうしていいのか。
自動生成filesはなるべく弄りたくないですが、
そうもいかないですよねこれ。
samplesも、「そこから先」についてはなかなか。
<a href="https://www.infoq.com/minibooks/jhipster-4-mini-book">JHipster Mini-Book 4.0</a>も見てみましたものの、それをなぞって行けるわけでは無かったので。
scaffoldingと、JDLでentities作って、
<code>jhipster spring-controller Foo</code>や<code>ng g component Bar</code>とかのcommandで取っ掛かりを作って、
そこから作り込んでいく、感じでしょうか。</p>
<p>Angular CLIがうまく動かなかった等あったのでメモ。
jhipsterのversionが変われば、こんな知識も不要になると思われますが。</p>
<ul>
<li>JDLでfield名はsnakeやhyphenationではなくcamelで。
DBだからhyphenかなと思ったんですが、
生成されたclassのfield名がcamelにならなかったので。</li>
<li>JDLでUserは特別なentity。
<a href="http://www.jhipster.tech/managing-relationships/">Manual</a>に書いてありました。
scaffoldingの次は取り敢えず
<a href="https://start.jhipster.tech/jdl-studio/">JDL Studio</a>でentity作成、import、
になるのに、解説すっ飛ばしてJDL見たので、なんだろう?って思うんですよね。</li>
<li>jhipster 4.13.3で入るAngular CLI(<code>./node_modules/@angular/cli/</code>)のversionは
1.6.0(<code>package.json</code>)でbug持ち(<code>@angular-devkit/core</code>が入らない)なので、
<code>ng g ...</code>が失敗します。<code>package.json</code>中の<code>@angular/cli</code>の
version numberを最新のもの(本執筆時点では1.6.6)に書き換え、
<code>yarn install</code>するとうまく行きました
(Angular CLIをglobalでinstallしてもlocalのversionのモノを使うのでダメ、
<code>@angular-devkit/core</code>を個別に<code>npm install ...</code>しても、
次から次へと足りないものが出て来て、
全部入れた挙句の果てに<code>yarn start</code>がコケるようになるのでダメ)。</li>
<li><code>ng g component Foo</code>としてそれを表示させるにはどうしたらいいんだろう? と悩みました。route作ってそこで表示させるべく、他のentityとか見よう見真似で<code>foo.route.ts</code>作ってpath直打ちして試したものの、表示されず。errorも何も出ないので、何が悪いのか分かりません。多分登録が届いてないんだろうとは思ってたんですけど、具体的にどこをどう直せばいいのかわけわかめです。<a href="https://stackoverflow.com/questions/46587247/adding-new-route-to-jhipster-using-angular-4">StackOverflow</a>に回答があったので出来ました。結局、0.<code>ng g component Foo</code>でcomponentを作る 1.<code>foo.route.ts</code>を作る(その際<code>Routes</code>で配列にするのではなく<code>Route</code>で単数に?) 2.<code>index.ts</code>を真似して作る(<code>foo.module</code>のimportは記載不要) 3.<code>foo.module.ts</code>を作る 4.<code>app.module.ts</code>に登録(その際Angular CLIが自動登録したcomponentは削除しないとtop pageが表示されず) →そもそもcomponentではなくmoduleをgenerateするべきだったのでしょうか。よくわかりませんが、scaffoldingの後のことはなかなか書いてないので、「こんなのわかんないよー」という感じです。</li>
</ul>
<p>JHipsterは「Java/Angular版Rails」か! とも思ったんですが、
もう出てだいぶ経つみたいですし、
でもまだそこまで洗練されてはいないのかなと。
Angularの難しさ、面倒臭さ、
とnode modules周りの変化が激しいのもあるためか、
使いこなすのはなかなか大変だと思います。</p>
]]></content></entry></feed>