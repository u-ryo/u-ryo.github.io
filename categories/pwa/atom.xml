<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/pwa/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[service worker on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/08/28/service-worker-on-jhipster/"/><updated>2018-08-28T14:16:41+09:00</updated><id>/blog/2018/08/28/service-worker-on-jhipster/</id><content type="html"><![CDATA[<p><a href="https://jhipster.tech">JHipster</a>でService WorkerでWeb Pushを、
と思っていて、<a href="https://angular.io/">Angular</a>だから、
<a href="https://u-ryo.github.io/blog/2018/03/19/push-notification-on-angular5/">前やった</a>ように
<code>app.modules.ts</code>で<code>ServiceWorkerModule.register('./service-worker.js',...);</code>してから<code>@angular/service-worker</code>で<code>SwPush</code>をinjectして、
って思ってたんですが、違うんですね。
JHipsterでは<a href="https://developers.google.com/web/tools/workbox/">workbox</a>でService Worker使うようになってるんですね予め。
確かに<code>index.html</code>で<code>service-worker.js</code>を有効にして挙動を見てると、
cachingは綺麗に行っている様子です。
えーでも調べてみると、workboxってWeb Pushはないじゃーないですかー。</p>
<blockquote><p>特に私の知っている範囲ではworkboxはプッシュ通知のロジックを作ってくれないので、そこは自分で書いてやる必要があります。
<a href="https://qiita.com/nazonohito51/items/32b61cabdac8b24769bd">ServiceWorkerを簡単に書けるworkbox-swの使い方</a></p>
</blockquote>
<p>しかも、自分のcodeとmergeする、
即ち<code>workboxPlugin(...)</code>に<code>swSrc:</code>を追加すると、
<code>generateSW</code>が使えず自分で書かないといけないの!? ですか?
いやー、jhipsterで生成される<code>service-worker.js</code>とか見ると、
色んなfilesにhash値?が付与されているから、
これを自分で作るというのはあり得ないでしょー。
どーしたらいーのー?!</p>
<p>と、途方に暮れました。</p>
<p>workboxを捨ててAngularのSwPushにする?
いやー、でもjhipsterでのbuildでは<code>ng</code>実行されないので、
いくら<code>.angular-cli.json</code>に<code>"serviceWorker": true</code>と書いても効かないんですよー。
Angularのservice workerは生成されないわけですね。</p>
<p>jhipsterで生成された<code>build/www/service-worker.js</code>を見ていると、
上部のコメントに、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> * The rest of the code is auto-generated. Please don&#39;t update this file
</span><span class='line'> * directly; instead, make changes to your Workbox build configuration
</span><span class='line'> * and re-run your build process.
</span><span class='line'> * See https://goo.gl/2aRDsh
</span></code></pre></td></tr></table></div></figure>
<p>とあります。言われるままに<a href="https://goo.gl/2aRDsh">そのURL</a>を見てみると、
<code>importScripts</code>というoptionがあることがわかりました。
これを指定するとどうなるのかなー、試してみます。
指定する場所は、webpackでworkboxのservice worker生成をやっているので、
<code>webpack/webpack.prod.js</code>になります。
それの最下段、<code>new WorkboxPlugin.GenerateSW({...})</code>の中に
<code>importScripts: ['push-notifications.js']</code>と書いてみると、
自動生成された<code>build/www/service-worker.js</code>中に、
<code>importScripts("push-notifications.js",...)</code>と出ます。
なるほど。
ではこの<code>push-notifications.js</code>というのを作ってwww root folderに置き、
そこにpush notificationのlogicを書いておけばいいんじゃーん。
でも、基本的には全てのfile名はhash化?されてしまいます。
どうやって名前をhash化されないようにするの?!
<code>favicon.ico</code>等の例から手探りで探し当てました。
<code>webpack/webpack.common.js</code>の<code>new CopyWebpackPlugin([..])</code>に
書いておけばいーんですね。なるほど。</p>
<p>結局要するにworkboxの<code>importScripts</code>を使うということで、具体的には、</p>
<ol>
<li><code>src/main/webapp/push-notification.js</code>にWeb Push通知時の処理<code>addEventListener('push', function(event) {...});</code>と通知をclickした時の処理<code>addEventListener('notificationclick', function(event) {...});</code>を書いておく</li>
<li><code>webpack/webpack.prod.js</code>の<code>new WorkboxPlugin.GenerateSW({...})</code>に<code>importScripts: ['push-notifications.js']</code>を書く</li>
<li><code>webpack/webpack.common.js</code>の<code>new CopyWebpackPlugin([..])</code>に<code>{ from: './src/main/webapp/push-notifications.js', to: 'push-notifications.js' },</code>を書く</li>
</ol>
<p>で目出度くJHipster application上でのWeb Push通知が出来ました。</p>
<p>尚、通知の許可を求める処理やendpoint、auth、publicKeyを求める処理では、
Angularの<code>SwPush</code>を使うことが出来ます。
JavaScriptでゴリゴリ書かなくても<code>this.swPush.requestSubscription()</code>だけで済むのでラクです。</p>
]]></content></entry><entry><title type="html"><![CDATA[Web Push Notification for PWA]]></title><link href="http://u-ryo.github.io//blog/2018/02/18/web-push-notification-for-pwa/"/><updated>2018-02-27T10:31:43+09:00</updated><id>/blog/2018/02/18/web-push-notification-for-pwa/</id><content type="html"><![CDATA[<p>PWAの売りとしてWeb Push Notificationが出来るのはつとに聞いていましたが、
具体的にどうやるんだろう? と思ってました。
仕組みから考えて、WebSocketが必須なのかな?
とかって勝手に思ってたんですが、違うんですね!
「やってみた」系の記事見て、Firebaseを使うものばっかりだったので、
えーっ! Firebase hosting必須なの?!
と思いきや、
VAPID(Voluntary Application Server Identification)も
あるということで一安心。
あーでも、別にFCM(Firebase Cloud Messaging)をhostingじゃなく使うことも出来るので、
その方が楽なのかな。
browser毎じゃなくてuser毎に送れるっていうし。
でもvendor lock onも嫌なので、
VAPIDからやってみました。</p>
<p>Web Pushの仕組みは、<a href="https://ajike.github.io/how-pwa-push-works/">PWAのプッシュ通知の仕組み</a>がよくまとまってました。
PWAとWeb Push Notificationは別なんですね。</p>
<p>browser上からは、<a href="https://gauntface.github.io/simple-push-demo/">Push Demo</a>などですぐ試せます。</p>
<p>自分の手に馴染ませないとよくわからないので、<a href="https://github.com/u-ryo/my_web_push">作ってみました</a>。</p>
<ol>
<li>push server側で、VAPIDのkey(public, private)を決めておく。key generationは、<a href="https://github.com/web-push-libs/web-push/">web-push</a>の<code>client.js</code>をcommand lineから使って<code>$ node_modules/web-push/src/cli.js generate-vapid-keys</code>とせよ、とか<a href="https://dzone.com/articles/web-push-notifications-1">書いてあるもの</a>も他に多くありましたが、Googleの<a href="https://developers.google.com/web/fundamentals/codelabs/push-notifications/">Adding Push Notifications to a Web App</a>にあるように<a href="https://web-push-codelab.glitch.me/">Push Companion</a>で簡単に作れますね。試しに作ってみたものではscriptで毎回自動生成してclient(=web browser, html and javascript側)に読ませてみるようにしてみましたが、実運用上はベタに固定値書いておいた方が楽だしわかりやすいし再起動の度に値変わらないからその方がいいのかな。</li>
<li>あとserver側は各clientのnotificationEndPoint、publicKey、authを知ってないといけない。これらはclientが<code>serviceWorkerRegistration.pushManager.subscribe(subscribeParams)</code>した時に得られる。<code>subscribeParameter</code>とは、server側のpublicKeyを<code>urlB64ToUint8Array()</code>したものと<code>userVisibleOnly: true</code>は固定値。そうして得られた3つの値をserver側に引き渡さねばならないのだが、そのまま渡すのではなく、<code>btoa(String.fromCharCode.apply(null, new Uint8Array(key)))</code>などとしてString化する必要がある。</li>
<li>上記でもらう<code>notificationEndPoint</code>って、mozillaなら<code>https://updates.push.services.mozilla.com/wpush/v2/...</code>、chrome(chromium)なら<code>https://fcm.googleapis.com/fcm/...</code>というように、browser毎にmaker別のpush server持ってるんですね。ってことは、browserは裏ではこうしたsiteと常にconnection張ってるということ?</li>
<li>もっと深い原理(具体的にどういうheader/encryptionでpush serviceに送っているか)は<a href="http://adiary.blog.abk.nu/0391">Web Pushの実装まとめ（Chrome/Firefox/Android共通）</a>参照。</li>
<li>client側では、<code>main.js</code>で、まず<code>Notification.requestPermission()</code>で許可を得る。許可を求めるtimingは、page load直後かと思いきや、最初にいきなり許可求めると拒否られることが多いということで、button式に。button押したら許可求める、と。</li>
<li>許可が得られたら<code>navigator.serviceWorker.register('/sw.js')</code>でService Worker scriptを登録。<code>navigator.serviceWorker.ready</code>で利用可能になるのを待つ。これのreturn value(の型)は<code>ServiceWorkerRegistration</code>であり<code>navigator.serviceWorker</code>ではないので注意。これから<code>pushManager</code>を得ることになる。</li>
<li>その後、push serverからserverのpublicKeyをGET。</li>
<li><code>subscribeParams</code>を作って<code>serviceWorkerRegistration.pushManager.getSubscription(subscribeParams)</code>してみる。既に登録があったらunsubscribeしないとならない。上述のように、parameterではserver側のpublicKeyを<code>urlB64ToUint8Array()</code>したものと<code>userVisibleOnly: true</code>は固定値。</li>
<li>それから<code>serviceWorkerRegistration.pushManager.subscribe(subscribeParams)</code>でsubscribeする。</li>
<li>そうすると、endpoint、key、authが得られるので、それらをpush server側に通知。</li>
<li><code>sw.js</code>では、push通知が喜た場合<code>push</code> eventがfireされるので、<code>event.waitUntil(registration.showNotification(...)</code>する。この<code>registration</code>がどこから来るのかよくわからなかったが、ともあれ明示的に<code>waitUntil</code>して<code>showNotification</code>しないと表示されない(pushが来て勝手に表示されるわけではない)。</li>
<li>表示されたNotificationをclickすると<code>notificationClick</code> eventがfireされるので、clickしたらどこかへ遷移したい場合にはこのevent listenerを<code>sw.js</code>に書いておく必要がある。</li>
<li>PWA用に、<code>sw.js</code>の<code>install</code> eventと<code>fetch</code> event listenerでfile chacheの作成とその利用をcodeする(<code>install</code>でcacheに加え、<code>fetch</code>ではcacheにあったらそれを、なければfetchするようにする)。</li>
<li>notificationをpushするには、push server側でまず<code>new PushService(publicKey, privateKey, "http://localhost")</code>してから、clientから貰った情報で<code>push.send(new Notification(...))</code>する。中では色々と暗号化しているが、<a href="https://github.com/web-push-libs/webpush-java">nl.martijndwarsのwebpush-java</a>を使えばVAPIDのkey生成やnotificationのsendもone methodでよろしくやってくれる。他の言語も<a href="https://github.com/web-push-libs">web-push-libs</a>に各種あり。</li>
</ol>
<p>実際に自分で真似して書いてみて、
値やcodeを色々変えて試してみることで、
大分わかってきました。</p>
]]></content></entry></feed>