<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/jackson/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2018-07-18T07:36:11+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Suddenly failed to parse DateTime on JHipster Angular]]></title><link href="http://u-ryo.github.io//blog/2018/11/25/suddenly-failed-to-parse-datetime-on-jhipster-angular/"/><updated>2018-11-25T01:23:33+09:00</updated><id>/blog/2018/11/25/suddenly-failed-to-parse-datetime-on-jhipster-angular/</id><content type="html"><![CDATA[<p>ある時、JHipsterのAngularのUser Managementを久し振りに見てみると、user名など表示されるのが物凄く遅いことがありました。ポツ、また数秒してポツ、という具合に一つ一つの行が表示されていきます。あれぇ? こんなもんだったかなぁ? あまり気にしなかったのですが、流石に新規Userを作成しようとして失敗する段になって、これは何とかしなければと思い始めました。browserでF12を押してみると、どうやらDate Pipeでのparseに失敗している様子。どうして? 前は出来てたのに。serverから来ているJSONをよく見ると、DBからのDateTime部分のObjectが<code>epochSecond</code>とかnano何とかになっていました。検索すると、
<a href="https://stackoverflow.com/questions/37999762/efficient-way-to-have-jackson-serialize-java-8-instant-as-epoch-milliseconds/38004044">Efficient way to have Jackson serialize Java 8 Instant as epoch milliseconds?</a>を見付けて、中身読んでないですが「jackson-datatype-jsr310」を見掛けてあぁー!っと。</p>
<p>jhipsterで新規application作ってその<code>build.gradle</code>見てみると、確かにありました<code>compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'</code>。
これを、なくてもいいじゃん、と大分前に取っちゃってたんですね。確かにWebアプリ本体には影響なかったので気付きませんでした。あーあ。こういう影響が出てくるですか。なるほど。</p>
]]></content></entry><entry><title type="html"><![CDATA[XML marshaling in Spring Boot]]></title><link href="http://u-ryo.github.io//blog/2018/08/17/xml-marshaling-in-spring-boot/"/><updated>2018-08-19T22:52:54+09:00</updated><id>/blog/2018/08/17/xml-marshaling-in-spring-boot/</id><content type="html"><![CDATA[<p>Spring Boot applicationで単一xml fileを返すREST作ってあって、
そこではxmlと同じ構造のJava bean作って返すだけで、
marshalingについてはframework側がよしなにやってくれました。
client側がHTTP Request Headerに<code>Accept: application/xml</code>とすれば。
そうでないとjsonになります。まぁそれはそれでいいんです。いいと思いました。</p>
<p>その後、複数xmlをまとめてZIPにして返すRESTを求められました。
そうすると、自分でXMLにmarshalingしなければなりません。
と、Gson?
でも<code>build.gradle</code>見ると折角jackson読み込んでいるようなので、
jacksonでmarshalしました。<code>new ObjectMapper()</code>して、
<code>mapper.write(ZipOutputStream)</code>みたいなことすると、
一回(=one file)書いただけでstreamを勝手に? closeするようなので、
一旦<code>String</code>にしてから<code>zos.write()</code>しました。
また、<code>build.gradle</code>に<code>compile "...jackson-dataformat-xml"</code>も必要でした。</p>
<p>しかしそうすると、今度はXMLを返すRESTの方で、
返されるXMLの形が微妙に違っていました。具体的には、</p>
<ol>
<li><code>@XmlRootElement(name=...)</code>で指定した名前が効かない</li>
<li>XML Object中で<code>List</code>要素がnestされる
(<code>&lt;object&gt;&lt;/object&gt;&lt;object&gt;&lt;/object&gt;...</code>だったのが
<code>&lt;object&gt;&lt;object&gt;&lt;/object&gt;&lt;object&gt;&lt;/object&gt;...&lt;/object&gt;</code>に)</li>
</ol>
<p><code>@XmlRootElement</code>はJAXBのannotation
(<code>javax.xml.bind.annotation.XmlRootElement</code>)で、
これが効かないというのだからJAXBが効いてないのだろうと思い、
そういえば<code>build.gradle</code>に<code>jackson-dataformat-xml</code>って書いたな、
というのを思い出し、
ZIP中でのXMLのmarshallingをJAXBのものでやるようにして
<code>build.gradle</code>から<code>jackson-dataformat-xml</code>を追い出したら、
元に戻りました。</p>
<p>JAXBでのmarshalling、ちょこっと面倒ですが、
<code>context = JAXBContext.newInstance(Bean.class)</code>して
<code>marshaller = context.createMarshaller()</code>作って、
<code>marshaller.marshal(bean, zipOutputStream)</code>すればいいんですね。</p>
]]></content></entry></feed>