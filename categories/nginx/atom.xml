<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/nginx/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2018-07-18T07:36:11+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Spring Auth and JWT behind the reverse proxy]]></title><link href="http://u-ryo.github.io//blog/2018/08/27/spring-auth-and-jwt-behind-the-reverse-proxy/"/><updated>2018-09-01T20:25:36+09:00</updated><id>/blog/2018/08/27/spring-auth-and-jwt-behind-the-reverse-proxy/</id><content type="html"><![CDATA[<p>JHipsterのSpring Authなapplicationを
httpsのreverse proxy(nginx)の後ろに置いて、
GoogleのOAuth2でJWTな認証をしようとしました。
当然、backend serverからはGoogle APIに自分のhost名でaccessするような
URLを返してしまい、Google APIから戻ってきたところでJWT認証は弾かれます。
backend serverはfrontend serverの名前を知らないんですから、
そりゃあ当然です。
こういうreverse proxyの後ろにbackend server置いてOAuth2 + JWTなんて
そもそもダメなの? 何とかならないの?
と調べてみると、
<a href="https://stackoverflow.com/questions/31834278/spring-boot-and-oauth2-redirect-url-over-reverse-proxy">Spring Boot and OAuth2: redirect url over reverse proxy</a>に、
reverse proxy側で<code>X-Forwarded-Port</code>とかのproxy用HTTP Response Headerを設定し、
Spring application側で<code>server.use-forward-headers=true</code>にすればいいよ、
とあったので、
じゃぁnginxではどうやるのだろうと調べると、
<a href="https://qiita.com/HeRo/items/7063b86b5e8a2efde0f4">Nginx のリバースプロキシ設定のメモ</a>にありました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server {
</span><span class='line'>  listen 80;
</span><span class='line'>  server_name hoge.com;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>    index index.html index.htm;
</span><span class='line'>    proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>    proxy_set_header Host $http_host;
</span><span class='line'>    proxy_redirect off;
</span><span class='line'>    proxy_pass http://127.0.0.1:3000;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>この通りやってみると、
何故かGoogle APIには<code>http://proxy-server/...</code>で渡っており、
じゃぁっていうんで<code>proxy_set_header X-Forwarded-Proto https;</code>
とベタ書きしてみてもダメで、
うーんとか思っていると、
<a href="https://blog.akagi.jp/archives/3883.html">nginx でリバースプロキシするときの Tips</a>に<code>off</code>じゃなくて<code>proxy_redirect http:// https://;</code>という記述があったので、
試してみると、上手く行きました。
あーちなみに、<code>proxy_set_header X-Forwarded-Proto https;</code>も
ベタ書きじゃないとダメでした。
結局うちの場合は、以下の通りになりました。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server {
</span><span class='line'>        listen 80 default_server;
</span><span class='line'>        listen [::]:80 default_server;
</span><span class='line'>
</span><span class='line'>        # Everything is a 404
</span><span class='line'>        location / {
</span><span class='line'>                proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>                proxy_set_header X-Forwarded-Proto https;
</span><span class='line'>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>                proxy_set_header Host $http_host;
</span><span class='line'>                proxy_redirect http:// https://;
</span><span class='line'>                proxy_pass http://walt.mydns.bz:10022/;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        # You may need this to prevent return 404 recursion.
</span><span class='line'>        location = /404.html {
</span><span class='line'>                internal;
</span><span class='line'>        }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>で、<code>sudo /usr/sbin/nginx -s reload</code>です。</p>
<p>でも、これでGoogle APIから無事戻ってくるようにはなったものの、
その後「No-providerで登録」になってしまい、
まだ完成しません。
ただ、その問題は別のもののようで、一歩は進んだと思うので、記事にしました。</p>
<p>↑その「No-providerで登録」になってしまうのは、
backendで以下のようなerrorが出ていて。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>javax.validation.ConstraintViolationException: Validation failed for classes [bz.mydns.walt.canmatch.domain.User] during persist time for groups [javax.validation.groups.Default, ]
</span><span class='line'>List of constraint violations:[
</span><span class='line'>        ConstraintViolationImpl{interpolatedMessage=&#39;must match &quot;^[_&#39;.@A-Za-z0-9-]*$&quot;&#39;, propertyPath=login, rootBeanClass=class bz.mydns.walt.canmatch.domain.User, messageTemplate=&#39;{javax.validation.constraints.Pattern.message}&#39;}
</span><span class='line'>]
</span><span class='line'>        at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
</span><span class='line'>        at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
</span><span class='line'>        at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:197)
</span><span class='line'>        at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
</span><span class='line'>        at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:626)
</span><span class='line'>   :
</span><span class='line'>   :
</span></code></pre></td></tr></table></div></figure>
<p>何なんでしょうね。
これは、account mail addressが「w.disney@somecompany.co.jp」みたいな
「.」が入るものなんですが、それがいけないとかなのでしょうか。
というのも、フツーの「gepetto@gmail.com」みたいなmail accountなら
全く同じcodeで何の問題もなく入れるのです。
「must match」の対象が何なのか、よく分かりません。</p>
]]></content></entry><entry><title type="html"><![CDATA[Arukas Cloud]]></title><link href="http://u-ryo.github.io//blog/2018/08/22/arukas-cloud/"/><updated>2018-09-01T20:25:36+09:00</updated><id>/blog/2018/08/22/arukas-cloud/</id><content type="html"><![CDATA[<p><a href="https://www.sakura.ad.jp/">Sakura</a>がやっているからそのreverse spellingだという<a href="https://arukas.io/">Arukas</a>、
docker hostingをやっていて、
credit card登録は強制されますが1 containerなら無料というので、
専用SSH machine作って<a href="https://jhipster.tech/">JHipster</a>の開発/buildに使おうと企みました。</p>
<ul>
<li><a href="https://blog.stormcat.io/post/entry/arukas-development/">arukas cloudとDockerでお手軽に開発環境をゲットする #Arukas</a></li>
<li><a href="https://qiita.com/ProjectEuropa/items/3909bd51454fcf4ef16d">Arukas.ioを使ってWEBページを公開する</a></li>
</ul>
<p>無料枠では<a href="https://hub.docker.com/">Docker Hub</a>にあるものしか使えないとはいえ、
SSH serverの入ったdocker imageなんて色々あります。
でも使ってみると、基本的にはrootでlogin、
当然root loginをpermitしていて、
securityを維持するにはrootのpasswordを変える、
userを作って<code>.ssh/authorized_keys</code>を作る、
とかなわけですが、けどroot loginのpermissionを切って
sshdをrestartすると、docker終わっちゃうんですよね当たり前ですが。
何かもっとこう、最初からUser作ってrootは禁止して、
とかっていうの無いかなー、
と物色していると、どれだったか忘れましたがgithub.comから
自分が登録したkeyを<code>ADD</code>してるものがあって、
あーなるほどー、と思って。
<code>ADD https://github.com/$GITHUB_USER.keys /home/$GITHUB_USER/.ssh/authorized_keys</code>ということですね。</p>
<p>で、結局どうしても自分の欲しいものがなかったので、
<code>Dockerfile</code>自作することにしました。
元になるimageはDocker Hub上になければいけないので、
<a href="https://simple-it-life.com/2016/03/27/dockerhub/">Docker Hubを使ってGitHubにあるDockerfileからimageを自動生成する</a>を参考に、
Github → Docker Hub → Arukasという流れになるように、
<a href="https://github.com/u-ryo/docker_alpine_sshd/">自分のGithub repository</a>
→ <a href="https://hub.docker.com/r/uryooo/docker_alpine_sshd/">自分のDocker Hub repository</a>
→ <a href="https://app.arukas.io/apps/e45aaaa5-df9d-474d-ad42-d3eff1702d76">自分のArukas App</a>
と繋げて、
回るようにします。</p>
<p>Arukasでは変数定義が出来るというので<code>Dockerfile</code>でGithub user名を<code>ENV</code>定義して、
でもそうするとDocker Hubではbuildにコケるので<code>ENV</code>には何かdefault値がないとダメで、
でもdefault値を付けちゃうとそのdefault値がArukas Appまで残っちゃうんですよね。
<a href="https://blog.amedama.jp/entry/2018/01/30/230221">Docker コンテナの動作に必要な設定を起動時に渡す</a>などを見て、
え、shell script内じゃないとダメ?
じゃぁっていうんで<code>entrypoint.sh</code>作って試してみたんですけど、
Arukasで起動に失敗しました。Docker Hubではbuild通ったのに。
Arukasでは起動時のmessageとかは出ないので、何が悪いのか分かりません。
困り果ててArukasのchatで相談投げると、翌営業日にはすぐreplyをくれて、
動作確認のためということでpull requestまで作ってくれました。
まずは早速そのまま取り込んで起動してみたんですが、
やはり起動に失敗。
けれども、別のaccountの方で<code>ENV</code>を編集することで再起動させてみたところ
うまく行ったので、何だったんでしょう?
結局今はどちらでも上手く立ち上がるようになりました。
ありがとうございました。</p>
<p>他、Arukasでハマったのは、開放するPort、
後で色々service立ち上げようと思って3000番とか8080番とか色々書いておいたら、
Endpointが有効にならないんですね。
これもArukasのchatで聞いて教えてもらったんですが、
確かによく読むと、「Docker image立ち上がった時点で
書いたPortが全て開いてないとEndpointが有効にならない」
と書いてありますね。
「一番上に書いたPortだけEndpointに繋がる」というのは
「アプリ編集」画面のEndpointのinfoに書いてあるからわかったんですが。</p>
<p>baseとなるdistributionは、
軽いという<a href="https://www.alpinelinux.org">Alpine Linux</a>に。
アプリの管理も<code>apk add ...</code>コマンドで出来ますし、
packageも<code>screen</code>やら<code>openjdk8</code>やら<code>gradle</code>やら
結構色々あってびっくりです。
何かubuntuじゃなくてalpineで十分な気がしてきました。</p>
<p>目的としていたjhipster applicationのbuildは失敗しました。
specがしょぼい(128MB memory)のか通信量に制限があるのか、
<code>jhipster</code>コマンドの途中で止まり、
applicationのscaffoldingが出来ません。
まー、無料枠なのでmachine specについては文句言えませんから、
しょーがないのかなーと。</p>
<p>ただ、Endpointが<code>https</code>で手に入るので、
<a href="https://qiita.com/schwarz471/items/9b44adfbec006eab60b0">Nginxによるリバースプロキシの設定方法</a>を参考に、
nginxによるreverse proxyとして使おうかなー、
と思っています。
custom domainも使えるとのことですが、
CDNと同じくDNSを自分でcontrol出来ねばならないので、
dynamic DNSでは使えず、custom domainは諦めました。</p>
<ul>
<li><a href="https://hub.docker.com/r/uryooo/docker_alpine_sshd/builds/">docker hubの成果物</a>(といってもpull requestくれた山田さんのおかげモノですが。山田さんありがとうございます!)</li>
</ul>
<p>Githubにkeyを登録してあれば、Arukas AppでImageにこれ↑を指定し、
<code>ENV</code>で<code>GITHUB_USER</code>をGithubのuser名、
<code>PROXY_PASS</code>をreverse proxyしたいURL、
にして立ち上げると、
当該hostにssh出来、
またEndpointで指定したURLでreverse proxy出来ます。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ln -sf /dev/stdout /var/log/nginx/access.log
</span><span class='line'>ln -sf /dev/stderr /var/log/nginx/error.log
</span></code></pre></td></tr></table></div></figure>
<p>こんな技があるんですねーなるほどー。</p>
]]></content></entry></feed>