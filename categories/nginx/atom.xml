<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/nginx/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Arukas Cloud]]></title><link href="http://u-ryo.github.io//blog/2018/08/22/arukas-cloud/"/><updated>2018-08-24T14:09:00+09:00</updated><id>/blog/2018/08/22/arukas-cloud/</id><content type="html"><![CDATA[<p><a href="https://www.sakura.ad.jp/">Sakura</a>がやっているからそのreverse spellingだという<a href="https://arukas.io/">Arukas</a>、
docker hostingをやっていて、
credit card登録は強制されますが1 containerなら無料というので、
専用SSH machine作って<a href="https://jhipster.tech/">JHipster</a>の開発/buildに使おうと企みました。</p>
<p>cf. <a href="https://blog.stormcat.io/post/entry/arukas-development/">arukas cloudとDockerでお手軽に開発環境をゲットする #Arukas</a>,
<a href="https://qiita.com/ProjectEuropa/items/3909bd51454fcf4ef16d">Arukas.ioを使ってWEBページを公開する</a></p>
<p>無料枠では<a href="https://hub.docker.com/">Docker Hub</a>にあるものしか使えないとはいえ、
SSH serverの入ったdocker imageなんて色々あります。
でも使ってみると、基本的にはrootでlogin、
当然root loginをpermitしていて、
securityを維持するにはrootのpasswordを変える、
userを作って<code>.ssh/authorized_keys</code>を作る、
なわけですが、けどroot loginのpermissionを切って
sshdをrestartすると、docker終わっちゃうんですよね。
何かもっとこう、最初からUser作ってrootは禁止して、
とかっていうの無いかなー、
と物色していると、どれだったか忘れましたがgithub.comから
自分が登録したkeyを<code>ADD</code>してるものがあって、
あーなるほどー、と思って。
<code>ADD https://github.com/$GITHUB_USER.keys /home/$GITHUB_USER/.ssh/authorized_keys</code>ということですね。</p>
<p>で、結局どうしても自分の欲しいものがなかったので、
<code>Dockerfile</code>自作することにしました。
元になるimageはDocker Hub上になければいけないので、
<a href="https://simple-it-life.com/2016/03/27/dockerhub/">Docker Hubを使ってGitHubにあるDockerfileからimageを自動生成する</a>を参考に、
Github → Docker Hub → Arukasという流れになるように、
<a href="https://github.com/u-ryo/docker_alpine_sshd/">自分のGithub repository</a>
→ <a href="https://hub.docker.com/r/uryooo/docker_alpine_sshd/">自分のDocker Hub repository</a>
→ <a href="https://app.arukas.io/apps/e45aaaa5-df9d-474d-ad42-d3eff1702d76">自分のArukas App</a>
と繋げて、
回るようにします。</p>
<p>Arukasでは変数定義が出来るというので<code>Dockerfile</code>でGithub user名を<code>ENV</code>定義して、
でもそうするとDocker Hubではbuildにコケるので<code>ENV</code>には何かdefault値がないとダメで、
でもdefault値を付けちゃうとそのdefault値がArukas Appまで残っちゃうんですよね。
<a href="https://blog.amedama.jp/entry/2018/01/30/230221">Docker コンテナの動作に必要な設定を起動時に渡す</a>などを見て、
え、shell script内じゃないとダメ?
じゃぁっていうんで<code>entrypoint.sh</code>作って試してみたんですけど、
Arukasで起動に失敗しました。Docker Hubではbuild通ったのに。
起動時のmessageとかは出ないので、何が悪いのか分かりません。
困り果ててArukasのchatで相談投げると、翌営業日にはすぐreplyをくれて、
動作確認のためということでpull requestまで作ってくれました。
まずは早速そのまま取り込んで起動してみたんですが、
やはり起動に失敗しました。
けれども、別のaccountの方でENVを編集することで再起動させてみたところ
うまく行ったので、何だったんでしょう?
要するにどちらでも上手く立ち上がるようになりました。
ありがとうございました。</p>
<p>他、Arukasでハマったのは、開放するPort、
後で色々開けようと思って3000番とか8080番とか色々書いておいたら、
Endpointが有効にならないんですね。
これもArukasのchatで聞いて教えてもらったんですが、
確かによく読むと、Docker image立ち上がった時点で
書いたPortが全て開いてないとEndpointが有効にならない、
と書いてありますね。
「一番上に書いたPortだけEndpointに繋がる」というのは
「アプリ編集」画面のEndpointのinfoに書いてあるからわかったんですが。</p>
<p>baseとなるdistributionは、
軽いという<a href="https://www.alpinelinux.org">Alpine Linux</a>に。
アプリの管理も<code>apk add ...</code>コマンドで出来ますし、
packageも<code>screen</code>やら<code>openjdk8</code>やら<code>gradle</code>やら
結構色々あってびっくりです。
何かubuntuじゃなくてalpineで十分な気がしてきました。</p>
<p>目的としていたjhipster applicationのbuildは失敗しました。
specがしょぼい(128MB memory)のか通信量に制限があるのか、
<code>jhipster</code>コマンドの途中で止まり、
applicationのscaffoldingが出来ません。
まー、無料枠なのでmachine specについては文句言えませんから、
しょーがないのかなーと。</p>
<p>ただ、Endpointが<code>https</code>で手に入るので、
<a href="https://qiita.com/schwarz471/items/9b44adfbec006eab60b0">Nginxによるリバースプロキシの設定方法</a>を参考に、
nginxによるreverse proxyとして使おうかなー、
と思っています。
custom domainも使えるとのことですが、
CDNと同じくDNSを自分でcontrol出来ねばならないので、
dynamic DNSでは使えず、custom domainは諦めました。</p>
<p>成果物(といってもpull requestくれた山田さんのおかげモノですが。山田さんありがとうございます!):
<a href="https://hub.docker.com/r/uryooo/docker_alpine_sshd/builds/">uryooo/docker<em>alpine</em>sshd</a></p>
<p>Githubにkeyを登録してあれば、Arukas AppでImageにこれ↑を指定し、
<code>ENV</code>で<code>GITHUB_USER</code>をGithubのuser名、
<code>PROXY_PASS</code>をreverse proxyしたいURL、
にして立ち上げると、
当該hostにssh出来、
またEndpointで指定したURLでreverse proxy出来ます。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ln -sf /dev/stdout /var/log/nginx/access.log
</span><span class='line'>ln -sf /dev/stderr /var/log/nginx/error.log
</span></code></pre></td></tr></table></div></figure>
<p>こんな技があるんですねーなるほどー。</p>
]]></content></entry></feed>