<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/gradle/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2018-07-18T07:36:11+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[creating executable war on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/12/03/creating-executable-war-on-jhipster/"/><updated>2018-12-03T02:19:42+09:00</updated><id>/blog/2018/12/03/creating-executable-war-on-jhipster/</id><content type="html"><![CDATA[<p>いつも忘れちゃうんで。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ gradle bootRepackage -Pprod
</span></code></pre></td></tr></table></div></figure>
<p><code>build.gradle</code>に中に定義があります。</p>
]]></content></entry><entry><title type="html"><![CDATA[unit test on jhipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/23/unit-test-on-jhipster/"/><updated>2018-07-18T07:36:11+09:00</updated><id>/blog/2018/03/23/unit-test-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでのunit testでいくつかハマったのでメモ。</p>
<ul>
<li><p>unit test実行は<code>gradle test</code></p>
</li>
<li><p>単一test classを指定するには<code>gradle test --tests FQDN.class.name</code></p>
</li>
<li><p>test class内の<code>log.debug(...)</code>を出力するには、<code>build.gradle</code>に<code>test.testLogging.showStandardStreams = true</code>を記述し、また<code>src/test/resources/application.yml</code>に以下を記述(<code>src/main/resources/application-dev.yml</code>には記述あり)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>logging:
</span><span class='line'>    level:
</span><span class='line'>        ROOT: DEBUG
</span><span class='line'>        bz.mydns.walt.canmatch: DEBUG
</span><span class='line'>        io.github.jhipster: DEBUG
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>test classにおいてRESTで認証したuserを表したい時には<code>@WithMockUser</code>(<code>import org.springframework.security.test.context.support.WithMockUser;</code>)</p>
</li>
<li><p>testされる側のREST methodでは、<code>java.security.Principal</code>を勝手に引数に加えることでlogin userを取得出来、それをtestする場合にはtest classの<code>MockMvc</code>で<code>restUserInfoMockMvc.perform(post("/api/user-infos")...)</code>などとする時に<code>org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user</code>を使って<code>.user("foo")</code>とすると、認証された"foo"というuserでのaccessをmock出来るが、<code>org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication()</code>というstatic methodで<code>java.security.Principal</code>が取れ、それに<code>.getName()</code>で名前を取得可能。その方がspringっぽいのかな。test class側では、認証accessが必要なmethodに上記の<code>@WithMockUser</code>をつければ良い。<code>@WithMockUser(username="foo", password="pw", roles={"USER"})</code>などとすれば色々指定可能だが基本的には不要</p>
</li>
</ul>
<h3>参照</h3>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/4.2.5.BUILD-SNAPSHOT/apidocs/org/springframework/security/test/context/support/WithMockUser.html">WithMockUser</a></li>
<li><a href="https://qiita.com/opengl-8080/items/eaa8f4eb9286a3df7986">Spring Security 使い方メモ　テスト</a>(2017-08-02)</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html">11. Testing Method Security</a>(Spring公式doc)</li>
<li><a href="https://ishiis.net/2016/11/12/spring-boot-security-unit-test/">Spring Securityを使っているWebアプリのUnitテスト</a>(2016/11/12)</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[how to build my web application product]]></title><link href="http://u-ryo.github.io//blog/2016/02/19/how-to-build-my-web-application-product/"/><updated>2018-07-18T07:36:11+09:00</updated><id>/blog/2016/02/19/how-to-build-my-web-application-product/</id><content type="html"><![CDATA[<h2>Private memo</h2>
<p>To build hondaPortal,
<code>cd</code> to hondaPortalView,
<code>bower install</code> and <code>npm install</code> first to set up javascript libraries.
And return to the parent directory and try <code>gradlew</code>.
If the build process encounters an error on imagemin in hondaPortalView,
I found a workaround at <a href="https://github.com/gruntjs/grunt-contrib-imagemin/issues/330">Fatal error: Cannot read property 'contents' of undefined #330</a>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>cd node_modules/grunt-contrib-imagemin
</span><span class='line'>npm install imagemin@4.0.0
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[Created my blog by Grain]]></title><link href="http://u-ryo.github.io//blog/2015/10/26/created-my-blog-by-grain/"/><updated>2018-07-18T07:36:11+09:00</updated><id>/blog/2015/10/26/created-my-blog-by-grain/</id><content type="html"><![CDATA[<h2>Blog、はじめました</h2>
<p>非常に遅まきながら、blogを作ってみました。</p>
<p>きしださんの<a href="http://d.hatena.ne.jp/nowokay/20140225">2014-02-25(火) コミュニティに入るか入らないかでエンジニアとしての幸福度がかわる</a>を見まして、
なるほどそうだなぁと思い、
そのためには発信していかなきゃ、
ということで、
始めました。</p>
<p>blog環境は世に数多あれど、
editorで書きたい、
dataを手元に置いておきたい、
ということから、
Qiitaやはてぶ等ではなく、
Github Pagesを用いました。
Github Pagesというのがあってblogに使える、
というのも今回初めて知りました。
この場合の世の趨勢は「Github Pages + Jekyll」、
ただ数が多くなると重くなるということで、
最近は「Github Pages + Hugo」に乗り換える人が多いようですが、
Java屋さんとしては、
Gradleで行けるGrainというのがあるというのを知り、
それを使ってみました。
わかってしまえば、結構簡単に入ります。</p>
<ol>
<li><p>まず、https://github.com で自分のGithub Pages repository(必ず「ユーザーID.github.io」という名前)を作成します。
中身は空で構いません。</p>
</li>
<li><p>それから、GrainのOctopress用テーマを持ってきます。
これがGrainを含んでおり、また現状唯一のblog用のテーマです。
<a href="https://github.com/sysgears/grain-theme-octopress/releases">https://github.com/sysgears/grain-theme-octopress/releases</a>
で適宜最新版を確認してみて下さい。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ wget -O - https://github.com/sysgears/grain-theme-octopress/archive/v0.4.5.tar.gz|tar xvfz -
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>この状態で、プレビュー出来ます。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ cd grain-theme-octopress-0.4.5
</span><span class='line'>$ ./gradlew
</span></code></pre></td></tr></table></div></figure>
とすると、
<a href="http://localhost:4000/">http://localhost:4000/</a>
でプレビューできます。
(本当は「./grainw 」でプレビューなんですがうまく行きませんでした)</p>
</li>
<li><p>新しい記事を作成するには、以下のようにします。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ ./grainw create-post &#39;Any blog post title&#39;
</span></code></pre></td></tr></table></div></figure>
すると、
「./content/blog/yyyy-mm-dd-上で指定したタイトル.markdown」</p>
</li>
</ol>
<p>というfileが出来ます。それを編集します。</p>
<ol>
<li><p>Github Pagesにデプロイするには、
SiteConfig.groovy という設定ファイルの中に、
github のURLを書きます。
私の場合は、↓こうでした。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gh_pages_url</span> <span class="o">=</span> <span class="s1">&#39;git@github.com:u-ryo/u-ryo.github.io.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>
sshでgithubにアップロード出来るように、
<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a>
で手元のマシンのssh public keyを登録しておきます。</p>
</li>
<li><p>そうしておいてから、
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span> <span class="o">./</span><span class="n">grainw</span> <span class="n">gendeploy</span>
</span></code></pre></td></tr></table></div></figure>
とすると、私(ユーザーID:u-ryo)の場合は、
<a href="http://u-ryo.github.io/">http://u-ryo.github.io/</a>
でblogが見られる、という塩梅です。</p>
</li>
<li><p>タイトル等このblogの設定は、
SiteConfig.groovy の中身を適宜変更すれば良いです。</p>
</li>
</ol>
<p>...というようなことを、これから少しずつ発信していきたいと思います。</p>
<h3>はまった点</h3>
<ul>
<li>grain-theme-octopress をgit cloneするとうまく行かず(./grainw generateで止まりました)、tar.gzファイルを落として展開するとうまく行った(./grainw generateが通った)</li>
<li>記事ヘッダの「author:」で、文字列はシングルクォートないしダブルクオーテーションで囲む必要がある(groovyで処理するので、「文字列」にしておかないと後でエラーになります)</li>
<li>emacsのバックアップファイル(拡張子の最後に「~」が付くもの)もblogファイルと見做されてしまうため、消す必要がある(また、書いている途中だと「.#〜」というロックファイルが出来るが、これがあるとプレビューが立ち上がらない)</li>
</ul>
]]></content></entry></feed>