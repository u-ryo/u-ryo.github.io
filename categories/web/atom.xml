<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/web/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2015-11-12T00:45:57+00:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Angular2 Tutorial]]></title><link href="http://u-ryo.github.io//blog/2015/11/15/angular2-tutorial/"/><updated>2015-11-15T06:58:25+00:00</updated><id>/blog/2015/11/15/angular2-tutorial/</id><content type="html"><![CDATA[<p>Angular2の<a href="https://angular.io/docs/ts/latest/quickstart.html">Tutorial</a>が凄いです。
すぐ使えて面白いです。
英語も平易ですし。
そこから<a href="https://angular.io/docs/ts/latest/guide/">Developer Guides</a>へも、
割と繋がってますし。完全に、ではないのが残念ですけど。
特にroutingの解説は、欲しいところです。
netで探せばAngular2の解説が幾つか日本語でも出て来ますが、
2015年3月4月くらいのものだと、
もうかなり大分違うので(<code>@Teplate</code>とかもうないでしょう?)、
気を付けないとなりません。
でも今からAngularやるなら、
もう来年からAngular2になることが分かっているので、
今更<code>$scope</code>とかやりたくないですよ。
まだまだα版なので、これからも大きく変わりそうですけど...</p>
]]></content></entry><entry><title type="html"><![CDATA[AuthType None]]></title><link href="http://u-ryo.github.io//blog/2015/10/27/authtype-none/"/><updated>2015-11-12T00:45:57+00:00</updated><id>/blog/2015/10/27/authtype-none/</id><content type="html"><![CDATA[<p>さっき同僚に聞かれて調べました。
apacheにおけるBasic認証/Form認証等を
子ディレクトリにおいては無効にしたい場合、
.htaccessに、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">Satisfy</span> <span class="k">Any</span>
</span></code></pre></td></tr></table></div></figure>
<p>と書けば良い、という説が諸所にあったのですが、
ちゃんとキャンセルするには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthType</span> <span class="k">None</span>
</span><span class='line'><span class="nb">Require</span> <span class="k">all</span> granted
</span></code></pre></td></tr></table></div></figure>
<p>とすべき、みたいです。
「AuthType None」だけだと、
「No authentication done but request not allowed
without authentication for /~u-ryo/test/test/.
Authentication not configured?」と言われて500
Internal Server Errorになってしまいます。</p>
<p>親ディレクトリではIP制限とBasic認証を同時にかけて、
子ディレクトリではIP制限だけ、
且つBasic認証のポップアップは出ないように
(IP制限で弾かれれば即403)、
という要件だったので、</p>
<h3>親</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthType</span> Basic
</span><span class='line'><span class="nb">AuthName</span> test
</span><span class='line'><span class="nb">AuthUserFile</span> password.txt
</span><span class='line'><span class="nb">require</span> valid-user
</span><span class='line'><span class="nb">Allow</span> from <span class="m">127.0.0.1</span>
</span><span class='line'><span class="nb">Satisfy</span> <span class="k">Any</span>
</span></code></pre></td></tr></table></div></figure>
<h3>子</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthType</span> <span class="k">None</span>
</span><span class='line'><span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'><span class="nb">Order</span> deny,allow
</span><span class='line'><span class="nb">Allow</span> from <span class="m">127.0.0.1</span>
</span><span class='line'><span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'><span class="nb">Satisfy</span> <span class="k">All</span>
</span></code></pre></td></tr></table></div></figure>
<p>といった感じで解決しました。</p>
]]></content></entry><entry><title type="html"><![CDATA[Koding]]></title><link href="http://u-ryo.github.io//blog/2015/10/27/koding/"/><updated>2015-11-12T00:45:57+00:00</updated><id>/blog/2015/10/27/koding/</id><content type="html"><![CDATA[<p>今はコード書くのもブラウザでやるんですね。
<a href="https://koding.com/">Koding</a>で開発環境が、shellまで含めて、ブラウザで完結するなんて。
<a href="https://c9.io/">Cloud9</a>も試してみましたが、
無料で使える範囲では、Kodingの方が良かったですぼくにとっては。</p>
<ul>
<li>メモリが1GB(Cloud9では512MB)</li>
<li>ディスク容量も若干多い(Cloud9は1GB)</li>
<li>Grainを動かしてみたんですが、どちらでもOutOfMemoryErrorになったものの、Kodingではswapon出来た(Cloud9ではnot permittedと言われる)</li>
</ul>
<p>なるほど、これでChromebookでもバリバリ開発が出来るわけですか。
今や、ブラウザ上で画像編集や動画編集まで出来るとは。
(<a href="http://yukan-news.ameba.jp/20141113-17/">Chromebook購入後に、究極のPCへ変貌させるWebサービスたちが完璧過ぎ！</a>)
かなり置いてけぼりを食らっている感じです。</p>
<p>尚、この投稿は、Koding上で開いたworkspaceにgit cloneして環境を作り、付属のエディタで書いて、
grainwして生成しています。</p>
]]></content></entry></feed>