<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/mock/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[mock web server by WireMock on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/26/mock-web-server-by-wiremock-on-jhipster/"/><updated>2018-04-09T15:24:10+09:00</updated><id>/blog/2018/03/26/mock-web-server-by-wiremock-on-jhipster/</id><content type="html"><![CDATA[<p>外部web siteのresponseのtestに<a href="http://wiremock.org/">WireMock</a>を使ったのでメモ。</p>
<p>参考: <a href="https://dev.classmethod.jp/etc/wiremock-practice/">WireMockを使って通信に関するテストをやってみよう</a></p>
<p>使う時は<code>build.gradle</code>で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>testCompile &#39;com.github.tomakehurst:wiremock-standalone:2.15.0&#39;
</span></code></pre></td></tr></table></div></figure>
<p>して(<code>wiremock-standalone</code>でないと、
jetty系のClassNotFoundExceptionに見舞われた)から、
test classの方で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import com.github.tomakehurst.wiremock.junit.WireMockRule;
</span><span class='line'>import static com.github.tomakehurst.wiremock.client.WireMock.*;
</span><span class='line'>    :
</span><span class='line'>    @Rule
</span><span class='line'>    public WireMockRule wireMockRule = new WireMockRule(8089);
</span></code></pre></td></tr></table></div></figure>
<p>とし、各test method内で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>        stubFor(post(urlPathEqualTo(&quot;/any_path&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*arr_stn=%96%BC%8C%C3%89%AE.*&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*dep_stn=%93%8C%8B%9E.*&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*train=1.*&quot;))
</span><span class='line'>                .willReturn(aResponse()
</span><span class='line'>                            .withStatus(200)
</span><span class='line'>                            .withBodyFile(&quot;for_test.html&quot;)));
</span></code></pre></td></tr></table></div></figure>
<p>とstatic importした
<code>com.github.tomakehurst.wiremock.client.WireMock.stubFor</code>を使えば良い。
matching rule詳細は<a href="http://wiremock.org/docs/request-matching/">公式ページ</a>を。
post body requestに対して<code>.withQueryParam("...", matching("..."))</code>は効かなかった。
また、<code>matching</code>なので全体にmatchingさせる必要があることに注意。
<code>find</code>系はなし。</p>
<p>test対象classでのqueryがここでの指定に合わなければ、404がthrowされる。</p>
<p>上記のように、test用に既に用意してあるhtml fileを<code>.withBodyFile("...")</code>で指定でき、
実体は<code>src/test/resources/__files/</code>に置く。
<code>.withBodyFile(...)</code>は公式Docに無く、JavaDoc APIも無いので、
<a href="https://github.com/tomakehurst/wiremock/blob/master/src/main/java/com/github/tomakehurst/wiremock/client/MappingBuilder.java">Github上のsource code</a>を眺めて見つけた。</p>
<p>こうしたmappingを<code>src/test/resources/mappings/</code>以下に<code>anyName.json</code>を置いて、
requestとresponseを指定できるのだが、
それだと「こういうrequest bodyの時はこのようなresponse、
こっちの時はこれこれのresponse」というように、
複数の条件を書くことが出来なかった
(書いてみると、最後のrequest/response条件しか効かず。
ならばと複数fileに分けてみたら、
file名alphabeticalで最後のrequest/responseしか効かず)。
なので、Javaでstub条件書いて各test method内に書くしか無い?</p>
<p>これはSpringの話だが、
testの時だけ<code>localhost:8089</code>を見るようにするには、
<code>〜.config.ApplicationProperties</code> classにfield定義、setter/getterのaccessorを付け、<code>src/main/resources/config/application.yml</code>の<code>application:</code>以下に通常時の値を、<code>src/test/resources/config/application.yml</code>の<code>application:</code>以下にtest時の値(この場合は<code>http://localhost:8089/any_path</code>)を記述。
実際に使うには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    @Autowired
</span><span class='line'>    private ApplicationProperties properties;
</span></code></pre></td></tr></table></div></figure>
<p>とDIさせて、<code>properties.get〜()</code>と普通にgetterでget。</p>
<p>AssertJ、method chainで書けるので、
static importが<code>assertThat</code>だけで済んでいいですね。</p>
<p>これはJHipsterの話?(Springかなぁ?)で、
Test Class内で<code>@Autowired</code>してるservice classのmockが必要になったら、
特に<code>build.grade</code>に記述せずとも<code>import org.mockito.Mock;</code>して
mockitoの<code>@Mock</code>が使えるんですね。
そう言えば、元々<code>import org.mockito.MockitoAnnotations;</code>されてますね。</p>
]]></content></entry></feed>