<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/spring-boot/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-22T10:04:50+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[CSV download on Spring Boot REST]]></title><link href="http://u-ryo.github.io//blog/2018/08/24/csv-download-on-spring-boot-rest/"/><updated>2018-08-24T14:00:35+09:00</updated><id>/blog/2018/08/24/csv-download-on-spring-boot-rest/</id><content type="html"><![CDATA[<p>Spring BootでCSV downloadを実現するのに、
<a href="https://qiita.com/yo1000/items/050c5c47daabf7a10e10">Spring MVC で CSV をダウンロードさせる</a>を参考にしました。
要するに、</p>
<ul>
<li><code>compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"</code> in <code>build.gradle</code></li>
<li>Bean classの各fieldに<code>@JsonProperty</code></li>
<li>field出力順を制御したいので<code>@JsonPropertyOrder({"login", "filename",...})</code></li>
<li><code>CsvMapper mapper = new CsvMapper();</code>して<code>CsvSchema schema = mapper.schemaFor(SomeBean.class).withHeader();</code>して<code>return mapper.writer(schema).writeValueAsString(beans);</code></li>
<li><code>compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"</code>を入れて<code>@JsonFormat(pattern="yyyy/MM/dd HH:mm:ss")</code>して<code>mapper.registerModule(new JavaTimeModule());</code>すると、<code>ZonedDateTime</code>を如意に表示できる?<a href="http://lewandowski.io/2016/02/formatting-java-time-with-spring-boot-using-json/">Formatting Java Time with Spring Boot using JSON</a></li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Returning XML from Spring Boot REST]]></title><link href="http://u-ryo.github.io//blog/2018/08/24/returning-xml-from-spring-boot-rest/"/><updated>2018-08-24T11:13:28+09:00</updated><id>/blog/2018/08/24/returning-xml-from-spring-boot-rest/</id><content type="html"><![CDATA[<p>Spring BootでRESTやってて、XMLでdataを返したいと。
<a href="http://blog.rakugakibox.net/entry/2014/11/23/java_spring_boot_rest">Java: Spring Boot で REST なアプリを作ってみる</a>を見てみて、
<code>@XmlRootElement</code>を付ければいい?
ついでにtag名がclass名と違うので、
<code>@XmlRootElement(name="annotation")</code>としました。</p>
<p>あと、<a href="https://projectlombok.org">Lombok</a>を使ったせいなのか、
各fieldに<code>@XmlElement</code>を付けないと、出て来ませんでした。
そういうもの?!</p>
]]></content></entry><entry><title type="html"><![CDATA[Path Parameter for DateTime in Spring Boot REST]]></title><link href="http://u-ryo.github.io//blog/2018/08/21/path-parameter-for-datetime-in-spring-boot-rest/"/><updated>2018-08-22T15:57:11+09:00</updated><id>/blog/2018/08/21/path-parameter-for-datetime-in-spring-boot-rest/</id><content type="html"><![CDATA[<p>Spring BootのRESTで、
日付をPath Parameterで受け取りたかったんですね。
<a href="https://qiita.com/Tsukuru/items/1c872f51d25c6d452fbc">GetMappingでURLパラメータからValueを取得する～LocalDate編～</a>に書いてある通りですけど、
<code>@DateTimeFormat(pattern="yyyy-MM-dd")</code>なんて使えるんですね。</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@GetMapping(value=&quot;/element/{since}&quot;)
</span><span class='line'>public Element getElement(@DateTimeFormat(pattern=&quot;yyyyMMdd&quot;) @PathVariable LocalDate since) {...
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[daemonizing jhipster application]]></title><link href="http://u-ryo.github.io//blog/2018/08/19/daemonizing-jhipster-application/"/><updated>2018-08-22T15:57:11+09:00</updated><id>/blog/2018/08/19/daemonizing-jhipster-application/</id><content type="html"><![CDATA[<p><a href="https://www.jhipster.tech/">JHipster</a>のapplicationで、
OS(Ubuntu 18.04)起動時にapplicationもdaemonとして自動起動するようにするには。</p>
<p>きっとSpring Bootでdaemonizeする方法を探ればいいと思って、
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html">61. Installing Spring Boot Applications</a>にあるように、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>bootJar {
</span><span class='line'>	launchScript()
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>でもこれ、Spring Boot 2での話で、
こちとらまだJHipster 4.14.4、Spring Bootは1.5です。
そんなものはない、と当然失敗します。
なのでもうちょっと古い記事を探しました。</p>
<p><a href="https://ishiis.net/2016/09/27/spring-boot-init-script/">spring bootアプリの起動スクリプトを作る</a>を見て、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>apply plugin: &#39;spring-boot&#39;
</span><span class='line'>
</span><span class='line'>springBoot {
</span><span class='line'>    executable = true
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>
<p>としたんですが、<code>plugin 'spring-boot'</code>はないと言われ、
<code>executable = true</code>は<code>build.gradle</code>に既に書いてありました。</p>
<p>そもそもそんなことしなくても、
<a href="https://www.jhipster.tech/production/">Using in Production</a>
にあるように、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ gradle -Pprod bootWar
</span></code></pre></td></tr></table></div></figure>
<p>でexecutable war作れるんですね。
で、それを<code>/etc/init.d/</code>にsymlinkすればいいだけという。
<code>-Pprod</code>を付けないとdevelopment versionになってしまいます。
あとは、<code>update-rc.d appname defaults</code>で登録すれば良いです。</p>
]]></content></entry><entry><title type="html"><![CDATA[XML marshaling in Spring Boot]]></title><link href="http://u-ryo.github.io//blog/2018/08/17/xml-marshaling-in-spring-boot/"/><updated>2018-08-22T15:57:11+09:00</updated><id>/blog/2018/08/17/xml-marshaling-in-spring-boot/</id><content type="html"><![CDATA[<p>Spring Boot applicationで単一xml fileを返すREST作ってあって、
そこではxmlと同じ構造のJava bean作って返すだけで、
marshalingについてはframework側がよしなにやってくれました。
client側がHTTP Request Headerに<code>Accept: application/xml</code>とすれば。
そうでないとjsonになります。まぁそれはそれでいいんです。いいと思いました。</p>
<p>その後、複数xmlをまとめてZIPにして返すRESTを求められました。
そうすると、自分でXMLにmarshalingしなければなりません。
と、Gson?
でも<code>build.gradle</code>見ると折角jackson読み込んでいるようなので、
jacksonでmarshalしました。<code>new ObjectMapper()</code>して、
<code>mapper.write(ZipOutputStream)</code>みたいなことすると、
一回(=one file)書いただけでstreamを勝手に? closeするようなので、
一旦<code>String</code>にしてから<code>zos.write()</code>しました。
また、<code>build.gradle</code>に<code>compile "...jackson-dataformat-xml"</code>も必要でした。</p>
<p>しかしそうすると、今度はXMLを返すRESTの方で、
返されるXMLの形が微妙に違っていました。具体的には、</p>
<ol>
<li><code>@XmlRootElement(name=...)</code>で指定した名前が効かない</li>
<li>XML Object中で<code>List</code>要素がnestされる
(<code>&lt;object&gt;&lt;/object&gt;&lt;object&gt;&lt;/object&gt;...</code>だったのが
<code>&lt;object&gt;&lt;object&gt;&lt;/object&gt;&lt;object&gt;&lt;/object&gt;...&lt;/object&gt;</code>に)</li>
</ol>
<p><code>@XmlRootElement</code>はJAXBのannotation
(<code>javax.xml.bind.annotation.XmlRootElement</code>)で、
これが効かないというのだからJAXBが効いてないのだろうと思い、
そういえば<code>build.gradle</code>に<code>jackson-dataformat-xml</code>って書いたな、
というのを思い出し、
ZIP中でのXMLのmarshallingをJAXBのものでやるようにして
<code>build.gradle</code>から<code>jackson-dataformat-xml</code>を追い出したら、
元に戻りました。</p>
<p>JAXBでのmarshalling、ちょこっと面倒ですが、
<code>context = JAXBContext.newInstance(Bean.class)</code>して
<code>marshaller = context.createMarshaller()</code>作って、
<code>marshaller.marshal(bean, zipOutputStream)</code>すればいいんですね。</p>
]]></content></entry><entry><title type="html"><![CDATA[mock web server by WireMock on JHipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/26/mock-web-server-by-wiremock-on-jhipster/"/><updated>2018-04-09T15:24:10+09:00</updated><id>/blog/2018/03/26/mock-web-server-by-wiremock-on-jhipster/</id><content type="html"><![CDATA[<p>外部web siteのresponseのtestに<a href="http://wiremock.org/">WireMock</a>を使ったのでメモ。</p>
<p>参考: <a href="https://dev.classmethod.jp/etc/wiremock-practice/">WireMockを使って通信に関するテストをやってみよう</a></p>
<p>使う時は<code>build.gradle</code>で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>testCompile &#39;com.github.tomakehurst:wiremock-standalone:2.15.0&#39;
</span></code></pre></td></tr></table></div></figure>
<p>して(<code>wiremock-standalone</code>でないと、
jetty系のClassNotFoundExceptionに見舞われた)から、
test classの方で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import com.github.tomakehurst.wiremock.junit.WireMockRule;
</span><span class='line'>import static com.github.tomakehurst.wiremock.client.WireMock.*;
</span><span class='line'>    :
</span><span class='line'>    @Rule
</span><span class='line'>    public WireMockRule wireMockRule = new WireMockRule(8089);
</span></code></pre></td></tr></table></div></figure>
<p>とし、各test method内で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>        stubFor(post(urlPathEqualTo(&quot;/any_path&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*arr_stn=%96%BC%8C%C3%89%AE.*&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*dep_stn=%93%8C%8B%9E.*&quot;))
</span><span class='line'>                .withRequestBody(matching(&quot;.*train=1.*&quot;))
</span><span class='line'>                .willReturn(aResponse()
</span><span class='line'>                            .withStatus(200)
</span><span class='line'>                            .withBodyFile(&quot;for_test.html&quot;)));
</span></code></pre></td></tr></table></div></figure>
<p>とstatic importした
<code>com.github.tomakehurst.wiremock.client.WireMock.stubFor</code>を使えば良い。
matching rule詳細は<a href="http://wiremock.org/docs/request-matching/">公式ページ</a>を。
post body requestに対して<code>.withQueryParam("...", matching("..."))</code>は効かなかった。
また、<code>matching</code>なので全体にmatchingさせる必要があることに注意。
<code>find</code>系はなし。</p>
<p>test対象classでのqueryがここでの指定に合わなければ、404がthrowされる。</p>
<p>上記のように、test用に既に用意してあるhtml fileを<code>.withBodyFile("...")</code>で指定でき、
実体は<code>src/test/resources/__files/</code>に置く。
<code>.withBodyFile(...)</code>は公式Docに無く、JavaDoc APIも無いので、
<a href="https://github.com/tomakehurst/wiremock/blob/master/src/main/java/com/github/tomakehurst/wiremock/client/MappingBuilder.java">Github上のsource code</a>を眺めて見つけた。</p>
<p>こうしたmappingを<code>src/test/resources/mappings/</code>以下に<code>anyName.json</code>を置いて、
requestとresponseを指定できるのだが、
それだと「こういうrequest bodyの時はこのようなresponse、
こっちの時はこれこれのresponse」というように、
複数の条件を書くことが出来なかった
(書いてみると、最後のrequest/response条件しか効かず。
ならばと複数fileに分けてみたら、
file名alphabeticalで最後のrequest/responseしか効かず)。
なので、Javaでstub条件書いて各test method内に書くしか無い?</p>
<p>これはSpringの話だが、
testの時だけ<code>localhost:8089</code>を見るようにするには、
<code>〜.config.ApplicationProperties</code> classにfield定義、setter/getterのaccessorを付け、<code>src/main/resources/config/application.yml</code>の<code>application:</code>以下に通常時の値を、<code>src/test/resources/config/application.yml</code>の<code>application:</code>以下にtest時の値(この場合は<code>http://localhost:8089/any_path</code>)を記述。
実際に使うには、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    @Autowired
</span><span class='line'>    private ApplicationProperties properties;
</span></code></pre></td></tr></table></div></figure>
<p>とDIさせて、<code>properties.get〜()</code>と普通にgetterでget。</p>
<p>AssertJ、method chainで書けるので、
static importが<code>assertThat</code>だけで済んでいいですね。</p>
<p>これはJHipsterの話?(Springかなぁ?)で、
Test Class内で<code>@Autowired</code>してるservice classのmockが必要になったら、
特に<code>build.grade</code>に記述せずとも<code>import org.mockito.Mock;</code>して
mockitoの<code>@Mock</code>が使えるんですね。
そう言えば、元々<code>import org.mockito.MockitoAnnotations;</code>されてますね。</p>
]]></content></entry><entry><title type="html"><![CDATA[unit test on jhipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/23/unit-test-on-jhipster/"/><updated>2018-04-09T15:24:10+09:00</updated><id>/blog/2018/03/23/unit-test-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでのunit testでいくつかハマったのでメモ。</p>
<ul>
<li><p>unit test実行は<code>gradle test</code></p>
</li>
<li><p>単一test classを指定するには<code>gradle test --tests FQDN.class.name</code></p>
</li>
<li><p>test class内の<code>log.debug(...)</code>を出力するには、<code>build.gradle</code>に<code>test.testLogging.showStandardStreams = true</code>を記述し、また<code>src/test/resources/application.yml</code>に以下を記述(<code>src/main/resources/application-dev.yml</code>には記述あり)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>logging:
</span><span class='line'>    level:
</span><span class='line'>        ROOT: DEBUG
</span><span class='line'>        bz.mydns.walt.canmatch: DEBUG
</span><span class='line'>        io.github.jhipster: DEBUG
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>test classにおいてRESTで認証したuserを表したい時には<code>@WithMockUser</code>(<code>import org.springframework.security.test.context.support.WithMockUser;</code>)</p>
</li>
<li><p>testされる側のREST methodでは、<code>java.security.Principal</code>を勝手に引数に加えることでlogin userを取得出来、それをtestする場合にはtest classの<code>MockMvc</code>で<code>restUserInfoMockMvc.perform(post("/api/user-infos")...)</code>などとする時に<code>org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user</code>を使って<code>.user("foo")</code>とすると、認証された"foo"というuserでのaccessをmock出来るが、<code>org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication()</code>というstatic methodで<code>java.security.Principal</code>が取れ、それに<code>.getName()</code>で名前を取得可能。その方がspringっぽいのかな。test class側では、認証accessが必要なmethodに上記の<code>@WithMockUser</code>をつければ良い。<code>@WithMockUser(username="foo", password="pw", roles={"USER"})</code>などとすれば色々指定可能だが基本的には不要</p>
</li>
</ul>
<h3>参照</h3>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/4.2.5.BUILD-SNAPSHOT/apidocs/org/springframework/security/test/context/support/WithMockUser.html">WithMockUser</a></li>
<li><a href="https://qiita.com/opengl-8080/items/eaa8f4eb9286a3df7986">Spring Security 使い方メモ　テスト</a>(2017-08-02)</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html">11. Testing Method Security</a>(Spring公式doc)</li>
<li><a href="https://ishiis.net/2016/11/12/spring-boot-security-unit-test/">Spring Securityを使っているWebアプリのUnitテスト</a>(2016/11/12)</li>
</ul>
]]></content></entry></feed>