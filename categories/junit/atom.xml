<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/junit/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2017-08-28T21:21:17+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[unit test on jhipster]]></title><link href="http://u-ryo.github.io//blog/2018/03/23/unit-test-on-jhipster/"/><updated>2018-03-23T23:24:05+09:00</updated><id>/blog/2018/03/23/unit-test-on-jhipster/</id><content type="html"><![CDATA[<p>JHipsterでのunit testでいくつかハマったのでメモ。</p>
<ul>
<li><p>unit test実行は<code>gradle test</code></p>
</li>
<li><p>単一test classを指定するには<code>gradle test --tests FQDN.class.name</code></p>
</li>
<li><p>test class内の<code>log.debug(...)</code>を出力するには、<code>build.gradle</code>に<code>test.testLogging.showStandardStreams = true</code>を記述し、また<code>src/test/resources/application.yml</code>に以下を記述(<code>src/main/resources/application-dev.yml</code>には記述あり)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>logging:
</span><span class='line'>    level:
</span><span class='line'>        ROOT: DEBUG
</span><span class='line'>        bz.mydns.walt.canmatch: DEBUG
</span><span class='line'>        io.github.jhipster: DEBUG
</span></code></pre></td></tr></table></div></figure></p>
</li>
<li><p>test classにおいてRESTで認証したuserを表したい時には<code>@WithMockUser</code>(<code>import org.springframework.security.test.context.support.WithMockUser;</code>)</p>
</li>
<li><p>testされる側のREST methodでは、<code>java.security.Principal</code>を勝手に引数に加えることでlogin userを取得出来、それをtestする場合にはtest classの<code>MockMvc</code>で<code>restUserInfoMockMvc.perform(post("/api/user-infos")...)</code>などとする時に<code>org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user</code>を使って<code>.user("foo")</code>とすると、認証された"foo"というuserでのaccessをmock出来るが、<code>org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication()</code>というstatic methodで<code>java.security.Principal</code>が取れ、それに<code>.getName()</code>で名前を取得可能。その方がspringっぽいのかな。test class側では、認証accessが必要なmethodに上記の<code>@WithMockUser</code>をつければ良い。<code>@WithMockUser(username="foo", password="pw", roles={"USER"})</code>などとすれば色々指定可能だが基本的には不要</p>
</li>
</ul>
<h3>参照</h3>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/4.2.5.BUILD-SNAPSHOT/apidocs/org/springframework/security/test/context/support/WithMockUser.html">WithMockUser</a></li>
<li><a href="https://qiita.com/opengl-8080/items/eaa8f4eb9286a3df7986">Spring Security 使い方メモ　テスト</a>(2017-08-02)</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html">11. Testing Method Security</a>(Spring公式doc)</li>
<li><a href="https://ishiis.net/2016/11/12/spring-boot-security-unit-test/">Spring Securityを使っているWebアプリのUnitテスト</a>(2016/11/12)</li>
</ul>
]]></content></entry><entry><title type="html"><![CDATA[Spock and JMockit]]></title><link href="http://u-ryo.github.io//blog/2017/12/19/spock-and-jmockit/"/><updated>2017-12-23T00:37:17+09:00</updated><id>/blog/2017/12/19/spock-and-jmockit/</id><content type="html"><![CDATA[<p>バイトのtestで、Spockでさらっとtest書いて、
いざ全pattern cross check! と思ったら、
無限loopになるpatternが多くて。
<code>@Timeout</code>導入でサクッと、と思ったら、
loop回るのが早くて凄いmemoryと時間を食って、
<code>@Timeout</code>では抑えきれません。
うーむ、それじゃぁGroovyのmetaClassでmethodの振る舞いを変更だ!
と思ったら、どうやっても振る舞いが変わりません。
悩んだ末、GroovyのmetaClassでの再定義は、
外側のJava classには及ばない(Groovyの世界の中だけ)、と結論。
仕方無いじゃぁJMockitだ!
って思ったんですが、今度はSpockとJMockitは相容れないようで、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Caused by: java.lang.UnsupportedOperationException: Attempted to redefine class loaded from custom class loader
</span></code></pre></td></tr></table></div></figure>
<p>なので<code>JAVA_OPTS=-javaagent:.../jmockit-1.37.jar</code>をつけて実行すると今度は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mockit.internal.ClassFile$NotFoundException: Unable to find class file for Test2$1
</span></code></pre></td></tr></table></div></figure>
<p>spockは諦めました。</p>
<p>ならばせめてJUnit5だ! と思ったんですが、<code>build.gradle</code>で、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>junitAnt &#39;org.apache.ant:ant-junit4:1.10.1&#39;
</span></code></pre></td></tr></table></div></figure>
<p>と指定しているので、敢え無く撃沈。
調べるとどうも、JUnit5とAntを組み合わせる動きはないんですよね。
<a href="https://devlog.arksystems.co.jp/2017/12/12/4436/">それでも Ant を使いたい人のための JUnit 5</a>というのもありましたけど、これは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;java</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span> <span class="na">classname=</span><span class="s">&quot;org.junit.platform.console.ConsoleLauncher&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>で無理矢理実行してるだけですから、ちょっと違います。
こちとら、<code>build.gradle</code>から<code>ant.junitAnt(...)</code>で呼んでいるので、
<code>ConsoleLauncher</code>だと困るんです(→どうやって書いたらいいかよくわからない)。</p>
<p>結局、JUnit4 + JMockit で書きました。
<code>Timeout</code>や<code>ExpectedException</code>は<code>@Rule</code>にしてちょこっと今っぽくしましたけど、
そのくらいが関の山でした。</p>
<p><code>ant.junitAnt(...)</code>で<code>fork:true</code>にして、また更に
<code>junit4.jar</code>より<code>jmockit.jar</code>を先に書いておかないと
<code>IllegalStateException</code>が出る(<a href="http://cadeveloper.hatenablog.com/">gradle + jmockitでjava.lang.IllegalStateExceptionって出たので対応</a>)、
というのでそう書いたし<code>gradle --stacktrace</code>してload順確認したんですけど、
それでもException出たので、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>jvmarg(line:&quot;-javaagent:${configurations.jmockit.asPath.split(&#39;:&#39;)[0]}&quot;)
</span></code></pre></td></tr></table></div></figure>
<p>を入れて漸く動きました。</p>
<p>けど、折角JMockit入れたのに、
やっぱり別の時には<code>Timeout</code>も必要で。
JUnit4だと<code>@Rule</code>つけて<code>Timeout.millis(200)</code>でいいんですね今。
そしたら、JMockitで振る舞い変えなくても、
GroovyでなくJavaなら<code>Timeout</code>だけで済むじゃーないですかー!
うぁーん。</p>
<p>あとはParameterized Testにしました。
<a href="https://github.com/Pragmatists/JUnitParams">JUnitParams</a>が簡便そうです。
何がいいって、<a href="https://github.com/junit-team/junit4/wiki/parameterized-tests">JUnit4標準の方法</a>だとinstance fieldがparameterになるので、
全methodについて回っちゃいませんか? というのが不安で。
JUnitParamsなら、明示的に単一methodに対してparameter指定できるので安心です。</p>
<p>...ダメです。JUnitParams使うと、Timeout効かないことがわかりました。
悲しい。</p>
]]></content></entry></feed>