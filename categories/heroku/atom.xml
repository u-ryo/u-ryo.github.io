<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[u-ryo's blog]]></title><link href="http://u-ryo.github.io//categories/heroku/atom.xml" rel="self"/><link href="http://u-ryo.github.io//"/><updated>2015-11-12T09:45:57+09:00</updated><id>http://u-ryo.github.io//</id><author><name><![CDATA[u-ryo]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[ruby on heroku]]></title><link href="http://u-ryo.github.io//blog/2015/12/17/ruby-on-heroku/"/><updated>2015-12-19T23:26:17+09:00</updated><id>/blog/2015/12/17/ruby-on-heroku/</id><content type="html"><![CDATA[<p>11月から駒沢大学のCTCに派遣されて、
某A空輸の次期予約サイトのMonkey Testをやらされているんですが、
screen shotとかuploadするのに、何故か20kbという制限があります。
そんなの、Gimpとかフリーソフト使えば簡単なんですが、
入れさせてくれないんですよね。
なので、screen shotと撮るにはALT + PrintScreen、
編集はMicro$oft謹製のペイント、
pngでsave出来るようになっただけマシではありますが、
64bit colorでしか保存できないので、
sizeが無駄に大きくなっちゃって、
20kbなんてすぐ超えちゃうんですよね。
ImageMagick使えばそんなの、
<code>convert infile.png -colors 256 outfile.png</code>
で済むのに。</p>
<p>仕方無いので、縮小したりしていたんですが、
縮小すると何が書いてあるかわからないし。
そうだ、Web Applicationならinstallしなくてもいい、
と気付いたんですけど、
巷間のserviceに外部秘の画像を上げるのは気が引けたので、
なら自分で作ろうと。</p>
<p>オンプレミスなserverも持ってますが、
イマドキじゃないのと、
よく見たらオンプレミスserverにはImageMagickも入ってないですし。
まぁそれは<code>apt-get install</code>一発で行けるからいいんですけど、
shell scriptでconvertすればいいから、
cgiでちゃちゃっと書いちゃおう、と思ったんですが。
POSTされたfile dataをparseするのが面倒かな、
と思ったのと、あと443が開いてないんですね。
なので、herokuに上げよう、と。
そうなるとrubyかな、と思ったので、調べてやってみました。</p>
<p>herokuの公式ruby用sampleを元に作れそう、だったので、
調べて、sinatra使ってるってわかって、
あとImageMagickはherokuに元々入ってて、
rubyはrmagicを使えるらしいということで、やりました。</p>
<p>cf.</p>
<ol>
<li><a href="https://gist.github.com/konitter/5370904">Heroku導入メモ</a></li>
<li><a href="git://github.com/heroku/ruby-sample.git">ruby sample</a></li>
</ol>
<p><code>$ git commit -a</code></p>
<p><code>$ git push heroku master</code></p>
<p>rmagicを使うには、以下の作業が必要でした。</p>
<ol>
<li>Gemfileに<code>gem 'rmagick', '~&gt;2.15.4', :require =&gt; 'RMagick'</code></li>
<li>c9上で<code>sudo apt-get install imagemagick libmagick++-dev</code></li>
</ol>
<p>POSTされたfile dataの取得は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image_filename = &quot;./#{params[:file][:filename]}&quot;
</span><span class='line'>imagedata = params[:file][:tempfile].read
</span></code></pre></td></tr></table></div></figure>
<p>image dataの取得は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image = Magick::Image.from_blob(imagedata).first
</span></code></pre></td></tr></table></div></figure>
<p>fileとしてのreturnは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>content_type = &#39;image/png&#39;
</span><span class='line'>attachment image_filename
</span></code></pre></td></tr></table></div></figure>
<p>image dataのbinary data取り出しは、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image.to_blob
</span></code></pre></td></tr></table></div></figure>
<p>256色への減色は、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mage.format = &quot;PNG8&quot;
</span></code></pre></td></tr></table></div></figure>
<p>とするだけで8bit colorで保存されます。</p>
<p>最終的には、</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>require &#39;sinatra&#39;
</span><span class='line'>require &quot;rmagick&quot;
</span><span class='line'>
</span><span class='line'>get &#39;/&#39; do
</span><span class='line'>  erb :index
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>post &#39;/&#39; do
</span><span class='line'>	if params[:file]
</span><span class='line'>	   image_filename = &quot;./#{params[:file][:filename]}&quot;
</span><span class='line'>	   imagedata = params[:file][:tempfile].read
</span><span class='line'>	   image = Magick::Image.from_blob(imagedata).first
</span><span class='line'>	   image.format = &quot;PNG8&quot;
</span><span class='line'>        content_type = &#39;image/png&#39;
</span><span class='line'>        attachment image_filename
</span><span class='line'>        image.to_blob
</span><span class='line'>	end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>
<p>あぁ、erbってのも初めて使いました。
ここへpostするためのplain htmlが書いてあります。</p>
]]></content></entry></feed>